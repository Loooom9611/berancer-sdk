{"version":3,"sources":["../src/abi/authorizer.ts","../src/abi/balancerBatchRouter.ts","../src/abi/balancerBufferRouter.ts","../src/abi/balancerQueries.ts","../src/abi/balancerRelayer.ts","../src/abi/balancerRouter.ts","../src/abi/batchRelayerLibrary.ts","../src/abi/composableStableFactoryV6.V2.ts","../src/abi/erc20.ts","../src/abi/permit2.ts","../src/abi/vault.V2.ts","../src/abi/vault.V3.ts","../src/abi/vaultExtension.V3.ts","../src/abi/weightedPoolFactory.V3.ts","../src/abi/weightedPoolFactoryV4.V2.ts","../src/abi/weightedPoolV4.V2.ts","../src/abi/weightedPool.V3.ts","../src/abi/vaultAdmin.V3.ts","../src/abi/stablePool.V3.ts","../src/abi/stablePoolFactory.V3.ts","../src/abi/balancerCompositeLiquidityRouter.ts","../src/data/providers/balancer-api/client/index.ts","../src/types.ts","../src/utils/poolTypeMapper.ts","../src/entities/token.ts","../src/utils/constants.ts","../src/utils/errors.ts","../src/entities/tokenAmount.ts","../src/utils/math.ts","../src/utils/helpers.ts","../src/utils/pool.ts","../src/utils/sortByAddress.ts","../src/data/providers/balancer-api/modules/nested-pool-state/index.ts","../src/data/providers/balancer-api/modules/pool-state/index.ts","../src/data/providers/balancer-api/modules/sorSwapPaths/index.ts","../src/data/providers/balancer-api/modules/buffer-state/index.ts","../src/data/providers/balancer-api/index.ts","../src/data/providers/initPoolDataProvider.ts","../src/utils/tokens.ts","../src/data/providers/onchain/index.ts","../src/entities/encoders/composableStable.ts","../src/entities/addLiquidity/types.ts","../src/entities/removeLiquidity/types.ts","../src/entities/encoders/base.ts","../src/abi/cowAmmPool.ts","../src/entities/utils/cowAmmHelpers.ts","../src/entities/utils/getSortedTokens.ts","../src/entities/utils/doAddLiquidityQuery.ts","../src/entities/utils/getAmounts.ts","../src/entities/utils/getPoolStateWithBalancesV2.ts","../src/entities/utils/getPoolStateWithBalancesV3.ts","../src/entities/utils/getValue.ts","../src/entities/utils/replaceWrapped.ts","../src/entities/utils/parseAddLiquidityArgs.ts","../src/entities/utils/parseInitializeArgs.ts","../src/entities/utils/proportionalAmountsHelpers.ts","../src/entities/utils/isPoolToken.ts","../src/entities/utils/validateNestedPoolState.ts","../src/entities/addLiquidity/addLiquidityV2/composableStable/addLiquidityComposableStable.ts","../src/entities/addLiquidity/helpers.ts","../src/entities/encoders/stable.ts","../src/entities/addLiquidity/addLiquidityV2/stable/addLiquidityStable.ts","../src/entities/addLiquidity/addLiquidityV2/weighted/addLiquidityWeighted.ts","../src/entities/encoders/weighted.ts","../src/entities/addLiquidity/addLiquidityV2/index.ts","../src/entities/addLiquidity/addLiquidityV3/index.ts","../src/entities/addLiquidity/addLiquidityV3/doAddLiquidityUnbalancedQuery.ts","../src/entities/addLiquidity/addLiquidityV3/doAddLiquiditySingleTokenQuery.ts","../src/entities/addLiquidity/addLiquidityV3/doAddLiquidityProportionalQuery.ts","../src/entities/utils/areTokensInArray.ts","../src/entities/inputValidator/utils/validateTokens.ts","../src/entities/inputValidator/inputValidatorBase.ts","../src/entities/inputValidator/composableStable/inputValidatorComposableStable.ts","../src/entities/inputValidator/cowAmm/inputValidatorCowAmm.ts","../src/entities/inputValidator/gyro/inputValidatorGyro.ts","../src/entities/inputValidator/stable/inputValidatorStable.ts","../src/entities/inputValidator/weighted/inputValidatorWeighted.ts","../src/entities/inputValidator/boosted/inputValidatorBoosted.ts","../src/entities/inputValidator/inputValidator.ts","../src/entities/addLiquidity/addLiquidityCowAmm/index.ts","../src/entities/addLiquidity/index.ts","../src/entities/addLiquidityBoosted/index.ts","../src/entities/addLiquidityBoosted/doAddLiquidityUnbalancedQuery.ts","../src/entities/addLiquidityBoosted/doAddLiquidityPropotionalQuery.ts","../src/entities/addLiquidityBuffer/index.ts","../src/entities/addLiquidityBuffer/doAddLiquidityQuery.ts","../src/entities/addLiquidityNested/addLiquidityNestedV2/index.ts","../src/entities/relayer/index.ts","../src/entities/relayer/authorization.ts","../src/entities/addLiquidityNested/addLiquidityNestedV2/encodeCalls.ts","../src/entities/addLiquidityNested/addLiquidityNestedV2/doAddLiquidityNestedQuery.ts","../src/entities/types.ts","../src/entities/addLiquidityNested/addLiquidityNestedV2/getQueryCallsAttributes.ts","../src/entities/addLiquidityNested/addLiquidityNestedV2/validateInputs.ts","../src/entities/addLiquidityNested/addLiquidityNestedV3/index.ts","../src/entities/addLiquidityNested/index.ts","../src/entities/createPool/createPoolV2/composableStable/createPoolComposableStable.ts","../src/entities/utils/getRandomBytes32.ts","../src/entities/createPool/createPoolV2/weighted/createPoolWeighted.ts","../src/entities/createPool/createPoolV2/index.ts","../src/entities/createPool/createPoolV3/weighted/createPoolWeighted.ts","../src/entities/createPool/createPoolV3/stable/createPoolStable.ts","../src/entities/createPool/createPoolV3/index.ts","../src/entities/createPool/index.ts","../src/entities/initBuffer/index.ts","../src/entities/initBuffer/doInitBufferQuery.ts","../src/entities/initPool/initPoolV2/composableStable/initPoolComposableStable.ts","../src/entities/initPool/initPoolV2/weighted/initPoolWeighted.ts","../src/entities/initPool/initPoolV2/index.ts","../src/entities/initPool/initPoolV3.ts","../src/entities/initPool/index.ts","../src/entities/permitHelper/helper.ts","../src/entities/removeLiquidity/helper.ts","../src/entities/permitHelper/index.ts","../src/entities/permit2Helper/allowanceTransfer.ts","../src/entities/permit2Helper/constants.ts","../src/entities/permit2Helper/domain.ts","../src/entities/swap/limits.ts","../src/entities/permit2Helper/index.ts","../src/entities/removeLiquidity/removeLiquidityV2/weighted/removeLiquidityWeighted.ts","../src/entities/utils/doRemoveLiquidityQuery.ts","../src/entities/utils/parseRemoveLiquidityArgs.ts","../src/entities/removeLiquidity/removeLiquidityV2/composableStable/removeLiquidityComposableStable.ts","../src/entities/removeLiquidity/removeLiquidityV2/stable/removeLiquidityStable.ts","../src/entities/removeLiquidity/removeLiquidityV2/index.ts","../src/entities/removeLiquidity/removeLiquidityV3/doRemoveLiquiditySingleTokenExactOutQuery.ts","../src/entities/removeLiquidity/removeLiquidityV3/doRemoveLiquiditySingleTokenExactInQuery.ts","../src/entities/removeLiquidity/removeLiquidityV3/doRemoveLiquidityProportionalQuery.ts","../src/entities/removeLiquidity/removeLiquidityV3/doRemoveLiquidityRecoveryQuery.ts","../src/entities/removeLiquidity/removeLiquidityV3/encodeRemoveLiquiditySingleTokenExactOut.ts","../src/entities/removeLiquidity/removeLiquidityV3/encodeRemoveLiquiditySingleTokenExactIn.ts","../src/entities/removeLiquidity/removeLiquidityV3/encodeRemoveLiquidityProportional.ts","../src/entities/removeLiquidity/removeLiquidityV3/encodeRemoveLiquidityRecovery.ts","../src/entities/removeLiquidity/removeLiquidityV3/index.ts","../src/entities/removeLiquidity/removeLiquidityCowAmm/index.ts","../src/entities/removeLiquidity/index.ts","../src/entities/removeLiquidityNested/removeLiquidityNestedV2/index.ts","../src/entities/removeLiquidityNested/removeLiquidityNestedV2/encodeCalls.ts","../src/entities/removeLiquidityNested/removeLiquidityNestedV2/doRemoveLiquidityNestedQuery.ts","../src/entities/removeLiquidityNested/removeLiquidityNestedV2/getPeekCalls.ts","../src/entities/removeLiquidityNested/removeLiquidityNestedV2/getQueryCallsAttributes.ts","../src/entities/removeLiquidityNested/removeLiquidityNestedV2/validateInputs.ts","../src/entities/removeLiquidityNested/removeLiquidityNestedV3/index.ts","../src/entities/removeLiquidityNested/index.ts","../src/entities/swap/paths/pathHelpers.ts","../src/entities/swap/paths/pathWithAmount.ts","../src/entities/swap/swaps/v2/index.ts","../src/entities/swap/swaps/v3/index.ts","../src/entities/swap/index.ts","../src/entities/priceImpactAmount.ts","../src/entities/priceImpact/helper.ts","../src/entities/removeLiquidityBoosted/index.ts","../src/entities/removeLiquidityBoosted/doRemoveLiquidityProportionalQuery.ts","../src/entities/priceImpact/addLiquidityUnbalancedBoosted.ts","../src/entities/priceImpact/addLiquidityUnbalanced.ts","../src/entities/priceImpact/addLiquidityNested.ts","../src/entities/priceImpact/index.ts","../src/entities/slippage.ts","../src/entities/swap/swaps/v2/auraBalSwaps/auraBalSwaps.ts","../src/entities/swap/swaps/v2/auraBalSwaps/types.ts","../src/entities/swap/swaps/v2/auraBalSwaps/constants.ts","../src/entities/swap/swaps/v2/auraBalSwaps/parseInputs.ts","../src/entities/swap/swaps/v2/auraBalSwaps/joinSwap.ts","../src/entities/swap/swaps/v2/auraBalSwaps/joinPool.ts","../src/entities/swap/swaps/v2/auraBalSwaps/replaceWrapped.ts","../src/entities/swap/swaps/v2/auraBalSwaps/swap.ts","../src/entities/swap/swaps/v2/auraBalSwaps/swapExit.ts","../src/entities/swap/swaps/v2/auraBalSwaps/exitPool.ts"],"sourcesContent":["export const authorizerAbi = [\n    {\n        inputs: [{ internalType: 'address', name: 'admin', type: 'address' }],\n        stateMutability: 'nonpayable',\n        type: 'constructor',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'bytes32',\n                name: 'role',\n                type: 'bytes32',\n            },\n            {\n                indexed: true,\n                internalType: 'bytes32',\n                name: 'previousAdminRole',\n                type: 'bytes32',\n            },\n            {\n                indexed: true,\n                internalType: 'bytes32',\n                name: 'newAdminRole',\n                type: 'bytes32',\n            },\n        ],\n        name: 'RoleAdminChanged',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'bytes32',\n                name: 'role',\n                type: 'bytes32',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'account',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'sender',\n                type: 'address',\n            },\n        ],\n        name: 'RoleGranted',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'bytes32',\n                name: 'role',\n                type: 'bytes32',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'account',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'sender',\n                type: 'address',\n            },\n        ],\n        name: 'RoleRevoked',\n        type: 'event',\n    },\n    {\n        inputs: [],\n        name: 'DEFAULT_ADMIN_ROLE',\n        outputs: [{ internalType: 'bytes32', name: '', type: 'bytes32' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'bytes32', name: 'actionId', type: 'bytes32' },\n            { internalType: 'address', name: 'account', type: 'address' },\n            { internalType: 'address', name: '', type: 'address' },\n        ],\n        name: 'canPerform',\n        outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [{ internalType: 'bytes32', name: 'role', type: 'bytes32' }],\n        name: 'getRoleAdmin',\n        outputs: [{ internalType: 'bytes32', name: '', type: 'bytes32' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'bytes32', name: 'role', type: 'bytes32' },\n            { internalType: 'uint256', name: 'index', type: 'uint256' },\n        ],\n        name: 'getRoleMember',\n        outputs: [{ internalType: 'address', name: '', type: 'address' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [{ internalType: 'bytes32', name: 'role', type: 'bytes32' }],\n        name: 'getRoleMemberCount',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'bytes32', name: 'role', type: 'bytes32' },\n            { internalType: 'address', name: 'account', type: 'address' },\n        ],\n        name: 'grantRole',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'bytes32[]', name: 'roles', type: 'bytes32[]' },\n            { internalType: 'address', name: 'account', type: 'address' },\n        ],\n        name: 'grantRoles',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'bytes32[]', name: 'roles', type: 'bytes32[]' },\n            { internalType: 'address[]', name: 'accounts', type: 'address[]' },\n        ],\n        name: 'grantRolesToMany',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'bytes32', name: 'role', type: 'bytes32' },\n            { internalType: 'address', name: 'account', type: 'address' },\n        ],\n        name: 'hasRole',\n        outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'bytes32', name: 'role', type: 'bytes32' },\n            { internalType: 'address', name: 'account', type: 'address' },\n        ],\n        name: 'renounceRole',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'bytes32', name: 'role', type: 'bytes32' },\n            { internalType: 'address', name: 'account', type: 'address' },\n        ],\n        name: 'revokeRole',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'bytes32[]', name: 'roles', type: 'bytes32[]' },\n            { internalType: 'address', name: 'account', type: 'address' },\n        ],\n        name: 'revokeRoles',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'bytes32[]', name: 'roles', type: 'bytes32[]' },\n            { internalType: 'address[]', name: 'accounts', type: 'address[]' },\n        ],\n        name: 'revokeRolesFromMany',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n] as const;\n","export const balancerBatchRouterAbi = [\n    {\n        inputs: [\n            { internalType: 'contract IVault', name: 'vault', type: 'address' },\n            { internalType: 'contract IWETH', name: 'weth', type: 'address' },\n            {\n                internalType: 'contract IPermit2',\n                name: 'permit2',\n                type: 'address',\n            },\n            { internalType: 'string', name: 'routerVersion', type: 'string' },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'constructor',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'target', type: 'address' }],\n        name: 'AddressEmptyCode',\n        type: 'error',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'account', type: 'address' }],\n        name: 'AddressInsufficientBalance',\n        type: 'error',\n    },\n    { inputs: [], name: 'ErrorSelectorNotFound', type: 'error' },\n    { inputs: [], name: 'EthTransfer', type: 'error' },\n    { inputs: [], name: 'FailedInnerCall', type: 'error' },\n    { inputs: [], name: 'InputLengthMismatch', type: 'error' },\n    { inputs: [], name: 'InsufficientEth', type: 'error' },\n    { inputs: [], name: 'ReentrancyGuardReentrantCall', type: 'error' },\n    {\n        inputs: [\n            { internalType: 'uint8', name: 'bits', type: 'uint8' },\n            { internalType: 'uint256', name: 'value', type: 'uint256' },\n        ],\n        name: 'SafeCastOverflowedUintDowncast',\n        type: 'error',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'token', type: 'address' }],\n        name: 'SafeERC20FailedOperation',\n        type: 'error',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'sender', type: 'address' }],\n        name: 'SenderIsNotVault',\n        type: 'error',\n    },\n    { inputs: [], name: 'SwapDeadline', type: 'error' },\n    { inputs: [], name: 'TransientIndexOutOfBounds', type: 'error' },\n    {\n        inputs: [],\n        name: 'getSender',\n        outputs: [{ internalType: 'address', name: '', type: 'address' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [{ internalType: 'bytes[]', name: 'data', type: 'bytes[]' }],\n        name: 'multicall',\n        outputs: [\n            { internalType: 'bytes[]', name: 'results', type: 'bytes[]' },\n        ],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    { internalType: 'address', name: 'token', type: 'address' },\n                    { internalType: 'address', name: 'owner', type: 'address' },\n                    {\n                        internalType: 'address',\n                        name: 'spender',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'amount',\n                        type: 'uint256',\n                    },\n                    { internalType: 'uint256', name: 'nonce', type: 'uint256' },\n                    {\n                        internalType: 'uint256',\n                        name: 'deadline',\n                        type: 'uint256',\n                    },\n                ],\n                internalType: 'struct IRouterCommon.PermitApproval[]',\n                name: 'permitBatch',\n                type: 'tuple[]',\n            },\n            {\n                internalType: 'bytes[]',\n                name: 'permitSignatures',\n                type: 'bytes[]',\n            },\n            {\n                components: [\n                    {\n                        components: [\n                            {\n                                internalType: 'address',\n                                name: 'token',\n                                type: 'address',\n                            },\n                            {\n                                internalType: 'uint160',\n                                name: 'amount',\n                                type: 'uint160',\n                            },\n                            {\n                                internalType: 'uint48',\n                                name: 'expiration',\n                                type: 'uint48',\n                            },\n                            {\n                                internalType: 'uint48',\n                                name: 'nonce',\n                                type: 'uint48',\n                            },\n                        ],\n                        internalType:\n                            'struct IAllowanceTransfer.PermitDetails[]',\n                        name: 'details',\n                        type: 'tuple[]',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'spender',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'sigDeadline',\n                        type: 'uint256',\n                    },\n                ],\n                internalType: 'struct IAllowanceTransfer.PermitBatch',\n                name: 'permit2Batch',\n                type: 'tuple',\n            },\n            { internalType: 'bytes', name: 'permit2Signature', type: 'bytes' },\n            { internalType: 'bytes[]', name: 'multicallData', type: 'bytes[]' },\n        ],\n        name: 'permitBatchAndCall',\n        outputs: [\n            { internalType: 'bytes[]', name: 'results', type: 'bytes[]' },\n        ],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'contract IERC20',\n                        name: 'tokenIn',\n                        type: 'address',\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: 'address',\n                                name: 'pool',\n                                type: 'address',\n                            },\n                            {\n                                internalType: 'contract IERC20',\n                                name: 'tokenOut',\n                                type: 'address',\n                            },\n                            {\n                                internalType: 'bool',\n                                name: 'isBuffer',\n                                type: 'bool',\n                            },\n                        ],\n                        internalType: 'struct IBatchRouter.SwapPathStep[]',\n                        name: 'steps',\n                        type: 'tuple[]',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'exactAmountIn',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'minAmountOut',\n                        type: 'uint256',\n                    },\n                ],\n                internalType: 'struct IBatchRouter.SwapPathExactAmountIn[]',\n                name: 'paths',\n                type: 'tuple[]',\n            },\n            { internalType: 'address', name: 'sender', type: 'address' },\n            { internalType: 'bytes', name: 'userData', type: 'bytes' },\n        ],\n        name: 'querySwapExactIn',\n        outputs: [\n            {\n                internalType: 'uint256[]',\n                name: 'pathAmountsOut',\n                type: 'uint256[]',\n            },\n            { internalType: 'address[]', name: 'tokensOut', type: 'address[]' },\n            {\n                internalType: 'uint256[]',\n                name: 'amountsOut',\n                type: 'uint256[]',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'address',\n                        name: 'sender',\n                        type: 'address',\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: 'contract IERC20',\n                                name: 'tokenIn',\n                                type: 'address',\n                            },\n                            {\n                                components: [\n                                    {\n                                        internalType: 'address',\n                                        name: 'pool',\n                                        type: 'address',\n                                    },\n                                    {\n                                        internalType: 'contract IERC20',\n                                        name: 'tokenOut',\n                                        type: 'address',\n                                    },\n                                    {\n                                        internalType: 'bool',\n                                        name: 'isBuffer',\n                                        type: 'bool',\n                                    },\n                                ],\n                                internalType:\n                                    'struct IBatchRouter.SwapPathStep[]',\n                                name: 'steps',\n                                type: 'tuple[]',\n                            },\n                            {\n                                internalType: 'uint256',\n                                name: 'exactAmountIn',\n                                type: 'uint256',\n                            },\n                            {\n                                internalType: 'uint256',\n                                name: 'minAmountOut',\n                                type: 'uint256',\n                            },\n                        ],\n                        internalType:\n                            'struct IBatchRouter.SwapPathExactAmountIn[]',\n                        name: 'paths',\n                        type: 'tuple[]',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'deadline',\n                        type: 'uint256',\n                    },\n                    { internalType: 'bool', name: 'wethIsEth', type: 'bool' },\n                    { internalType: 'bytes', name: 'userData', type: 'bytes' },\n                ],\n                internalType: 'struct IBatchRouter.SwapExactInHookParams',\n                name: 'params',\n                type: 'tuple',\n            },\n        ],\n        name: 'querySwapExactInHook',\n        outputs: [\n            {\n                internalType: 'uint256[]',\n                name: 'pathAmountsOut',\n                type: 'uint256[]',\n            },\n            { internalType: 'address[]', name: 'tokensOut', type: 'address[]' },\n            {\n                internalType: 'uint256[]',\n                name: 'amountsOut',\n                type: 'uint256[]',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'contract IERC20',\n                        name: 'tokenIn',\n                        type: 'address',\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: 'address',\n                                name: 'pool',\n                                type: 'address',\n                            },\n                            {\n                                internalType: 'contract IERC20',\n                                name: 'tokenOut',\n                                type: 'address',\n                            },\n                            {\n                                internalType: 'bool',\n                                name: 'isBuffer',\n                                type: 'bool',\n                            },\n                        ],\n                        internalType: 'struct IBatchRouter.SwapPathStep[]',\n                        name: 'steps',\n                        type: 'tuple[]',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'maxAmountIn',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'exactAmountOut',\n                        type: 'uint256',\n                    },\n                ],\n                internalType: 'struct IBatchRouter.SwapPathExactAmountOut[]',\n                name: 'paths',\n                type: 'tuple[]',\n            },\n            { internalType: 'address', name: 'sender', type: 'address' },\n            { internalType: 'bytes', name: 'userData', type: 'bytes' },\n        ],\n        name: 'querySwapExactOut',\n        outputs: [\n            {\n                internalType: 'uint256[]',\n                name: 'pathAmountsIn',\n                type: 'uint256[]',\n            },\n            { internalType: 'address[]', name: 'tokensIn', type: 'address[]' },\n            { internalType: 'uint256[]', name: 'amountsIn', type: 'uint256[]' },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'address',\n                        name: 'sender',\n                        type: 'address',\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: 'contract IERC20',\n                                name: 'tokenIn',\n                                type: 'address',\n                            },\n                            {\n                                components: [\n                                    {\n                                        internalType: 'address',\n                                        name: 'pool',\n                                        type: 'address',\n                                    },\n                                    {\n                                        internalType: 'contract IERC20',\n                                        name: 'tokenOut',\n                                        type: 'address',\n                                    },\n                                    {\n                                        internalType: 'bool',\n                                        name: 'isBuffer',\n                                        type: 'bool',\n                                    },\n                                ],\n                                internalType:\n                                    'struct IBatchRouter.SwapPathStep[]',\n                                name: 'steps',\n                                type: 'tuple[]',\n                            },\n                            {\n                                internalType: 'uint256',\n                                name: 'maxAmountIn',\n                                type: 'uint256',\n                            },\n                            {\n                                internalType: 'uint256',\n                                name: 'exactAmountOut',\n                                type: 'uint256',\n                            },\n                        ],\n                        internalType:\n                            'struct IBatchRouter.SwapPathExactAmountOut[]',\n                        name: 'paths',\n                        type: 'tuple[]',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'deadline',\n                        type: 'uint256',\n                    },\n                    { internalType: 'bool', name: 'wethIsEth', type: 'bool' },\n                    { internalType: 'bytes', name: 'userData', type: 'bytes' },\n                ],\n                internalType: 'struct IBatchRouter.SwapExactOutHookParams',\n                name: 'params',\n                type: 'tuple',\n            },\n        ],\n        name: 'querySwapExactOutHook',\n        outputs: [\n            {\n                internalType: 'uint256[]',\n                name: 'pathAmountsIn',\n                type: 'uint256[]',\n            },\n            { internalType: 'address[]', name: 'tokensIn', type: 'address[]' },\n            { internalType: 'uint256[]', name: 'amountsIn', type: 'uint256[]' },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'contract IERC20',\n                        name: 'tokenIn',\n                        type: 'address',\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: 'address',\n                                name: 'pool',\n                                type: 'address',\n                            },\n                            {\n                                internalType: 'contract IERC20',\n                                name: 'tokenOut',\n                                type: 'address',\n                            },\n                            {\n                                internalType: 'bool',\n                                name: 'isBuffer',\n                                type: 'bool',\n                            },\n                        ],\n                        internalType: 'struct IBatchRouter.SwapPathStep[]',\n                        name: 'steps',\n                        type: 'tuple[]',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'exactAmountIn',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'minAmountOut',\n                        type: 'uint256',\n                    },\n                ],\n                internalType: 'struct IBatchRouter.SwapPathExactAmountIn[]',\n                name: 'paths',\n                type: 'tuple[]',\n            },\n            { internalType: 'uint256', name: 'deadline', type: 'uint256' },\n            { internalType: 'bool', name: 'wethIsEth', type: 'bool' },\n            { internalType: 'bytes', name: 'userData', type: 'bytes' },\n        ],\n        name: 'swapExactIn',\n        outputs: [\n            {\n                internalType: 'uint256[]',\n                name: 'pathAmountsOut',\n                type: 'uint256[]',\n            },\n            { internalType: 'address[]', name: 'tokensOut', type: 'address[]' },\n            {\n                internalType: 'uint256[]',\n                name: 'amountsOut',\n                type: 'uint256[]',\n            },\n        ],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'address',\n                        name: 'sender',\n                        type: 'address',\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: 'contract IERC20',\n                                name: 'tokenIn',\n                                type: 'address',\n                            },\n                            {\n                                components: [\n                                    {\n                                        internalType: 'address',\n                                        name: 'pool',\n                                        type: 'address',\n                                    },\n                                    {\n                                        internalType: 'contract IERC20',\n                                        name: 'tokenOut',\n                                        type: 'address',\n                                    },\n                                    {\n                                        internalType: 'bool',\n                                        name: 'isBuffer',\n                                        type: 'bool',\n                                    },\n                                ],\n                                internalType:\n                                    'struct IBatchRouter.SwapPathStep[]',\n                                name: 'steps',\n                                type: 'tuple[]',\n                            },\n                            {\n                                internalType: 'uint256',\n                                name: 'exactAmountIn',\n                                type: 'uint256',\n                            },\n                            {\n                                internalType: 'uint256',\n                                name: 'minAmountOut',\n                                type: 'uint256',\n                            },\n                        ],\n                        internalType:\n                            'struct IBatchRouter.SwapPathExactAmountIn[]',\n                        name: 'paths',\n                        type: 'tuple[]',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'deadline',\n                        type: 'uint256',\n                    },\n                    { internalType: 'bool', name: 'wethIsEth', type: 'bool' },\n                    { internalType: 'bytes', name: 'userData', type: 'bytes' },\n                ],\n                internalType: 'struct IBatchRouter.SwapExactInHookParams',\n                name: 'params',\n                type: 'tuple',\n            },\n        ],\n        name: 'swapExactInHook',\n        outputs: [\n            {\n                internalType: 'uint256[]',\n                name: 'pathAmountsOut',\n                type: 'uint256[]',\n            },\n            { internalType: 'address[]', name: 'tokensOut', type: 'address[]' },\n            {\n                internalType: 'uint256[]',\n                name: 'amountsOut',\n                type: 'uint256[]',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'contract IERC20',\n                        name: 'tokenIn',\n                        type: 'address',\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: 'address',\n                                name: 'pool',\n                                type: 'address',\n                            },\n                            {\n                                internalType: 'contract IERC20',\n                                name: 'tokenOut',\n                                type: 'address',\n                            },\n                            {\n                                internalType: 'bool',\n                                name: 'isBuffer',\n                                type: 'bool',\n                            },\n                        ],\n                        internalType: 'struct IBatchRouter.SwapPathStep[]',\n                        name: 'steps',\n                        type: 'tuple[]',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'maxAmountIn',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'exactAmountOut',\n                        type: 'uint256',\n                    },\n                ],\n                internalType: 'struct IBatchRouter.SwapPathExactAmountOut[]',\n                name: 'paths',\n                type: 'tuple[]',\n            },\n            { internalType: 'uint256', name: 'deadline', type: 'uint256' },\n            { internalType: 'bool', name: 'wethIsEth', type: 'bool' },\n            { internalType: 'bytes', name: 'userData', type: 'bytes' },\n        ],\n        name: 'swapExactOut',\n        outputs: [\n            {\n                internalType: 'uint256[]',\n                name: 'pathAmountsIn',\n                type: 'uint256[]',\n            },\n            { internalType: 'address[]', name: 'tokensIn', type: 'address[]' },\n            { internalType: 'uint256[]', name: 'amountsIn', type: 'uint256[]' },\n        ],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'address',\n                        name: 'sender',\n                        type: 'address',\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: 'contract IERC20',\n                                name: 'tokenIn',\n                                type: 'address',\n                            },\n                            {\n                                components: [\n                                    {\n                                        internalType: 'address',\n                                        name: 'pool',\n                                        type: 'address',\n                                    },\n                                    {\n                                        internalType: 'contract IERC20',\n                                        name: 'tokenOut',\n                                        type: 'address',\n                                    },\n                                    {\n                                        internalType: 'bool',\n                                        name: 'isBuffer',\n                                        type: 'bool',\n                                    },\n                                ],\n                                internalType:\n                                    'struct IBatchRouter.SwapPathStep[]',\n                                name: 'steps',\n                                type: 'tuple[]',\n                            },\n                            {\n                                internalType: 'uint256',\n                                name: 'maxAmountIn',\n                                type: 'uint256',\n                            },\n                            {\n                                internalType: 'uint256',\n                                name: 'exactAmountOut',\n                                type: 'uint256',\n                            },\n                        ],\n                        internalType:\n                            'struct IBatchRouter.SwapPathExactAmountOut[]',\n                        name: 'paths',\n                        type: 'tuple[]',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'deadline',\n                        type: 'uint256',\n                    },\n                    { internalType: 'bool', name: 'wethIsEth', type: 'bool' },\n                    { internalType: 'bytes', name: 'userData', type: 'bytes' },\n                ],\n                internalType: 'struct IBatchRouter.SwapExactOutHookParams',\n                name: 'params',\n                type: 'tuple',\n            },\n        ],\n        name: 'swapExactOutHook',\n        outputs: [\n            {\n                internalType: 'uint256[]',\n                name: 'pathAmountsIn',\n                type: 'uint256[]',\n            },\n            { internalType: 'address[]', name: 'tokensIn', type: 'address[]' },\n            { internalType: 'uint256[]', name: 'amountsIn', type: 'uint256[]' },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'version',\n        outputs: [{ internalType: 'string', name: '', type: 'string' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    { stateMutability: 'payable', type: 'receive' },\n] as const;\n","export const balancerBufferRouterAbi = [\n    {\n        inputs: [\n            { internalType: 'contract IVault', name: 'vault', type: 'address' },\n            { internalType: 'contract IWETH', name: 'weth', type: 'address' },\n            {\n                internalType: 'contract IPermit2',\n                name: 'permit2',\n                type: 'address',\n            },\n            { internalType: 'string', name: 'routerVersion', type: 'string' },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'constructor',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'target', type: 'address' }],\n        name: 'AddressEmptyCode',\n        type: 'error',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'account', type: 'address' }],\n        name: 'AddressInsufficientBalance',\n        type: 'error',\n    },\n    { inputs: [], name: 'ErrorSelectorNotFound', type: 'error' },\n    { inputs: [], name: 'EthTransfer', type: 'error' },\n    { inputs: [], name: 'FailedInnerCall', type: 'error' },\n    { inputs: [], name: 'InputLengthMismatch', type: 'error' },\n    { inputs: [], name: 'InsufficientEth', type: 'error' },\n    { inputs: [], name: 'ReentrancyGuardReentrantCall', type: 'error' },\n    {\n        inputs: [\n            { internalType: 'uint8', name: 'bits', type: 'uint8' },\n            { internalType: 'uint256', name: 'value', type: 'uint256' },\n        ],\n        name: 'SafeCastOverflowedUintDowncast',\n        type: 'error',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'token', type: 'address' }],\n        name: 'SafeERC20FailedOperation',\n        type: 'error',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'sender', type: 'address' }],\n        name: 'SenderIsNotVault',\n        type: 'error',\n    },\n    { inputs: [], name: 'SwapDeadline', type: 'error' },\n    {\n        inputs: [\n            {\n                internalType: 'contract IERC4626',\n                name: 'wrappedToken',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'maxAmountUnderlyingIn',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'maxAmountWrappedIn',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'exactSharesToIssue',\n                type: 'uint256',\n            },\n        ],\n        name: 'addLiquidityToBuffer',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountUnderlyingIn',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountWrappedIn',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IERC4626',\n                name: 'wrappedToken',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'maxAmountUnderlyingIn',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'maxAmountWrappedIn',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'exactSharesToIssue',\n                type: 'uint256',\n            },\n            { internalType: 'address', name: 'sharesOwner', type: 'address' },\n        ],\n        name: 'addLiquidityToBufferHook',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountUnderlyingIn',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountWrappedIn',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getSender',\n        outputs: [{ internalType: 'address', name: '', type: 'address' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IERC4626',\n                name: 'wrappedToken',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'exactAmountUnderlyingIn',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'exactAmountWrappedIn',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'minIssuedShares',\n                type: 'uint256',\n            },\n        ],\n        name: 'initializeBuffer',\n        outputs: [\n            { internalType: 'uint256', name: 'issuedShares', type: 'uint256' },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IERC4626',\n                name: 'wrappedToken',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'exactAmountUnderlyingIn',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'exactAmountWrappedIn',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'minIssuedShares',\n                type: 'uint256',\n            },\n            { internalType: 'address', name: 'sharesOwner', type: 'address' },\n        ],\n        name: 'initializeBufferHook',\n        outputs: [\n            { internalType: 'uint256', name: 'issuedShares', type: 'uint256' },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [{ internalType: 'bytes[]', name: 'data', type: 'bytes[]' }],\n        name: 'multicall',\n        outputs: [\n            { internalType: 'bytes[]', name: 'results', type: 'bytes[]' },\n        ],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    { internalType: 'address', name: 'token', type: 'address' },\n                    { internalType: 'address', name: 'owner', type: 'address' },\n                    {\n                        internalType: 'address',\n                        name: 'spender',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'amount',\n                        type: 'uint256',\n                    },\n                    { internalType: 'uint256', name: 'nonce', type: 'uint256' },\n                    {\n                        internalType: 'uint256',\n                        name: 'deadline',\n                        type: 'uint256',\n                    },\n                ],\n                internalType: 'struct IRouterCommon.PermitApproval[]',\n                name: 'permitBatch',\n                type: 'tuple[]',\n            },\n            {\n                internalType: 'bytes[]',\n                name: 'permitSignatures',\n                type: 'bytes[]',\n            },\n            {\n                components: [\n                    {\n                        components: [\n                            {\n                                internalType: 'address',\n                                name: 'token',\n                                type: 'address',\n                            },\n                            {\n                                internalType: 'uint160',\n                                name: 'amount',\n                                type: 'uint160',\n                            },\n                            {\n                                internalType: 'uint48',\n                                name: 'expiration',\n                                type: 'uint48',\n                            },\n                            {\n                                internalType: 'uint48',\n                                name: 'nonce',\n                                type: 'uint48',\n                            },\n                        ],\n                        internalType:\n                            'struct IAllowanceTransfer.PermitDetails[]',\n                        name: 'details',\n                        type: 'tuple[]',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'spender',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'sigDeadline',\n                        type: 'uint256',\n                    },\n                ],\n                internalType: 'struct IAllowanceTransfer.PermitBatch',\n                name: 'permit2Batch',\n                type: 'tuple',\n            },\n            { internalType: 'bytes', name: 'permit2Signature', type: 'bytes' },\n            { internalType: 'bytes[]', name: 'multicallData', type: 'bytes[]' },\n        ],\n        name: 'permitBatchAndCall',\n        outputs: [\n            { internalType: 'bytes[]', name: 'results', type: 'bytes[]' },\n        ],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IERC4626',\n                name: 'wrappedToken',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'exactSharesToIssue',\n                type: 'uint256',\n            },\n        ],\n        name: 'queryAddLiquidityToBuffer',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountUnderlyingIn',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountWrappedIn',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IERC4626',\n                name: 'wrappedToken',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'exactSharesToIssue',\n                type: 'uint256',\n            },\n        ],\n        name: 'queryAddLiquidityToBufferHook',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountUnderlyingIn',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountWrappedIn',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IERC4626',\n                name: 'wrappedToken',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'exactAmountUnderlyingIn',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'exactAmountWrappedIn',\n                type: 'uint256',\n            },\n        ],\n        name: 'queryInitializeBuffer',\n        outputs: [\n            { internalType: 'uint256', name: 'issuedShares', type: 'uint256' },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IERC4626',\n                name: 'wrappedToken',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'exactAmountUnderlyingIn',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'exactAmountWrappedIn',\n                type: 'uint256',\n            },\n        ],\n        name: 'queryInitializeBufferHook',\n        outputs: [\n            { internalType: 'uint256', name: 'issuedShares', type: 'uint256' },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IERC4626',\n                name: 'wrappedToken',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'exactSharesToRemove',\n                type: 'uint256',\n            },\n        ],\n        name: 'queryRemoveLiquidityFromBuffer',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'removedUnderlyingBalanceOut',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'removedWrappedBalanceOut',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IERC4626',\n                name: 'wrappedToken',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'exactSharesToRemove',\n                type: 'uint256',\n            },\n        ],\n        name: 'queryRemoveLiquidityFromBufferHook',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'removedUnderlyingBalanceOut',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'removedWrappedBalanceOut',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'version',\n        outputs: [{ internalType: 'string', name: '', type: 'string' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    { stateMutability: 'payable', type: 'receive' },\n] as const;\n","export const balancerQueriesAbi = [\n    {\n        inputs: [\n            {\n                internalType: 'contract IVault',\n                name: '_vault',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'constructor',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'enum IVault.SwapKind',\n                name: 'kind',\n                type: 'uint8',\n            },\n            {\n                components: [\n                    {\n                        internalType: 'bytes32',\n                        name: 'poolId',\n                        type: 'bytes32',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'assetInIndex',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'assetOutIndex',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'amount',\n                        type: 'uint256',\n                    },\n                    { internalType: 'bytes', name: 'userData', type: 'bytes' },\n                ],\n                internalType: 'struct IVault.BatchSwapStep[]',\n                name: 'swaps',\n                type: 'tuple[]',\n            },\n            {\n                internalType: 'contract IAsset[]',\n                name: 'assets',\n                type: 'address[]',\n            },\n            {\n                components: [\n                    {\n                        internalType: 'address',\n                        name: 'sender',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'fromInternalBalance',\n                        type: 'bool',\n                    },\n                    {\n                        internalType: 'address payable',\n                        name: 'recipient',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'toInternalBalance',\n                        type: 'bool',\n                    },\n                ],\n                internalType: 'struct IVault.FundManagement',\n                name: 'funds',\n                type: 'tuple',\n            },\n        ],\n        name: 'queryBatchSwap',\n        outputs: [\n            { internalType: 'int256[]', name: 'assetDeltas', type: 'int256[]' },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'bytes32', name: 'poolId', type: 'bytes32' },\n            { internalType: 'address', name: 'sender', type: 'address' },\n            { internalType: 'address', name: 'recipient', type: 'address' },\n            {\n                components: [\n                    {\n                        internalType: 'contract IAsset[]',\n                        name: 'assets',\n                        type: 'address[]',\n                    },\n                    {\n                        internalType: 'uint256[]',\n                        name: 'minAmountsOut',\n                        type: 'uint256[]',\n                    },\n                    { internalType: 'bytes', name: 'userData', type: 'bytes' },\n                    {\n                        internalType: 'bool',\n                        name: 'toInternalBalance',\n                        type: 'bool',\n                    },\n                ],\n                internalType: 'struct IVault.ExitPoolRequest',\n                name: 'request',\n                type: 'tuple',\n            },\n        ],\n        name: 'queryExit',\n        outputs: [\n            { internalType: 'uint256', name: 'bptIn', type: 'uint256' },\n            {\n                internalType: 'uint256[]',\n                name: 'amountsOut',\n                type: 'uint256[]',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'bytes32', name: 'poolId', type: 'bytes32' },\n            { internalType: 'address', name: 'sender', type: 'address' },\n            { internalType: 'address', name: 'recipient', type: 'address' },\n            {\n                components: [\n                    {\n                        internalType: 'contract IAsset[]',\n                        name: 'assets',\n                        type: 'address[]',\n                    },\n                    {\n                        internalType: 'uint256[]',\n                        name: 'maxAmountsIn',\n                        type: 'uint256[]',\n                    },\n                    { internalType: 'bytes', name: 'userData', type: 'bytes' },\n                    {\n                        internalType: 'bool',\n                        name: 'fromInternalBalance',\n                        type: 'bool',\n                    },\n                ],\n                internalType: 'struct IVault.JoinPoolRequest',\n                name: 'request',\n                type: 'tuple',\n            },\n        ],\n        name: 'queryJoin',\n        outputs: [\n            { internalType: 'uint256', name: 'bptOut', type: 'uint256' },\n            { internalType: 'uint256[]', name: 'amountsIn', type: 'uint256[]' },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'bytes32',\n                        name: 'poolId',\n                        type: 'bytes32',\n                    },\n                    {\n                        internalType: 'enum IVault.SwapKind',\n                        name: 'kind',\n                        type: 'uint8',\n                    },\n                    {\n                        internalType: 'contract IAsset',\n                        name: 'assetIn',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'contract IAsset',\n                        name: 'assetOut',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'amount',\n                        type: 'uint256',\n                    },\n                    { internalType: 'bytes', name: 'userData', type: 'bytes' },\n                ],\n                internalType: 'struct IVault.SingleSwap',\n                name: 'singleSwap',\n                type: 'tuple',\n            },\n            {\n                components: [\n                    {\n                        internalType: 'address',\n                        name: 'sender',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'fromInternalBalance',\n                        type: 'bool',\n                    },\n                    {\n                        internalType: 'address payable',\n                        name: 'recipient',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'toInternalBalance',\n                        type: 'bool',\n                    },\n                ],\n                internalType: 'struct IVault.FundManagement',\n                name: 'funds',\n                type: 'tuple',\n            },\n        ],\n        name: 'querySwap',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'vault',\n        outputs: [\n            { internalType: 'contract IVault', name: '', type: 'address' },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n] as const;\n","export const balancerRelayerAbi = [\n    {\n        inputs: [\n            {\n                internalType: 'contract IVault',\n                name: 'vault',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'libraryAddress',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'queryLibrary',\n                type: 'address',\n            },\n            {\n                internalType: 'string',\n                name: 'version',\n                type: 'string',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'constructor',\n    },\n    {\n        inputs: [],\n        name: 'getLibrary',\n        outputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getQueryLibrary',\n        outputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getVault',\n        outputs: [\n            {\n                internalType: 'contract IVault',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'bytes[]',\n                name: 'data',\n                type: 'bytes[]',\n            },\n        ],\n        name: 'multicall',\n        outputs: [\n            {\n                internalType: 'bytes[]',\n                name: 'results',\n                type: 'bytes[]',\n            },\n        ],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'bytes[]',\n                name: 'data',\n                type: 'bytes[]',\n            },\n        ],\n        name: 'vaultActionsQueryMulticall',\n        outputs: [\n            {\n                internalType: 'bytes[]',\n                name: 'results',\n                type: 'bytes[]',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'version',\n        outputs: [\n            {\n                internalType: 'string',\n                name: '',\n                type: 'string',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        stateMutability: 'payable',\n        type: 'receive',\n    },\n] as const;\n","export const balancerRouterAbi = [\n    {\n        inputs: [\n            { internalType: 'contract IVault', name: 'vault', type: 'address' },\n            { internalType: 'contract IWETH', name: 'weth', type: 'address' },\n            {\n                internalType: 'contract IPermit2',\n                name: 'permit2',\n                type: 'address',\n            },\n            { internalType: 'string', name: 'routerVersion', type: 'string' },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'constructor',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'target', type: 'address' }],\n        name: 'AddressEmptyCode',\n        type: 'error',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'account', type: 'address' }],\n        name: 'AddressInsufficientBalance',\n        type: 'error',\n    },\n    { inputs: [], name: 'ErrorSelectorNotFound', type: 'error' },\n    { inputs: [], name: 'EthTransfer', type: 'error' },\n    { inputs: [], name: 'FailedInnerCall', type: 'error' },\n    { inputs: [], name: 'InputLengthMismatch', type: 'error' },\n    { inputs: [], name: 'InsufficientEth', type: 'error' },\n    { inputs: [], name: 'ReentrancyGuardReentrantCall', type: 'error' },\n    {\n        inputs: [\n            { internalType: 'uint8', name: 'bits', type: 'uint8' },\n            { internalType: 'uint256', name: 'value', type: 'uint256' },\n        ],\n        name: 'SafeCastOverflowedUintDowncast',\n        type: 'error',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'token', type: 'address' }],\n        name: 'SafeERC20FailedOperation',\n        type: 'error',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'sender', type: 'address' }],\n        name: 'SenderIsNotVault',\n        type: 'error',\n    },\n    { inputs: [], name: 'SwapDeadline', type: 'error' },\n    {\n        inputs: [\n            { internalType: 'address', name: 'pool', type: 'address' },\n            {\n                internalType: 'uint256[]',\n                name: 'maxAmountsIn',\n                type: 'uint256[]',\n            },\n            {\n                internalType: 'uint256',\n                name: 'minBptAmountOut',\n                type: 'uint256',\n            },\n            { internalType: 'bool', name: 'wethIsEth', type: 'bool' },\n            { internalType: 'bytes', name: 'userData', type: 'bytes' },\n        ],\n        name: 'addLiquidityCustom',\n        outputs: [\n            { internalType: 'uint256[]', name: 'amountsIn', type: 'uint256[]' },\n            { internalType: 'uint256', name: 'bptAmountOut', type: 'uint256' },\n            { internalType: 'bytes', name: 'returnData', type: 'bytes' },\n        ],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'address',\n                        name: 'sender',\n                        type: 'address',\n                    },\n                    { internalType: 'address', name: 'pool', type: 'address' },\n                    {\n                        internalType: 'uint256[]',\n                        name: 'maxAmountsIn',\n                        type: 'uint256[]',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'minBptAmountOut',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'enum AddLiquidityKind',\n                        name: 'kind',\n                        type: 'uint8',\n                    },\n                    { internalType: 'bool', name: 'wethIsEth', type: 'bool' },\n                    { internalType: 'bytes', name: 'userData', type: 'bytes' },\n                ],\n                internalType: 'struct IRouterCommon.AddLiquidityHookParams',\n                name: 'params',\n                type: 'tuple',\n            },\n        ],\n        name: 'addLiquidityHook',\n        outputs: [\n            { internalType: 'uint256[]', name: 'amountsIn', type: 'uint256[]' },\n            { internalType: 'uint256', name: 'bptAmountOut', type: 'uint256' },\n            { internalType: 'bytes', name: 'returnData', type: 'bytes' },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'pool', type: 'address' },\n            {\n                internalType: 'uint256[]',\n                name: 'maxAmountsIn',\n                type: 'uint256[]',\n            },\n            {\n                internalType: 'uint256',\n                name: 'exactBptAmountOut',\n                type: 'uint256',\n            },\n            { internalType: 'bool', name: 'wethIsEth', type: 'bool' },\n            { internalType: 'bytes', name: 'userData', type: 'bytes' },\n        ],\n        name: 'addLiquidityProportional',\n        outputs: [\n            { internalType: 'uint256[]', name: 'amountsIn', type: 'uint256[]' },\n        ],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'pool', type: 'address' },\n            {\n                internalType: 'contract IERC20',\n                name: 'tokenIn',\n                type: 'address',\n            },\n            { internalType: 'uint256', name: 'maxAmountIn', type: 'uint256' },\n            {\n                internalType: 'uint256',\n                name: 'exactBptAmountOut',\n                type: 'uint256',\n            },\n            { internalType: 'bool', name: 'wethIsEth', type: 'bool' },\n            { internalType: 'bytes', name: 'userData', type: 'bytes' },\n        ],\n        name: 'addLiquiditySingleTokenExactOut',\n        outputs: [\n            { internalType: 'uint256', name: 'amountIn', type: 'uint256' },\n        ],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'pool', type: 'address' },\n            {\n                internalType: 'uint256[]',\n                name: 'exactAmountsIn',\n                type: 'uint256[]',\n            },\n            {\n                internalType: 'uint256',\n                name: 'minBptAmountOut',\n                type: 'uint256',\n            },\n            { internalType: 'bool', name: 'wethIsEth', type: 'bool' },\n            { internalType: 'bytes', name: 'userData', type: 'bytes' },\n        ],\n        name: 'addLiquidityUnbalanced',\n        outputs: [\n            { internalType: 'uint256', name: 'bptAmountOut', type: 'uint256' },\n        ],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'pool', type: 'address' },\n            { internalType: 'uint256[]', name: 'amountsIn', type: 'uint256[]' },\n            { internalType: 'bool', name: 'wethIsEth', type: 'bool' },\n            { internalType: 'bytes', name: 'userData', type: 'bytes' },\n        ],\n        name: 'donate',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getSender',\n        outputs: [{ internalType: 'address', name: '', type: 'address' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'pool', type: 'address' },\n            {\n                internalType: 'contract IERC20[]',\n                name: 'tokens',\n                type: 'address[]',\n            },\n            {\n                internalType: 'uint256[]',\n                name: 'exactAmountsIn',\n                type: 'uint256[]',\n            },\n            {\n                internalType: 'uint256',\n                name: 'minBptAmountOut',\n                type: 'uint256',\n            },\n            { internalType: 'bool', name: 'wethIsEth', type: 'bool' },\n            { internalType: 'bytes', name: 'userData', type: 'bytes' },\n        ],\n        name: 'initialize',\n        outputs: [\n            { internalType: 'uint256', name: 'bptAmountOut', type: 'uint256' },\n        ],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'address',\n                        name: 'sender',\n                        type: 'address',\n                    },\n                    { internalType: 'address', name: 'pool', type: 'address' },\n                    {\n                        internalType: 'contract IERC20[]',\n                        name: 'tokens',\n                        type: 'address[]',\n                    },\n                    {\n                        internalType: 'uint256[]',\n                        name: 'exactAmountsIn',\n                        type: 'uint256[]',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'minBptAmountOut',\n                        type: 'uint256',\n                    },\n                    { internalType: 'bool', name: 'wethIsEth', type: 'bool' },\n                    { internalType: 'bytes', name: 'userData', type: 'bytes' },\n                ],\n                internalType: 'struct IRouter.InitializeHookParams',\n                name: 'params',\n                type: 'tuple',\n            },\n        ],\n        name: 'initializeHook',\n        outputs: [\n            { internalType: 'uint256', name: 'bptAmountOut', type: 'uint256' },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [{ internalType: 'bytes[]', name: 'data', type: 'bytes[]' }],\n        name: 'multicall',\n        outputs: [\n            { internalType: 'bytes[]', name: 'results', type: 'bytes[]' },\n        ],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    { internalType: 'address', name: 'token', type: 'address' },\n                    { internalType: 'address', name: 'owner', type: 'address' },\n                    {\n                        internalType: 'address',\n                        name: 'spender',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'amount',\n                        type: 'uint256',\n                    },\n                    { internalType: 'uint256', name: 'nonce', type: 'uint256' },\n                    {\n                        internalType: 'uint256',\n                        name: 'deadline',\n                        type: 'uint256',\n                    },\n                ],\n                internalType: 'struct IRouterCommon.PermitApproval[]',\n                name: 'permitBatch',\n                type: 'tuple[]',\n            },\n            {\n                internalType: 'bytes[]',\n                name: 'permitSignatures',\n                type: 'bytes[]',\n            },\n            {\n                components: [\n                    {\n                        components: [\n                            {\n                                internalType: 'address',\n                                name: 'token',\n                                type: 'address',\n                            },\n                            {\n                                internalType: 'uint160',\n                                name: 'amount',\n                                type: 'uint160',\n                            },\n                            {\n                                internalType: 'uint48',\n                                name: 'expiration',\n                                type: 'uint48',\n                            },\n                            {\n                                internalType: 'uint48',\n                                name: 'nonce',\n                                type: 'uint48',\n                            },\n                        ],\n                        internalType:\n                            'struct IAllowanceTransfer.PermitDetails[]',\n                        name: 'details',\n                        type: 'tuple[]',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'spender',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'sigDeadline',\n                        type: 'uint256',\n                    },\n                ],\n                internalType: 'struct IAllowanceTransfer.PermitBatch',\n                name: 'permit2Batch',\n                type: 'tuple',\n            },\n            { internalType: 'bytes', name: 'permit2Signature', type: 'bytes' },\n            { internalType: 'bytes[]', name: 'multicallData', type: 'bytes[]' },\n        ],\n        name: 'permitBatchAndCall',\n        outputs: [\n            { internalType: 'bytes[]', name: 'results', type: 'bytes[]' },\n        ],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'pool', type: 'address' },\n            {\n                internalType: 'uint256[]',\n                name: 'maxAmountsIn',\n                type: 'uint256[]',\n            },\n            {\n                internalType: 'uint256',\n                name: 'minBptAmountOut',\n                type: 'uint256',\n            },\n            { internalType: 'address', name: 'sender', type: 'address' },\n            { internalType: 'bytes', name: 'userData', type: 'bytes' },\n        ],\n        name: 'queryAddLiquidityCustom',\n        outputs: [\n            { internalType: 'uint256[]', name: 'amountsIn', type: 'uint256[]' },\n            { internalType: 'uint256', name: 'bptAmountOut', type: 'uint256' },\n            { internalType: 'bytes', name: 'returnData', type: 'bytes' },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'address',\n                        name: 'sender',\n                        type: 'address',\n                    },\n                    { internalType: 'address', name: 'pool', type: 'address' },\n                    {\n                        internalType: 'uint256[]',\n                        name: 'maxAmountsIn',\n                        type: 'uint256[]',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'minBptAmountOut',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'enum AddLiquidityKind',\n                        name: 'kind',\n                        type: 'uint8',\n                    },\n                    { internalType: 'bool', name: 'wethIsEth', type: 'bool' },\n                    { internalType: 'bytes', name: 'userData', type: 'bytes' },\n                ],\n                internalType: 'struct IRouterCommon.AddLiquidityHookParams',\n                name: 'params',\n                type: 'tuple',\n            },\n        ],\n        name: 'queryAddLiquidityHook',\n        outputs: [\n            { internalType: 'uint256[]', name: 'amountsIn', type: 'uint256[]' },\n            { internalType: 'uint256', name: 'bptAmountOut', type: 'uint256' },\n            { internalType: 'bytes', name: 'returnData', type: 'bytes' },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'pool', type: 'address' },\n            {\n                internalType: 'uint256',\n                name: 'exactBptAmountOut',\n                type: 'uint256',\n            },\n            { internalType: 'address', name: 'sender', type: 'address' },\n            { internalType: 'bytes', name: 'userData', type: 'bytes' },\n        ],\n        name: 'queryAddLiquidityProportional',\n        outputs: [\n            { internalType: 'uint256[]', name: 'amountsIn', type: 'uint256[]' },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'pool', type: 'address' },\n            {\n                internalType: 'contract IERC20',\n                name: 'tokenIn',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'exactBptAmountOut',\n                type: 'uint256',\n            },\n            { internalType: 'address', name: 'sender', type: 'address' },\n            { internalType: 'bytes', name: 'userData', type: 'bytes' },\n        ],\n        name: 'queryAddLiquiditySingleTokenExactOut',\n        outputs: [\n            { internalType: 'uint256', name: 'amountIn', type: 'uint256' },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'pool', type: 'address' },\n            {\n                internalType: 'uint256[]',\n                name: 'exactAmountsIn',\n                type: 'uint256[]',\n            },\n            { internalType: 'address', name: 'sender', type: 'address' },\n            { internalType: 'bytes', name: 'userData', type: 'bytes' },\n        ],\n        name: 'queryAddLiquidityUnbalanced',\n        outputs: [\n            { internalType: 'uint256', name: 'bptAmountOut', type: 'uint256' },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'pool', type: 'address' },\n            {\n                internalType: 'uint256',\n                name: 'maxBptAmountIn',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256[]',\n                name: 'minAmountsOut',\n                type: 'uint256[]',\n            },\n            { internalType: 'address', name: 'sender', type: 'address' },\n            { internalType: 'bytes', name: 'userData', type: 'bytes' },\n        ],\n        name: 'queryRemoveLiquidityCustom',\n        outputs: [\n            { internalType: 'uint256', name: 'bptAmountIn', type: 'uint256' },\n            {\n                internalType: 'uint256[]',\n                name: 'amountsOut',\n                type: 'uint256[]',\n            },\n            { internalType: 'bytes', name: 'returnData', type: 'bytes' },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'address',\n                        name: 'sender',\n                        type: 'address',\n                    },\n                    { internalType: 'address', name: 'pool', type: 'address' },\n                    {\n                        internalType: 'uint256[]',\n                        name: 'minAmountsOut',\n                        type: 'uint256[]',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'maxBptAmountIn',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'enum RemoveLiquidityKind',\n                        name: 'kind',\n                        type: 'uint8',\n                    },\n                    { internalType: 'bool', name: 'wethIsEth', type: 'bool' },\n                    { internalType: 'bytes', name: 'userData', type: 'bytes' },\n                ],\n                internalType: 'struct IRouterCommon.RemoveLiquidityHookParams',\n                name: 'params',\n                type: 'tuple',\n            },\n        ],\n        name: 'queryRemoveLiquidityHook',\n        outputs: [\n            { internalType: 'uint256', name: 'bptAmountIn', type: 'uint256' },\n            {\n                internalType: 'uint256[]',\n                name: 'amountsOut',\n                type: 'uint256[]',\n            },\n            { internalType: 'bytes', name: 'returnData', type: 'bytes' },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'pool', type: 'address' },\n            {\n                internalType: 'uint256',\n                name: 'exactBptAmountIn',\n                type: 'uint256',\n            },\n            { internalType: 'address', name: 'sender', type: 'address' },\n            { internalType: 'bytes', name: 'userData', type: 'bytes' },\n        ],\n        name: 'queryRemoveLiquidityProportional',\n        outputs: [\n            {\n                internalType: 'uint256[]',\n                name: 'amountsOut',\n                type: 'uint256[]',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'pool', type: 'address' },\n            {\n                internalType: 'uint256',\n                name: 'exactBptAmountIn',\n                type: 'uint256',\n            },\n        ],\n        name: 'queryRemoveLiquidityRecovery',\n        outputs: [\n            {\n                internalType: 'uint256[]',\n                name: 'amountsOut',\n                type: 'uint256[]',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'pool', type: 'address' },\n            { internalType: 'address', name: 'sender', type: 'address' },\n            {\n                internalType: 'uint256',\n                name: 'exactBptAmountIn',\n                type: 'uint256',\n            },\n        ],\n        name: 'queryRemoveLiquidityRecoveryHook',\n        outputs: [\n            {\n                internalType: 'uint256[]',\n                name: 'amountsOut',\n                type: 'uint256[]',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'pool', type: 'address' },\n            {\n                internalType: 'uint256',\n                name: 'exactBptAmountIn',\n                type: 'uint256',\n            },\n            {\n                internalType: 'contract IERC20',\n                name: 'tokenOut',\n                type: 'address',\n            },\n            { internalType: 'address', name: 'sender', type: 'address' },\n            { internalType: 'bytes', name: 'userData', type: 'bytes' },\n        ],\n        name: 'queryRemoveLiquiditySingleTokenExactIn',\n        outputs: [\n            { internalType: 'uint256', name: 'amountOut', type: 'uint256' },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'pool', type: 'address' },\n            {\n                internalType: 'contract IERC20',\n                name: 'tokenOut',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'exactAmountOut',\n                type: 'uint256',\n            },\n            { internalType: 'address', name: 'sender', type: 'address' },\n            { internalType: 'bytes', name: 'userData', type: 'bytes' },\n        ],\n        name: 'queryRemoveLiquiditySingleTokenExactOut',\n        outputs: [\n            { internalType: 'uint256', name: 'bptAmountIn', type: 'uint256' },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'address',\n                        name: 'sender',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'enum SwapKind',\n                        name: 'kind',\n                        type: 'uint8',\n                    },\n                    { internalType: 'address', name: 'pool', type: 'address' },\n                    {\n                        internalType: 'contract IERC20',\n                        name: 'tokenIn',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'contract IERC20',\n                        name: 'tokenOut',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'amountGiven',\n                        type: 'uint256',\n                    },\n                    { internalType: 'uint256', name: 'limit', type: 'uint256' },\n                    {\n                        internalType: 'uint256',\n                        name: 'deadline',\n                        type: 'uint256',\n                    },\n                    { internalType: 'bool', name: 'wethIsEth', type: 'bool' },\n                    { internalType: 'bytes', name: 'userData', type: 'bytes' },\n                ],\n                internalType: 'struct IRouter.SwapSingleTokenHookParams',\n                name: 'params',\n                type: 'tuple',\n            },\n        ],\n        name: 'querySwapHook',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'pool', type: 'address' },\n            {\n                internalType: 'contract IERC20',\n                name: 'tokenIn',\n                type: 'address',\n            },\n            {\n                internalType: 'contract IERC20',\n                name: 'tokenOut',\n                type: 'address',\n            },\n            { internalType: 'uint256', name: 'exactAmountIn', type: 'uint256' },\n            { internalType: 'address', name: 'sender', type: 'address' },\n            { internalType: 'bytes', name: 'userData', type: 'bytes' },\n        ],\n        name: 'querySwapSingleTokenExactIn',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountCalculated',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'pool', type: 'address' },\n            {\n                internalType: 'contract IERC20',\n                name: 'tokenIn',\n                type: 'address',\n            },\n            {\n                internalType: 'contract IERC20',\n                name: 'tokenOut',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'exactAmountOut',\n                type: 'uint256',\n            },\n            { internalType: 'address', name: 'sender', type: 'address' },\n            { internalType: 'bytes', name: 'userData', type: 'bytes' },\n        ],\n        name: 'querySwapSingleTokenExactOut',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountCalculated',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'pool', type: 'address' },\n            {\n                internalType: 'uint256',\n                name: 'maxBptAmountIn',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256[]',\n                name: 'minAmountsOut',\n                type: 'uint256[]',\n            },\n            { internalType: 'bool', name: 'wethIsEth', type: 'bool' },\n            { internalType: 'bytes', name: 'userData', type: 'bytes' },\n        ],\n        name: 'removeLiquidityCustom',\n        outputs: [\n            { internalType: 'uint256', name: 'bptAmountIn', type: 'uint256' },\n            {\n                internalType: 'uint256[]',\n                name: 'amountsOut',\n                type: 'uint256[]',\n            },\n            { internalType: 'bytes', name: 'returnData', type: 'bytes' },\n        ],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'address',\n                        name: 'sender',\n                        type: 'address',\n                    },\n                    { internalType: 'address', name: 'pool', type: 'address' },\n                    {\n                        internalType: 'uint256[]',\n                        name: 'minAmountsOut',\n                        type: 'uint256[]',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'maxBptAmountIn',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'enum RemoveLiquidityKind',\n                        name: 'kind',\n                        type: 'uint8',\n                    },\n                    { internalType: 'bool', name: 'wethIsEth', type: 'bool' },\n                    { internalType: 'bytes', name: 'userData', type: 'bytes' },\n                ],\n                internalType: 'struct IRouterCommon.RemoveLiquidityHookParams',\n                name: 'params',\n                type: 'tuple',\n            },\n        ],\n        name: 'removeLiquidityHook',\n        outputs: [\n            { internalType: 'uint256', name: 'bptAmountIn', type: 'uint256' },\n            {\n                internalType: 'uint256[]',\n                name: 'amountsOut',\n                type: 'uint256[]',\n            },\n            { internalType: 'bytes', name: 'returnData', type: 'bytes' },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'pool', type: 'address' },\n            {\n                internalType: 'uint256',\n                name: 'exactBptAmountIn',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256[]',\n                name: 'minAmountsOut',\n                type: 'uint256[]',\n            },\n            { internalType: 'bool', name: 'wethIsEth', type: 'bool' },\n            { internalType: 'bytes', name: 'userData', type: 'bytes' },\n        ],\n        name: 'removeLiquidityProportional',\n        outputs: [\n            {\n                internalType: 'uint256[]',\n                name: 'amountsOut',\n                type: 'uint256[]',\n            },\n        ],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'pool', type: 'address' },\n            {\n                internalType: 'uint256',\n                name: 'exactBptAmountIn',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256[]',\n                name: 'minAmountsOut',\n                type: 'uint256[]',\n            },\n        ],\n        name: 'removeLiquidityRecovery',\n        outputs: [\n            {\n                internalType: 'uint256[]',\n                name: 'amountsOut',\n                type: 'uint256[]',\n            },\n        ],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'pool', type: 'address' },\n            { internalType: 'address', name: 'sender', type: 'address' },\n            {\n                internalType: 'uint256',\n                name: 'exactBptAmountIn',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256[]',\n                name: 'minAmountsOut',\n                type: 'uint256[]',\n            },\n        ],\n        name: 'removeLiquidityRecoveryHook',\n        outputs: [\n            {\n                internalType: 'uint256[]',\n                name: 'amountsOut',\n                type: 'uint256[]',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'pool', type: 'address' },\n            {\n                internalType: 'uint256',\n                name: 'exactBptAmountIn',\n                type: 'uint256',\n            },\n            {\n                internalType: 'contract IERC20',\n                name: 'tokenOut',\n                type: 'address',\n            },\n            { internalType: 'uint256', name: 'minAmountOut', type: 'uint256' },\n            { internalType: 'bool', name: 'wethIsEth', type: 'bool' },\n            { internalType: 'bytes', name: 'userData', type: 'bytes' },\n        ],\n        name: 'removeLiquiditySingleTokenExactIn',\n        outputs: [\n            { internalType: 'uint256', name: 'amountOut', type: 'uint256' },\n        ],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'pool', type: 'address' },\n            {\n                internalType: 'uint256',\n                name: 'maxBptAmountIn',\n                type: 'uint256',\n            },\n            {\n                internalType: 'contract IERC20',\n                name: 'tokenOut',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'exactAmountOut',\n                type: 'uint256',\n            },\n            { internalType: 'bool', name: 'wethIsEth', type: 'bool' },\n            { internalType: 'bytes', name: 'userData', type: 'bytes' },\n        ],\n        name: 'removeLiquiditySingleTokenExactOut',\n        outputs: [\n            { internalType: 'uint256', name: 'bptAmountIn', type: 'uint256' },\n        ],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'pool', type: 'address' },\n            {\n                internalType: 'contract IERC20',\n                name: 'tokenIn',\n                type: 'address',\n            },\n            {\n                internalType: 'contract IERC20',\n                name: 'tokenOut',\n                type: 'address',\n            },\n            { internalType: 'uint256', name: 'exactAmountIn', type: 'uint256' },\n            { internalType: 'uint256', name: 'minAmountOut', type: 'uint256' },\n            { internalType: 'uint256', name: 'deadline', type: 'uint256' },\n            { internalType: 'bool', name: 'wethIsEth', type: 'bool' },\n            { internalType: 'bytes', name: 'userData', type: 'bytes' },\n        ],\n        name: 'swapSingleTokenExactIn',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'pool', type: 'address' },\n            {\n                internalType: 'contract IERC20',\n                name: 'tokenIn',\n                type: 'address',\n            },\n            {\n                internalType: 'contract IERC20',\n                name: 'tokenOut',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'exactAmountOut',\n                type: 'uint256',\n            },\n            { internalType: 'uint256', name: 'maxAmountIn', type: 'uint256' },\n            { internalType: 'uint256', name: 'deadline', type: 'uint256' },\n            { internalType: 'bool', name: 'wethIsEth', type: 'bool' },\n            { internalType: 'bytes', name: 'userData', type: 'bytes' },\n        ],\n        name: 'swapSingleTokenExactOut',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'address',\n                        name: 'sender',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'enum SwapKind',\n                        name: 'kind',\n                        type: 'uint8',\n                    },\n                    { internalType: 'address', name: 'pool', type: 'address' },\n                    {\n                        internalType: 'contract IERC20',\n                        name: 'tokenIn',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'contract IERC20',\n                        name: 'tokenOut',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'amountGiven',\n                        type: 'uint256',\n                    },\n                    { internalType: 'uint256', name: 'limit', type: 'uint256' },\n                    {\n                        internalType: 'uint256',\n                        name: 'deadline',\n                        type: 'uint256',\n                    },\n                    { internalType: 'bool', name: 'wethIsEth', type: 'bool' },\n                    { internalType: 'bytes', name: 'userData', type: 'bytes' },\n                ],\n                internalType: 'struct IRouter.SwapSingleTokenHookParams',\n                name: 'params',\n                type: 'tuple',\n            },\n        ],\n        name: 'swapSingleTokenHook',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'version',\n        outputs: [{ internalType: 'string', name: '', type: 'string' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    { stateMutability: 'payable', type: 'receive' },\n] as const;\n","export const batchRelayerLibraryAbi = [\n    {\n        inputs: [\n            { internalType: 'contract IVault', name: 'vault', type: 'address' },\n            {\n                internalType: 'contract IERC20',\n                name: 'wstETH',\n                type: 'address',\n            },\n            {\n                internalType: 'contract IBalancerMinter',\n                name: 'minter',\n                type: 'address',\n            },\n            {\n                internalType: 'bool',\n                name: 'canCallUserCheckpoint',\n                type: 'bool',\n            },\n            { internalType: 'string', name: 'version', type: 'string' },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'constructor',\n    },\n    {\n        inputs: [\n            { internalType: 'contract IERC20', name: 'token', type: 'address' },\n            { internalType: 'uint256', name: 'amount', type: 'uint256' },\n        ],\n        name: 'approveVault',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'enum IVault.SwapKind',\n                name: 'kind',\n                type: 'uint8',\n            },\n            {\n                components: [\n                    {\n                        internalType: 'bytes32',\n                        name: 'poolId',\n                        type: 'bytes32',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'assetInIndex',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'assetOutIndex',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'amount',\n                        type: 'uint256',\n                    },\n                    { internalType: 'bytes', name: 'userData', type: 'bytes' },\n                ],\n                internalType: 'struct IVault.BatchSwapStep[]',\n                name: 'swaps',\n                type: 'tuple[]',\n            },\n            {\n                internalType: 'contract IAsset[]',\n                name: 'assets',\n                type: 'address[]',\n            },\n            {\n                components: [\n                    {\n                        internalType: 'address',\n                        name: 'sender',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'fromInternalBalance',\n                        type: 'bool',\n                    },\n                    {\n                        internalType: 'address payable',\n                        name: 'recipient',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'toInternalBalance',\n                        type: 'bool',\n                    },\n                ],\n                internalType: 'struct IVault.FundManagement',\n                name: 'funds',\n                type: 'tuple',\n            },\n            { internalType: 'int256[]', name: 'limits', type: 'int256[]' },\n            { internalType: 'uint256', name: 'deadline', type: 'uint256' },\n            { internalType: 'uint256', name: 'value', type: 'uint256' },\n            {\n                components: [\n                    { internalType: 'uint256', name: 'index', type: 'uint256' },\n                    { internalType: 'uint256', name: 'key', type: 'uint256' },\n                ],\n                internalType: 'struct VaultActions.OutputReference[]',\n                name: 'outputReferences',\n                type: 'tuple[]',\n            },\n        ],\n        name: 'batchSwap',\n        outputs: [\n            { internalType: 'int256[]', name: 'results', type: 'int256[]' },\n        ],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'canCallUserCheckpoint',\n        outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'bytes32', name: 'poolId', type: 'bytes32' },\n            {\n                internalType: 'enum VaultActions.PoolKind',\n                name: 'kind',\n                type: 'uint8',\n            },\n            { internalType: 'address', name: 'sender', type: 'address' },\n            {\n                internalType: 'address payable',\n                name: 'recipient',\n                type: 'address',\n            },\n            {\n                components: [\n                    {\n                        internalType: 'contract IAsset[]',\n                        name: 'assets',\n                        type: 'address[]',\n                    },\n                    {\n                        internalType: 'uint256[]',\n                        name: 'minAmountsOut',\n                        type: 'uint256[]',\n                    },\n                    { internalType: 'bytes', name: 'userData', type: 'bytes' },\n                    {\n                        internalType: 'bool',\n                        name: 'toInternalBalance',\n                        type: 'bool',\n                    },\n                ],\n                internalType: 'struct IVault.ExitPoolRequest',\n                name: 'request',\n                type: 'tuple',\n            },\n            {\n                components: [\n                    { internalType: 'uint256', name: 'index', type: 'uint256' },\n                    { internalType: 'uint256', name: 'key', type: 'uint256' },\n                ],\n                internalType: 'struct VaultActions.OutputReference[]',\n                name: 'outputReferences',\n                type: 'tuple[]',\n            },\n        ],\n        name: 'exitPool',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'user', type: 'address' },\n            {\n                internalType: 'contract IStakingLiquidityGauge[]',\n                name: 'gauges',\n                type: 'address[]',\n            },\n        ],\n        name: 'gaugeCheckpoint',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IStakingLiquidityGauge[]',\n                name: 'gauges',\n                type: 'address[]',\n            },\n        ],\n        name: 'gaugeClaimRewards',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IStakingLiquidityGauge',\n                name: 'gauge',\n                type: 'address',\n            },\n            { internalType: 'address', name: 'sender', type: 'address' },\n            { internalType: 'address', name: 'recipient', type: 'address' },\n            { internalType: 'uint256', name: 'amount', type: 'uint256' },\n        ],\n        name: 'gaugeDeposit',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address[]', name: 'gauges', type: 'address[]' },\n            {\n                internalType: 'uint256',\n                name: 'outputReference',\n                type: 'uint256',\n            },\n        ],\n        name: 'gaugeMint',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'bool', name: 'approval', type: 'bool' },\n            { internalType: 'address', name: 'user', type: 'address' },\n            { internalType: 'uint256', name: 'deadline', type: 'uint256' },\n            { internalType: 'uint8', name: 'v', type: 'uint8' },\n            { internalType: 'bytes32', name: 'r', type: 'bytes32' },\n            { internalType: 'bytes32', name: 's', type: 'bytes32' },\n        ],\n        name: 'gaugeSetMinterApproval',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IStakingLiquidityGauge',\n                name: 'gauge',\n                type: 'address',\n            },\n            { internalType: 'address', name: 'sender', type: 'address' },\n            { internalType: 'address', name: 'recipient', type: 'address' },\n            { internalType: 'uint256', name: 'amount', type: 'uint256' },\n        ],\n        name: 'gaugeWithdraw',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getEntrypoint',\n        outputs: [\n            {\n                internalType: 'contract IBalancerRelayer',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getVault',\n        outputs: [\n            { internalType: 'contract IVault', name: '', type: 'address' },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'bytes32', name: 'poolId', type: 'bytes32' },\n            {\n                internalType: 'enum VaultActions.PoolKind',\n                name: 'kind',\n                type: 'uint8',\n            },\n            { internalType: 'address', name: 'sender', type: 'address' },\n            { internalType: 'address', name: 'recipient', type: 'address' },\n            {\n                components: [\n                    {\n                        internalType: 'contract IAsset[]',\n                        name: 'assets',\n                        type: 'address[]',\n                    },\n                    {\n                        internalType: 'uint256[]',\n                        name: 'maxAmountsIn',\n                        type: 'uint256[]',\n                    },\n                    { internalType: 'bytes', name: 'userData', type: 'bytes' },\n                    {\n                        internalType: 'bool',\n                        name: 'fromInternalBalance',\n                        type: 'bool',\n                    },\n                ],\n                internalType: 'struct IVault.JoinPoolRequest',\n                name: 'request',\n                type: 'tuple',\n            },\n            { internalType: 'uint256', name: 'value', type: 'uint256' },\n            {\n                internalType: 'uint256',\n                name: 'outputReference',\n                type: 'uint256',\n            },\n        ],\n        name: 'joinPool',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'enum IVault.UserBalanceOpKind',\n                        name: 'kind',\n                        type: 'uint8',\n                    },\n                    {\n                        internalType: 'contract IAsset',\n                        name: 'asset',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'amount',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'sender',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'address payable',\n                        name: 'recipient',\n                        type: 'address',\n                    },\n                ],\n                internalType: 'struct IVault.UserBalanceOp[]',\n                name: 'ops',\n                type: 'tuple[]',\n            },\n            { internalType: 'uint256', name: 'value', type: 'uint256' },\n            {\n                components: [\n                    { internalType: 'uint256', name: 'index', type: 'uint256' },\n                    { internalType: 'uint256', name: 'key', type: 'uint256' },\n                ],\n                internalType: 'struct VaultActions.OutputReference[]',\n                name: 'outputReferences',\n                type: 'tuple[]',\n            },\n        ],\n        name: 'manageUserBalance',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [{ internalType: 'uint256', name: 'ref', type: 'uint256' }],\n        name: 'peekChainedReferenceValue',\n        outputs: [{ internalType: 'uint256', name: 'value', type: 'uint256' }],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'relayer', type: 'address' },\n            { internalType: 'bool', name: 'approved', type: 'bool' },\n            { internalType: 'bytes', name: 'authorisation', type: 'bytes' },\n        ],\n        name: 'setRelayerApproval',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'recipient', type: 'address' },\n            { internalType: 'uint256', name: 'amount', type: 'uint256' },\n            {\n                internalType: 'uint256',\n                name: 'outputReference',\n                type: 'uint256',\n            },\n        ],\n        name: 'stakeETH',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'recipient', type: 'address' },\n            { internalType: 'uint256', name: 'amount', type: 'uint256' },\n            {\n                internalType: 'uint256',\n                name: 'outputReference',\n                type: 'uint256',\n            },\n        ],\n        name: 'stakeETHAndWrap',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'bytes32',\n                        name: 'poolId',\n                        type: 'bytes32',\n                    },\n                    {\n                        internalType: 'enum IVault.SwapKind',\n                        name: 'kind',\n                        type: 'uint8',\n                    },\n                    {\n                        internalType: 'contract IAsset',\n                        name: 'assetIn',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'contract IAsset',\n                        name: 'assetOut',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'amount',\n                        type: 'uint256',\n                    },\n                    { internalType: 'bytes', name: 'userData', type: 'bytes' },\n                ],\n                internalType: 'struct IVault.SingleSwap',\n                name: 'singleSwap',\n                type: 'tuple',\n            },\n            {\n                components: [\n                    {\n                        internalType: 'address',\n                        name: 'sender',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'fromInternalBalance',\n                        type: 'bool',\n                    },\n                    {\n                        internalType: 'address payable',\n                        name: 'recipient',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'toInternalBalance',\n                        type: 'bool',\n                    },\n                ],\n                internalType: 'struct IVault.FundManagement',\n                name: 'funds',\n                type: 'tuple',\n            },\n            { internalType: 'uint256', name: 'limit', type: 'uint256' },\n            { internalType: 'uint256', name: 'deadline', type: 'uint256' },\n            { internalType: 'uint256', name: 'value', type: 'uint256' },\n            {\n                internalType: 'uint256',\n                name: 'outputReference',\n                type: 'uint256',\n            },\n        ],\n        name: 'swap',\n        outputs: [{ internalType: 'uint256', name: 'result', type: 'uint256' }],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IStaticATokenLM',\n                name: 'staticToken',\n                type: 'address',\n            },\n            { internalType: 'address', name: 'sender', type: 'address' },\n            { internalType: 'address', name: 'recipient', type: 'address' },\n            { internalType: 'uint256', name: 'amount', type: 'uint256' },\n            { internalType: 'bool', name: 'toUnderlying', type: 'bool' },\n            {\n                internalType: 'uint256',\n                name: 'outputReference',\n                type: 'uint256',\n            },\n        ],\n        name: 'unwrapAaveStaticToken',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract ICToken',\n                name: 'wrappedToken',\n                type: 'address',\n            },\n            { internalType: 'address', name: 'sender', type: 'address' },\n            { internalType: 'address', name: 'recipient', type: 'address' },\n            { internalType: 'uint256', name: 'amount', type: 'uint256' },\n            {\n                internalType: 'uint256',\n                name: 'outputReference',\n                type: 'uint256',\n            },\n        ],\n        name: 'unwrapCompoundV2',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IERC4626',\n                name: 'wrappedToken',\n                type: 'address',\n            },\n            { internalType: 'address', name: 'sender', type: 'address' },\n            { internalType: 'address', name: 'recipient', type: 'address' },\n            { internalType: 'uint256', name: 'amount', type: 'uint256' },\n            {\n                internalType: 'uint256',\n                name: 'outputReference',\n                type: 'uint256',\n            },\n        ],\n        name: 'unwrapERC4626',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IEulerToken',\n                name: 'wrappedToken',\n                type: 'address',\n            },\n            { internalType: 'address', name: 'sender', type: 'address' },\n            { internalType: 'address', name: 'recipient', type: 'address' },\n            { internalType: 'uint256', name: 'amount', type: 'uint256' },\n            {\n                internalType: 'uint256',\n                name: 'outputReference',\n                type: 'uint256',\n            },\n        ],\n        name: 'unwrapEuler',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IGearboxDieselToken',\n                name: 'wrappedToken',\n                type: 'address',\n            },\n            { internalType: 'address', name: 'sender', type: 'address' },\n            { internalType: 'address', name: 'recipient', type: 'address' },\n            { internalType: 'uint256', name: 'dieselAmount', type: 'uint256' },\n            {\n                internalType: 'uint256',\n                name: 'outputReference',\n                type: 'uint256',\n            },\n        ],\n        name: 'unwrapGearbox',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IReaperTokenVault',\n                name: 'vaultToken',\n                type: 'address',\n            },\n            { internalType: 'address', name: 'sender', type: 'address' },\n            { internalType: 'address', name: 'recipient', type: 'address' },\n            { internalType: 'uint256', name: 'amount', type: 'uint256' },\n            {\n                internalType: 'uint256',\n                name: 'outputReference',\n                type: 'uint256',\n            },\n        ],\n        name: 'unwrapReaperVaultToken',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IShareToken',\n                name: 'wrappedToken',\n                type: 'address',\n            },\n            { internalType: 'address', name: 'sender', type: 'address' },\n            { internalType: 'address', name: 'recipient', type: 'address' },\n            { internalType: 'uint256', name: 'amount', type: 'uint256' },\n            {\n                internalType: 'uint256',\n                name: 'outputReference',\n                type: 'uint256',\n            },\n        ],\n        name: 'unwrapShareToken',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract ITetuSmartVault',\n                name: 'wrappedToken',\n                type: 'address',\n            },\n            { internalType: 'address', name: 'sender', type: 'address' },\n            { internalType: 'address', name: 'recipient', type: 'address' },\n            { internalType: 'uint256', name: 'amount', type: 'uint256' },\n            {\n                internalType: 'uint256',\n                name: 'outputReference',\n                type: 'uint256',\n            },\n        ],\n        name: 'unwrapTetu',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IUnbuttonToken',\n                name: 'wrapperToken',\n                type: 'address',\n            },\n            { internalType: 'address', name: 'sender', type: 'address' },\n            { internalType: 'address', name: 'recipient', type: 'address' },\n            { internalType: 'uint256', name: 'amount', type: 'uint256' },\n            {\n                internalType: 'uint256',\n                name: 'outputReference',\n                type: 'uint256',\n            },\n        ],\n        name: 'unwrapUnbuttonToken',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'sender', type: 'address' },\n            { internalType: 'address', name: 'recipient', type: 'address' },\n            { internalType: 'uint256', name: 'amount', type: 'uint256' },\n            {\n                internalType: 'uint256',\n                name: 'outputReference',\n                type: 'uint256',\n            },\n        ],\n        name: 'unwrapWstETH',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IYearnTokenVault',\n                name: 'wrappedToken',\n                type: 'address',\n            },\n            { internalType: 'address', name: 'sender', type: 'address' },\n            { internalType: 'address', name: 'recipient', type: 'address' },\n            { internalType: 'uint256', name: 'amount', type: 'uint256' },\n            {\n                internalType: 'uint256',\n                name: 'outputReference',\n                type: 'uint256',\n            },\n        ],\n        name: 'unwrapYearn',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IERC20Permit',\n                name: 'token',\n                type: 'address',\n            },\n            { internalType: 'address', name: 'owner', type: 'address' },\n            { internalType: 'uint256', name: 'value', type: 'uint256' },\n            { internalType: 'uint256', name: 'deadline', type: 'uint256' },\n            { internalType: 'uint8', name: 'v', type: 'uint8' },\n            { internalType: 'bytes32', name: 'r', type: 'bytes32' },\n            { internalType: 'bytes32', name: 's', type: 'bytes32' },\n        ],\n        name: 'vaultPermit',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IERC20PermitDAI',\n                name: 'token',\n                type: 'address',\n            },\n            { internalType: 'address', name: 'holder', type: 'address' },\n            { internalType: 'uint256', name: 'nonce', type: 'uint256' },\n            { internalType: 'uint256', name: 'expiry', type: 'uint256' },\n            { internalType: 'bool', name: 'allowed', type: 'bool' },\n            { internalType: 'uint8', name: 'v', type: 'uint8' },\n            { internalType: 'bytes32', name: 'r', type: 'bytes32' },\n            { internalType: 'bytes32', name: 's', type: 'bytes32' },\n        ],\n        name: 'vaultPermitDAI',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IStaticATokenLM',\n                name: 'staticToken',\n                type: 'address',\n            },\n            { internalType: 'address', name: 'sender', type: 'address' },\n            { internalType: 'address', name: 'recipient', type: 'address' },\n            { internalType: 'uint256', name: 'amount', type: 'uint256' },\n            { internalType: 'bool', name: 'fromUnderlying', type: 'bool' },\n            {\n                internalType: 'uint256',\n                name: 'outputReference',\n                type: 'uint256',\n            },\n        ],\n        name: 'wrapAaveDynamicToken',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract ICToken',\n                name: 'wrappedToken',\n                type: 'address',\n            },\n            { internalType: 'address', name: 'sender', type: 'address' },\n            { internalType: 'address', name: 'recipient', type: 'address' },\n            { internalType: 'uint256', name: 'amount', type: 'uint256' },\n            {\n                internalType: 'uint256',\n                name: 'outputReference',\n                type: 'uint256',\n            },\n        ],\n        name: 'wrapCompoundV2',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IERC4626',\n                name: 'wrappedToken',\n                type: 'address',\n            },\n            { internalType: 'address', name: 'sender', type: 'address' },\n            { internalType: 'address', name: 'recipient', type: 'address' },\n            { internalType: 'uint256', name: 'amount', type: 'uint256' },\n            {\n                internalType: 'uint256',\n                name: 'outputReference',\n                type: 'uint256',\n            },\n        ],\n        name: 'wrapERC4626',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IEulerToken',\n                name: 'wrappedToken',\n                type: 'address',\n            },\n            { internalType: 'address', name: 'eulerProtocol', type: 'address' },\n            { internalType: 'address', name: 'sender', type: 'address' },\n            { internalType: 'address', name: 'recipient', type: 'address' },\n            { internalType: 'uint256', name: 'amount', type: 'uint256' },\n            {\n                internalType: 'uint256',\n                name: 'outputReference',\n                type: 'uint256',\n            },\n        ],\n        name: 'wrapEuler',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IGearboxDieselToken',\n                name: 'wrappedToken',\n                type: 'address',\n            },\n            { internalType: 'address', name: 'sender', type: 'address' },\n            { internalType: 'address', name: 'recipient', type: 'address' },\n            { internalType: 'uint256', name: 'mainAmount', type: 'uint256' },\n            {\n                internalType: 'uint256',\n                name: 'outputReference',\n                type: 'uint256',\n            },\n        ],\n        name: 'wrapGearbox',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IReaperTokenVault',\n                name: 'vaultToken',\n                type: 'address',\n            },\n            { internalType: 'address', name: 'sender', type: 'address' },\n            { internalType: 'address', name: 'recipient', type: 'address' },\n            { internalType: 'uint256', name: 'amount', type: 'uint256' },\n            {\n                internalType: 'uint256',\n                name: 'outputReference',\n                type: 'uint256',\n            },\n        ],\n        name: 'wrapReaperVaultToken',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IShareToken',\n                name: 'wrappedToken',\n                type: 'address',\n            },\n            { internalType: 'address', name: 'sender', type: 'address' },\n            { internalType: 'address', name: 'recipient', type: 'address' },\n            { internalType: 'uint256', name: 'amount', type: 'uint256' },\n            {\n                internalType: 'uint256',\n                name: 'outputReference',\n                type: 'uint256',\n            },\n        ],\n        name: 'wrapShareToken',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'sender', type: 'address' },\n            { internalType: 'address', name: 'recipient', type: 'address' },\n            { internalType: 'uint256', name: 'amount', type: 'uint256' },\n            {\n                internalType: 'uint256',\n                name: 'outputReference',\n                type: 'uint256',\n            },\n        ],\n        name: 'wrapStETH',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract ITetuSmartVault',\n                name: 'wrappedToken',\n                type: 'address',\n            },\n            { internalType: 'address', name: 'sender', type: 'address' },\n            { internalType: 'address', name: 'recipient', type: 'address' },\n            { internalType: 'uint256', name: 'amount', type: 'uint256' },\n            {\n                internalType: 'uint256',\n                name: 'outputReference',\n                type: 'uint256',\n            },\n        ],\n        name: 'wrapTetu',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IUnbuttonToken',\n                name: 'wrapperToken',\n                type: 'address',\n            },\n            { internalType: 'address', name: 'sender', type: 'address' },\n            { internalType: 'address', name: 'recipient', type: 'address' },\n            { internalType: 'uint256', name: 'uAmount', type: 'uint256' },\n            {\n                internalType: 'uint256',\n                name: 'outputReference',\n                type: 'uint256',\n            },\n        ],\n        name: 'wrapUnbuttonToken',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IYearnTokenVault',\n                name: 'wrappedToken',\n                type: 'address',\n            },\n            { internalType: 'address', name: 'sender', type: 'address' },\n            { internalType: 'address', name: 'recipient', type: 'address' },\n            { internalType: 'uint256', name: 'amount', type: 'uint256' },\n            {\n                internalType: 'uint256',\n                name: 'outputReference',\n                type: 'uint256',\n            },\n        ],\n        name: 'wrapYearn',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n] as const;\n","export const composableStableFactoryV6Abi_V2 = [\n    {\n        inputs: [\n            {\n                internalType: 'contract IVault',\n                name: 'vault',\n                type: 'address',\n            },\n            {\n                internalType: 'contract IProtocolFeePercentagesProvider',\n                name: 'protocolFeeProvider',\n                type: 'address',\n            },\n            {\n                internalType: 'string',\n                name: 'factoryVersion',\n                type: 'string',\n            },\n            {\n                internalType: 'string',\n                name: 'poolVersion',\n                type: 'string',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'constructor',\n    },\n    {\n        anonymous: false,\n        inputs: [],\n        name: 'FactoryDisabled',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'pool',\n                type: 'address',\n            },\n        ],\n        name: 'PoolCreated',\n        type: 'event',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'string',\n                name: 'name',\n                type: 'string',\n            },\n            {\n                internalType: 'string',\n                name: 'symbol',\n                type: 'string',\n            },\n            {\n                internalType: 'contract IERC20[]',\n                name: 'tokens',\n                type: 'address[]',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amplificationParameter',\n                type: 'uint256',\n            },\n            {\n                internalType: 'contract IRateProvider[]',\n                name: 'rateProviders',\n                type: 'address[]',\n            },\n            {\n                internalType: 'uint256[]',\n                name: 'tokenRateCacheDurations',\n                type: 'uint256[]',\n            },\n            {\n                internalType: 'bool',\n                name: 'exemptFromYieldProtocolFeeFlag',\n                type: 'bool',\n            },\n            {\n                internalType: 'uint256',\n                name: 'swapFeePercentage',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address',\n                name: 'owner',\n                type: 'address',\n            },\n            {\n                internalType: 'bytes32',\n                name: 'salt',\n                type: 'bytes32',\n            },\n        ],\n        name: 'create',\n        outputs: [\n            {\n                internalType: 'contract ComposableStablePool',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'disable',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'bytes4',\n                name: 'selector',\n                type: 'bytes4',\n            },\n        ],\n        name: 'getActionId',\n        outputs: [\n            {\n                internalType: 'bytes32',\n                name: '',\n                type: 'bytes32',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getAuthorizer',\n        outputs: [\n            {\n                internalType: 'contract IAuthorizer',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getCreationCode',\n        outputs: [\n            {\n                internalType: 'bytes',\n                name: '',\n                type: 'bytes',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getCreationCodeContracts',\n        outputs: [\n            {\n                internalType: 'address',\n                name: 'contractA',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'contractB',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getPauseConfiguration',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'pauseWindowDuration',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'bufferPeriodDuration',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getPoolVersion',\n        outputs: [\n            {\n                internalType: 'string',\n                name: '',\n                type: 'string',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getProtocolFeePercentagesProvider',\n        outputs: [\n            {\n                internalType: 'contract IProtocolFeePercentagesProvider',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getVault',\n        outputs: [\n            {\n                internalType: 'contract IVault',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'isDisabled',\n        outputs: [\n            {\n                internalType: 'bool',\n                name: '',\n                type: 'bool',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'pool',\n                type: 'address',\n            },\n        ],\n        name: 'isPoolFromFactory',\n        outputs: [\n            {\n                internalType: 'bool',\n                name: '',\n                type: 'bool',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'version',\n        outputs: [\n            {\n                internalType: 'string',\n                name: '',\n                type: 'string',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n] as const;\n","export const erc20Abi = [\n    {\n        inputs: [\n            {\n                internalType: 'string',\n                name: 'name_',\n                type: 'string',\n            },\n            {\n                internalType: 'string',\n                name: 'symbol_',\n                type: 'string',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'constructor',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'owner',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'spender',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'value',\n                type: 'uint256',\n            },\n        ],\n        name: 'Approval',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'from',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'value',\n                type: 'uint256',\n            },\n        ],\n        name: 'Transfer',\n        type: 'event',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'owner',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'spender',\n                type: 'address',\n            },\n        ],\n        name: 'allowance',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: '',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'spender',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n            },\n        ],\n        name: 'approve',\n        outputs: [\n            {\n                internalType: 'bool',\n                name: '',\n                type: 'bool',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'account',\n                type: 'address',\n            },\n        ],\n        name: 'balanceOf',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: '',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'decimals',\n        outputs: [\n            {\n                internalType: 'uint8',\n                name: '',\n                type: 'uint8',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'spender',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'subtractedValue',\n                type: 'uint256',\n            },\n        ],\n        name: 'decreaseAllowance',\n        outputs: [\n            {\n                internalType: 'bool',\n                name: '',\n                type: 'bool',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'spender',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'addedValue',\n                type: 'uint256',\n            },\n        ],\n        name: 'increaseAllowance',\n        outputs: [\n            {\n                internalType: 'bool',\n                name: '',\n                type: 'bool',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'name',\n        outputs: [\n            {\n                internalType: 'string',\n                name: '',\n                type: 'string',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'symbol',\n        outputs: [\n            {\n                internalType: 'string',\n                name: '',\n                type: 'string',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'totalSupply',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: '',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n            },\n        ],\n        name: 'transfer',\n        outputs: [\n            {\n                internalType: 'bool',\n                name: '',\n                type: 'bool',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'sender',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n            },\n        ],\n        name: 'transferFrom',\n        outputs: [\n            {\n                internalType: 'bool',\n                name: '',\n                type: 'bool',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n] as const;\n","export const permit2Abi = [\n    {\n        inputs: [\n            { internalType: 'uint256', name: 'deadline', type: 'uint256' },\n        ],\n        name: 'AllowanceExpired',\n        type: 'error',\n    },\n    { inputs: [], name: 'ExcessiveInvalidation', type: 'error' },\n    {\n        inputs: [{ internalType: 'uint256', name: 'amount', type: 'uint256' }],\n        name: 'InsufficientAllowance',\n        type: 'error',\n    },\n    {\n        inputs: [\n            { internalType: 'uint256', name: 'maxAmount', type: 'uint256' },\n        ],\n        name: 'InvalidAmount',\n        type: 'error',\n    },\n    { inputs: [], name: 'InvalidContractSignature', type: 'error' },\n    { inputs: [], name: 'InvalidNonce', type: 'error' },\n    { inputs: [], name: 'InvalidSignature', type: 'error' },\n    { inputs: [], name: 'InvalidSignatureLength', type: 'error' },\n    { inputs: [], name: 'InvalidSigner', type: 'error' },\n    { inputs: [], name: 'LengthMismatch', type: 'error' },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: 'signatureDeadline',\n                type: 'uint256',\n            },\n        ],\n        name: 'SignatureExpired',\n        type: 'error',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'owner',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'token',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'spender',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint160',\n                name: 'amount',\n                type: 'uint160',\n            },\n            {\n                indexed: false,\n                internalType: 'uint48',\n                name: 'expiration',\n                type: 'uint48',\n            },\n        ],\n        name: 'Approval',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'owner',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'address',\n                name: 'token',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'address',\n                name: 'spender',\n                type: 'address',\n            },\n        ],\n        name: 'Lockdown',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'owner',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'token',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'spender',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint48',\n                name: 'newNonce',\n                type: 'uint48',\n            },\n            {\n                indexed: false,\n                internalType: 'uint48',\n                name: 'oldNonce',\n                type: 'uint48',\n            },\n        ],\n        name: 'NonceInvalidation',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'owner',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'token',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'spender',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint160',\n                name: 'amount',\n                type: 'uint160',\n            },\n            {\n                indexed: false,\n                internalType: 'uint48',\n                name: 'expiration',\n                type: 'uint48',\n            },\n            {\n                indexed: false,\n                internalType: 'uint48',\n                name: 'nonce',\n                type: 'uint48',\n            },\n        ],\n        name: 'Permit',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'owner',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'word',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'mask',\n                type: 'uint256',\n            },\n        ],\n        name: 'UnorderedNonceInvalidation',\n        type: 'event',\n    },\n    {\n        inputs: [],\n        name: 'DOMAIN_SEPARATOR',\n        outputs: [{ internalType: 'bytes32', name: '', type: 'bytes32' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: '', type: 'address' }, // account\n            { internalType: 'address', name: '', type: 'address' }, // token\n            { internalType: 'address', name: '', type: 'address' }, // spender\n        ],\n        name: 'allowance',\n        outputs: [\n            { internalType: 'uint160', name: 'amount', type: 'uint160' },\n            { internalType: 'uint48', name: 'expiration', type: 'uint48' },\n            { internalType: 'uint48', name: 'nonce', type: 'uint48' },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'token', type: 'address' },\n            { internalType: 'address', name: 'spender', type: 'address' },\n            { internalType: 'uint160', name: 'amount', type: 'uint160' },\n            { internalType: 'uint48', name: 'expiration', type: 'uint48' },\n        ],\n        name: 'approve',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'token', type: 'address' },\n            { internalType: 'address', name: 'spender', type: 'address' },\n            { internalType: 'uint48', name: 'newNonce', type: 'uint48' },\n        ],\n        name: 'invalidateNonces',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'uint256', name: 'wordPos', type: 'uint256' },\n            { internalType: 'uint256', name: 'mask', type: 'uint256' },\n        ],\n        name: 'invalidateUnorderedNonces',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    { internalType: 'address', name: 'token', type: 'address' },\n                    {\n                        internalType: 'address',\n                        name: 'spender',\n                        type: 'address',\n                    },\n                ],\n                internalType: 'struct IAllowanceTransfer.TokenSpenderPair[]',\n                name: 'approvals',\n                type: 'tuple[]',\n            },\n        ],\n        name: 'lockdown',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: '', type: 'address' },\n            { internalType: 'uint256', name: '', type: 'uint256' },\n        ],\n        name: 'nonceBitmap',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'owner', type: 'address' },\n            {\n                components: [\n                    {\n                        components: [\n                            {\n                                internalType: 'address',\n                                name: 'token',\n                                type: 'address',\n                            },\n                            {\n                                internalType: 'uint160',\n                                name: 'amount',\n                                type: 'uint160',\n                            },\n                            {\n                                internalType: 'uint48',\n                                name: 'expiration',\n                                type: 'uint48',\n                            },\n                            {\n                                internalType: 'uint48',\n                                name: 'nonce',\n                                type: 'uint48',\n                            },\n                        ],\n                        internalType:\n                            'struct IAllowanceTransfer.PermitDetails[]',\n                        name: 'details',\n                        type: 'tuple[]',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'spender',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'sigDeadline',\n                        type: 'uint256',\n                    },\n                ],\n                internalType: 'struct IAllowanceTransfer.PermitBatch',\n                name: 'permitBatch',\n                type: 'tuple',\n            },\n            { internalType: 'bytes', name: 'signature', type: 'bytes' },\n        ],\n        name: 'permit',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'owner', type: 'address' },\n            {\n                components: [\n                    {\n                        components: [\n                            {\n                                internalType: 'address',\n                                name: 'token',\n                                type: 'address',\n                            },\n                            {\n                                internalType: 'uint160',\n                                name: 'amount',\n                                type: 'uint160',\n                            },\n                            {\n                                internalType: 'uint48',\n                                name: 'expiration',\n                                type: 'uint48',\n                            },\n                            {\n                                internalType: 'uint48',\n                                name: 'nonce',\n                                type: 'uint48',\n                            },\n                        ],\n                        internalType: 'struct IAllowanceTransfer.PermitDetails',\n                        name: 'details',\n                        type: 'tuple',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'spender',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'sigDeadline',\n                        type: 'uint256',\n                    },\n                ],\n                internalType: 'struct IAllowanceTransfer.PermitSingle',\n                name: 'permitSingle',\n                type: 'tuple',\n            },\n            { internalType: 'bytes', name: 'signature', type: 'bytes' },\n        ],\n        name: 'permit',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        components: [\n                            {\n                                internalType: 'address',\n                                name: 'token',\n                                type: 'address',\n                            },\n                            {\n                                internalType: 'uint256',\n                                name: 'amount',\n                                type: 'uint256',\n                            },\n                        ],\n                        internalType:\n                            'struct ISignatureTransfer.TokenPermissions',\n                        name: 'permitted',\n                        type: 'tuple',\n                    },\n                    { internalType: 'uint256', name: 'nonce', type: 'uint256' },\n                    {\n                        internalType: 'uint256',\n                        name: 'deadline',\n                        type: 'uint256',\n                    },\n                ],\n                internalType: 'struct ISignatureTransfer.PermitTransferFrom',\n                name: 'permit',\n                type: 'tuple',\n            },\n            {\n                components: [\n                    { internalType: 'address', name: 'to', type: 'address' },\n                    {\n                        internalType: 'uint256',\n                        name: 'requestedAmount',\n                        type: 'uint256',\n                    },\n                ],\n                internalType:\n                    'struct ISignatureTransfer.SignatureTransferDetails',\n                name: 'transferDetails',\n                type: 'tuple',\n            },\n            { internalType: 'address', name: 'owner', type: 'address' },\n            { internalType: 'bytes', name: 'signature', type: 'bytes' },\n        ],\n        name: 'permitTransferFrom',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        components: [\n                            {\n                                internalType: 'address',\n                                name: 'token',\n                                type: 'address',\n                            },\n                            {\n                                internalType: 'uint256',\n                                name: 'amount',\n                                type: 'uint256',\n                            },\n                        ],\n                        internalType:\n                            'struct ISignatureTransfer.TokenPermissions[]',\n                        name: 'permitted',\n                        type: 'tuple[]',\n                    },\n                    { internalType: 'uint256', name: 'nonce', type: 'uint256' },\n                    {\n                        internalType: 'uint256',\n                        name: 'deadline',\n                        type: 'uint256',\n                    },\n                ],\n                internalType:\n                    'struct ISignatureTransfer.PermitBatchTransferFrom',\n                name: 'permit',\n                type: 'tuple',\n            },\n            {\n                components: [\n                    { internalType: 'address', name: 'to', type: 'address' },\n                    {\n                        internalType: 'uint256',\n                        name: 'requestedAmount',\n                        type: 'uint256',\n                    },\n                ],\n                internalType:\n                    'struct ISignatureTransfer.SignatureTransferDetails[]',\n                name: 'transferDetails',\n                type: 'tuple[]',\n            },\n            { internalType: 'address', name: 'owner', type: 'address' },\n            { internalType: 'bytes', name: 'signature', type: 'bytes' },\n        ],\n        name: 'permitTransferFrom',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        components: [\n                            {\n                                internalType: 'address',\n                                name: 'token',\n                                type: 'address',\n                            },\n                            {\n                                internalType: 'uint256',\n                                name: 'amount',\n                                type: 'uint256',\n                            },\n                        ],\n                        internalType:\n                            'struct ISignatureTransfer.TokenPermissions',\n                        name: 'permitted',\n                        type: 'tuple',\n                    },\n                    { internalType: 'uint256', name: 'nonce', type: 'uint256' },\n                    {\n                        internalType: 'uint256',\n                        name: 'deadline',\n                        type: 'uint256',\n                    },\n                ],\n                internalType: 'struct ISignatureTransfer.PermitTransferFrom',\n                name: 'permit',\n                type: 'tuple',\n            },\n            {\n                components: [\n                    { internalType: 'address', name: 'to', type: 'address' },\n                    {\n                        internalType: 'uint256',\n                        name: 'requestedAmount',\n                        type: 'uint256',\n                    },\n                ],\n                internalType:\n                    'struct ISignatureTransfer.SignatureTransferDetails',\n                name: 'transferDetails',\n                type: 'tuple',\n            },\n            { internalType: 'address', name: 'owner', type: 'address' },\n            { internalType: 'bytes32', name: 'witness', type: 'bytes32' },\n            {\n                internalType: 'string',\n                name: 'witnessTypeString',\n                type: 'string',\n            },\n            { internalType: 'bytes', name: 'signature', type: 'bytes' },\n        ],\n        name: 'permitWitnessTransferFrom',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        components: [\n                            {\n                                internalType: 'address',\n                                name: 'token',\n                                type: 'address',\n                            },\n                            {\n                                internalType: 'uint256',\n                                name: 'amount',\n                                type: 'uint256',\n                            },\n                        ],\n                        internalType:\n                            'struct ISignatureTransfer.TokenPermissions[]',\n                        name: 'permitted',\n                        type: 'tuple[]',\n                    },\n                    { internalType: 'uint256', name: 'nonce', type: 'uint256' },\n                    {\n                        internalType: 'uint256',\n                        name: 'deadline',\n                        type: 'uint256',\n                    },\n                ],\n                internalType:\n                    'struct ISignatureTransfer.PermitBatchTransferFrom',\n                name: 'permit',\n                type: 'tuple',\n            },\n            {\n                components: [\n                    { internalType: 'address', name: 'to', type: 'address' },\n                    {\n                        internalType: 'uint256',\n                        name: 'requestedAmount',\n                        type: 'uint256',\n                    },\n                ],\n                internalType:\n                    'struct ISignatureTransfer.SignatureTransferDetails[]',\n                name: 'transferDetails',\n                type: 'tuple[]',\n            },\n            { internalType: 'address', name: 'owner', type: 'address' },\n            { internalType: 'bytes32', name: 'witness', type: 'bytes32' },\n            {\n                internalType: 'string',\n                name: 'witnessTypeString',\n                type: 'string',\n            },\n            { internalType: 'bytes', name: 'signature', type: 'bytes' },\n        ],\n        name: 'permitWitnessTransferFrom',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    { internalType: 'address', name: 'from', type: 'address' },\n                    { internalType: 'address', name: 'to', type: 'address' },\n                    {\n                        internalType: 'uint160',\n                        name: 'amount',\n                        type: 'uint160',\n                    },\n                    { internalType: 'address', name: 'token', type: 'address' },\n                ],\n                internalType:\n                    'struct IAllowanceTransfer.AllowanceTransferDetails[]',\n                name: 'transferDetails',\n                type: 'tuple[]',\n            },\n        ],\n        name: 'transferFrom',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'from', type: 'address' },\n            { internalType: 'address', name: 'to', type: 'address' },\n            { internalType: 'uint160', name: 'amount', type: 'uint160' },\n            { internalType: 'address', name: 'token', type: 'address' },\n        ],\n        name: 'transferFrom',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n] as const;\n","export const vaultV2Abi = [\n    {\n        inputs: [\n            {\n                internalType: 'contract IAuthorizer',\n                name: 'authorizer',\n                type: 'address',\n            },\n            { internalType: 'contract IWETH', name: 'weth', type: 'address' },\n            {\n                internalType: 'uint256',\n                name: 'pauseWindowDuration',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'bufferPeriodDuration',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'constructor',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'contract IAuthorizer',\n                name: 'newAuthorizer',\n                type: 'address',\n            },\n        ],\n        name: 'AuthorizerChanged',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'contract IERC20',\n                name: 'token',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'sender',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n            },\n        ],\n        name: 'ExternalBalanceTransfer',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'contract IFlashLoanRecipient',\n                name: 'recipient',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'contract IERC20',\n                name: 'token',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'amount',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'feeAmount',\n                type: 'uint256',\n            },\n        ],\n        name: 'FlashLoan',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'user',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'contract IERC20',\n                name: 'token',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'int256',\n                name: 'delta',\n                type: 'int256',\n            },\n        ],\n        name: 'InternalBalanceChanged',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'bool',\n                name: 'paused',\n                type: 'bool',\n            },\n        ],\n        name: 'PausedStateChanged',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'bytes32',\n                name: 'poolId',\n                type: 'bytes32',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'liquidityProvider',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'contract IERC20[]',\n                name: 'tokens',\n                type: 'address[]',\n            },\n            {\n                indexed: false,\n                internalType: 'int256[]',\n                name: 'deltas',\n                type: 'int256[]',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256[]',\n                name: 'protocolFeeAmounts',\n                type: 'uint256[]',\n            },\n        ],\n        name: 'PoolBalanceChanged',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'bytes32',\n                name: 'poolId',\n                type: 'bytes32',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'assetManager',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'contract IERC20',\n                name: 'token',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'int256',\n                name: 'cashDelta',\n                type: 'int256',\n            },\n            {\n                indexed: false,\n                internalType: 'int256',\n                name: 'managedDelta',\n                type: 'int256',\n            },\n        ],\n        name: 'PoolBalanceManaged',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'bytes32',\n                name: 'poolId',\n                type: 'bytes32',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'poolAddress',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'enum IVault.PoolSpecialization',\n                name: 'specialization',\n                type: 'uint8',\n            },\n        ],\n        name: 'PoolRegistered',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'relayer',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'sender',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'bool',\n                name: 'approved',\n                type: 'bool',\n            },\n        ],\n        name: 'RelayerApprovalChanged',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'bytes32',\n                name: 'poolId',\n                type: 'bytes32',\n            },\n            {\n                indexed: true,\n                internalType: 'contract IERC20',\n                name: 'tokenIn',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'contract IERC20',\n                name: 'tokenOut',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'amountIn',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'amountOut',\n                type: 'uint256',\n            },\n        ],\n        name: 'Swap',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'bytes32',\n                name: 'poolId',\n                type: 'bytes32',\n            },\n            {\n                indexed: false,\n                internalType: 'contract IERC20[]',\n                name: 'tokens',\n                type: 'address[]',\n            },\n        ],\n        name: 'TokensDeregistered',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'bytes32',\n                name: 'poolId',\n                type: 'bytes32',\n            },\n            {\n                indexed: false,\n                internalType: 'contract IERC20[]',\n                name: 'tokens',\n                type: 'address[]',\n            },\n            {\n                indexed: false,\n                internalType: 'address[]',\n                name: 'assetManagers',\n                type: 'address[]',\n            },\n        ],\n        name: 'TokensRegistered',\n        type: 'event',\n    },\n    {\n        inputs: [],\n        name: 'WETH',\n        outputs: [\n            { internalType: 'contract IWETH', name: '', type: 'address' },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'enum IVault.SwapKind',\n                name: 'kind',\n                type: 'uint8',\n            },\n            {\n                components: [\n                    {\n                        internalType: 'bytes32',\n                        name: 'poolId',\n                        type: 'bytes32',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'assetInIndex',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'assetOutIndex',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'amount',\n                        type: 'uint256',\n                    },\n                    { internalType: 'bytes', name: 'userData', type: 'bytes' },\n                ],\n                internalType: 'struct IVault.BatchSwapStep[]',\n                name: 'swaps',\n                type: 'tuple[]',\n            },\n            {\n                internalType: 'contract IAsset[]',\n                name: 'assets',\n                type: 'address[]',\n            },\n            {\n                components: [\n                    {\n                        internalType: 'address',\n                        name: 'sender',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'fromInternalBalance',\n                        type: 'bool',\n                    },\n                    {\n                        internalType: 'address payable',\n                        name: 'recipient',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'toInternalBalance',\n                        type: 'bool',\n                    },\n                ],\n                internalType: 'struct IVault.FundManagement',\n                name: 'funds',\n                type: 'tuple',\n            },\n            { internalType: 'int256[]', name: 'limits', type: 'int256[]' },\n            { internalType: 'uint256', name: 'deadline', type: 'uint256' },\n        ],\n        name: 'batchSwap',\n        outputs: [\n            { internalType: 'int256[]', name: 'assetDeltas', type: 'int256[]' },\n        ],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'bytes32', name: 'poolId', type: 'bytes32' },\n            {\n                internalType: 'contract IERC20[]',\n                name: 'tokens',\n                type: 'address[]',\n            },\n        ],\n        name: 'deregisterTokens',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'bytes32', name: 'poolId', type: 'bytes32' },\n            { internalType: 'address', name: 'sender', type: 'address' },\n            {\n                internalType: 'address payable',\n                name: 'recipient',\n                type: 'address',\n            },\n            {\n                components: [\n                    {\n                        internalType: 'contract IAsset[]',\n                        name: 'assets',\n                        type: 'address[]',\n                    },\n                    {\n                        internalType: 'uint256[]',\n                        name: 'minAmountsOut',\n                        type: 'uint256[]',\n                    },\n                    { internalType: 'bytes', name: 'userData', type: 'bytes' },\n                    {\n                        internalType: 'bool',\n                        name: 'toInternalBalance',\n                        type: 'bool',\n                    },\n                ],\n                internalType: 'struct IVault.ExitPoolRequest',\n                name: 'request',\n                type: 'tuple',\n            },\n        ],\n        name: 'exitPool',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IFlashLoanRecipient',\n                name: 'recipient',\n                type: 'address',\n            },\n            {\n                internalType: 'contract IERC20[]',\n                name: 'tokens',\n                type: 'address[]',\n            },\n            { internalType: 'uint256[]', name: 'amounts', type: 'uint256[]' },\n            { internalType: 'bytes', name: 'userData', type: 'bytes' },\n        ],\n        name: 'flashLoan',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [{ internalType: 'bytes4', name: 'selector', type: 'bytes4' }],\n        name: 'getActionId',\n        outputs: [{ internalType: 'bytes32', name: '', type: 'bytes32' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getAuthorizer',\n        outputs: [\n            { internalType: 'contract IAuthorizer', name: '', type: 'address' },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getDomainSeparator',\n        outputs: [{ internalType: 'bytes32', name: '', type: 'bytes32' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'user', type: 'address' },\n            {\n                internalType: 'contract IERC20[]',\n                name: 'tokens',\n                type: 'address[]',\n            },\n        ],\n        name: 'getInternalBalance',\n        outputs: [\n            { internalType: 'uint256[]', name: 'balances', type: 'uint256[]' },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'user', type: 'address' }],\n        name: 'getNextNonce',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getPausedState',\n        outputs: [\n            { internalType: 'bool', name: 'paused', type: 'bool' },\n            {\n                internalType: 'uint256',\n                name: 'pauseWindowEndTime',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'bufferPeriodEndTime',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [{ internalType: 'bytes32', name: 'poolId', type: 'bytes32' }],\n        name: 'getPool',\n        outputs: [\n            { internalType: 'address', name: '', type: 'address' },\n            {\n                internalType: 'enum IVault.PoolSpecialization',\n                name: '',\n                type: 'uint8',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'bytes32', name: 'poolId', type: 'bytes32' },\n            { internalType: 'contract IERC20', name: 'token', type: 'address' },\n        ],\n        name: 'getPoolTokenInfo',\n        outputs: [\n            { internalType: 'uint256', name: 'cash', type: 'uint256' },\n            { internalType: 'uint256', name: 'managed', type: 'uint256' },\n            {\n                internalType: 'uint256',\n                name: 'lastChangeBlock',\n                type: 'uint256',\n            },\n            { internalType: 'address', name: 'assetManager', type: 'address' },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [{ internalType: 'bytes32', name: 'poolId', type: 'bytes32' }],\n        name: 'getPoolTokens',\n        outputs: [\n            {\n                internalType: 'contract IERC20[]',\n                name: 'tokens',\n                type: 'address[]',\n            },\n            { internalType: 'uint256[]', name: 'balances', type: 'uint256[]' },\n            {\n                internalType: 'uint256',\n                name: 'lastChangeBlock',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getProtocolFeesCollector',\n        outputs: [\n            {\n                internalType: 'contract ProtocolFeesCollector',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'user', type: 'address' },\n            { internalType: 'address', name: 'relayer', type: 'address' },\n        ],\n        name: 'hasApprovedRelayer',\n        outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'bytes32', name: 'poolId', type: 'bytes32' },\n            { internalType: 'address', name: 'sender', type: 'address' },\n            { internalType: 'address', name: 'recipient', type: 'address' },\n            {\n                components: [\n                    {\n                        internalType: 'contract IAsset[]',\n                        name: 'assets',\n                        type: 'address[]',\n                    },\n                    {\n                        internalType: 'uint256[]',\n                        name: 'maxAmountsIn',\n                        type: 'uint256[]',\n                    },\n                    { internalType: 'bytes', name: 'userData', type: 'bytes' },\n                    {\n                        internalType: 'bool',\n                        name: 'fromInternalBalance',\n                        type: 'bool',\n                    },\n                ],\n                internalType: 'struct IVault.JoinPoolRequest',\n                name: 'request',\n                type: 'tuple',\n            },\n        ],\n        name: 'joinPool',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'enum IVault.PoolBalanceOpKind',\n                        name: 'kind',\n                        type: 'uint8',\n                    },\n                    {\n                        internalType: 'bytes32',\n                        name: 'poolId',\n                        type: 'bytes32',\n                    },\n                    {\n                        internalType: 'contract IERC20',\n                        name: 'token',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'amount',\n                        type: 'uint256',\n                    },\n                ],\n                internalType: 'struct IVault.PoolBalanceOp[]',\n                name: 'ops',\n                type: 'tuple[]',\n            },\n        ],\n        name: 'managePoolBalance',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'enum IVault.UserBalanceOpKind',\n                        name: 'kind',\n                        type: 'uint8',\n                    },\n                    {\n                        internalType: 'contract IAsset',\n                        name: 'asset',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'amount',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'sender',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'address payable',\n                        name: 'recipient',\n                        type: 'address',\n                    },\n                ],\n                internalType: 'struct IVault.UserBalanceOp[]',\n                name: 'ops',\n                type: 'tuple[]',\n            },\n        ],\n        name: 'manageUserBalance',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'enum IVault.SwapKind',\n                name: 'kind',\n                type: 'uint8',\n            },\n            {\n                components: [\n                    {\n                        internalType: 'bytes32',\n                        name: 'poolId',\n                        type: 'bytes32',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'assetInIndex',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'assetOutIndex',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'amount',\n                        type: 'uint256',\n                    },\n                    { internalType: 'bytes', name: 'userData', type: 'bytes' },\n                ],\n                internalType: 'struct IVault.BatchSwapStep[]',\n                name: 'swaps',\n                type: 'tuple[]',\n            },\n            {\n                internalType: 'contract IAsset[]',\n                name: 'assets',\n                type: 'address[]',\n            },\n            {\n                components: [\n                    {\n                        internalType: 'address',\n                        name: 'sender',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'fromInternalBalance',\n                        type: 'bool',\n                    },\n                    {\n                        internalType: 'address payable',\n                        name: 'recipient',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'toInternalBalance',\n                        type: 'bool',\n                    },\n                ],\n                internalType: 'struct IVault.FundManagement',\n                name: 'funds',\n                type: 'tuple',\n            },\n        ],\n        name: 'queryBatchSwap',\n        outputs: [{ internalType: 'int256[]', name: '', type: 'int256[]' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'enum IVault.PoolSpecialization',\n                name: 'specialization',\n                type: 'uint8',\n            },\n        ],\n        name: 'registerPool',\n        outputs: [{ internalType: 'bytes32', name: '', type: 'bytes32' }],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'bytes32', name: 'poolId', type: 'bytes32' },\n            {\n                internalType: 'contract IERC20[]',\n                name: 'tokens',\n                type: 'address[]',\n            },\n            {\n                internalType: 'address[]',\n                name: 'assetManagers',\n                type: 'address[]',\n            },\n        ],\n        name: 'registerTokens',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IAuthorizer',\n                name: 'newAuthorizer',\n                type: 'address',\n            },\n        ],\n        name: 'setAuthorizer',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [{ internalType: 'bool', name: 'paused', type: 'bool' }],\n        name: 'setPaused',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'sender', type: 'address' },\n            { internalType: 'address', name: 'relayer', type: 'address' },\n            { internalType: 'bool', name: 'approved', type: 'bool' },\n        ],\n        name: 'setRelayerApproval',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'bytes32',\n                        name: 'poolId',\n                        type: 'bytes32',\n                    },\n                    {\n                        internalType: 'enum IVault.SwapKind',\n                        name: 'kind',\n                        type: 'uint8',\n                    },\n                    {\n                        internalType: 'contract IAsset',\n                        name: 'assetIn',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'contract IAsset',\n                        name: 'assetOut',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'amount',\n                        type: 'uint256',\n                    },\n                    { internalType: 'bytes', name: 'userData', type: 'bytes' },\n                ],\n                internalType: 'struct IVault.SingleSwap',\n                name: 'singleSwap',\n                type: 'tuple',\n            },\n            {\n                components: [\n                    {\n                        internalType: 'address',\n                        name: 'sender',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'fromInternalBalance',\n                        type: 'bool',\n                    },\n                    {\n                        internalType: 'address payable',\n                        name: 'recipient',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'toInternalBalance',\n                        type: 'bool',\n                    },\n                ],\n                internalType: 'struct IVault.FundManagement',\n                name: 'funds',\n                type: 'tuple',\n            },\n            { internalType: 'uint256', name: 'limit', type: 'uint256' },\n            { internalType: 'uint256', name: 'deadline', type: 'uint256' },\n        ],\n        name: 'swap',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountCalculated',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    { stateMutability: 'payable', type: 'receive' },\n] as const;\n","export const vaultV3Abi = [\n    {\n        inputs: [\n            {\n                internalType: 'contract IVaultExtension',\n                name: 'vaultExtension',\n                type: 'address',\n            },\n            {\n                internalType: 'contract IAuthorizer',\n                name: 'authorizer',\n                type: 'address',\n            },\n            {\n                internalType: 'contract IProtocolFeeController',\n                name: 'protocolFeeController',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'constructor',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'target', type: 'address' }],\n        name: 'AddressEmptyCode',\n        type: 'error',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'account', type: 'address' }],\n        name: 'AddressInsufficientBalance',\n        type: 'error',\n    },\n    { inputs: [], name: 'AfterAddLiquidityHookFailed', type: 'error' },\n    { inputs: [], name: 'AfterInitializeHookFailed', type: 'error' },\n    { inputs: [], name: 'AfterRemoveLiquidityHookFailed', type: 'error' },\n    { inputs: [], name: 'AfterSwapHookFailed', type: 'error' },\n    { inputs: [], name: 'AllZeroInputs', type: 'error' },\n    { inputs: [], name: 'AmountGivenZero', type: 'error' },\n    {\n        inputs: [\n            {\n                internalType: 'contract IERC20',\n                name: 'tokenIn',\n                type: 'address',\n            },\n            { internalType: 'uint256', name: 'amountIn', type: 'uint256' },\n            { internalType: 'uint256', name: 'maxAmountIn', type: 'uint256' },\n        ],\n        name: 'AmountInAboveMax',\n        type: 'error',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IERC20',\n                name: 'tokenOut',\n                type: 'address',\n            },\n            { internalType: 'uint256', name: 'amountOut', type: 'uint256' },\n            { internalType: 'uint256', name: 'minAmountOut', type: 'uint256' },\n        ],\n        name: 'AmountOutBelowMin',\n        type: 'error',\n    },\n    { inputs: [], name: 'BalanceNotSettled', type: 'error' },\n    { inputs: [], name: 'BalanceOverflow', type: 'error' },\n    { inputs: [], name: 'BeforeAddLiquidityHookFailed', type: 'error' },\n    { inputs: [], name: 'BeforeInitializeHookFailed', type: 'error' },\n    { inputs: [], name: 'BeforeRemoveLiquidityHookFailed', type: 'error' },\n    { inputs: [], name: 'BeforeSwapHookFailed', type: 'error' },\n    {\n        inputs: [\n            { internalType: 'uint256', name: 'amountIn', type: 'uint256' },\n            { internalType: 'uint256', name: 'maxAmountIn', type: 'uint256' },\n        ],\n        name: 'BptAmountInAboveMax',\n        type: 'error',\n    },\n    {\n        inputs: [\n            { internalType: 'uint256', name: 'amountOut', type: 'uint256' },\n            { internalType: 'uint256', name: 'minAmountOut', type: 'uint256' },\n        ],\n        name: 'BptAmountOutBelowMin',\n        type: 'error',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IERC4626',\n                name: 'wrappedToken',\n                type: 'address',\n            },\n        ],\n        name: 'BufferAlreadyInitialized',\n        type: 'error',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IERC4626',\n                name: 'wrappedToken',\n                type: 'address',\n            },\n        ],\n        name: 'BufferNotInitialized',\n        type: 'error',\n    },\n    { inputs: [], name: 'BufferSharesInvalidOwner', type: 'error' },\n    { inputs: [], name: 'BufferSharesInvalidReceiver', type: 'error' },\n    {\n        inputs: [\n            { internalType: 'uint256', name: 'totalSupply', type: 'uint256' },\n        ],\n        name: 'BufferTotalSupplyTooLow',\n        type: 'error',\n    },\n    { inputs: [], name: 'CannotReceiveEth', type: 'error' },\n    { inputs: [], name: 'CannotSwapSameToken', type: 'error' },\n    { inputs: [], name: 'DoesNotSupportAddLiquidityCustom', type: 'error' },\n    { inputs: [], name: 'DoesNotSupportDonation', type: 'error' },\n    { inputs: [], name: 'DoesNotSupportRemoveLiquidityCustom', type: 'error' },\n    { inputs: [], name: 'DoesNotSupportUnbalancedLiquidity', type: 'error' },\n    { inputs: [], name: 'DynamicSwapFeeHookFailed', type: 'error' },\n    {\n        inputs: [\n            { internalType: 'address', name: 'spender', type: 'address' },\n            { internalType: 'uint256', name: 'allowance', type: 'uint256' },\n            { internalType: 'uint256', name: 'needed', type: 'uint256' },\n        ],\n        name: 'ERC20InsufficientAllowance',\n        type: 'error',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'sender', type: 'address' },\n            { internalType: 'uint256', name: 'balance', type: 'uint256' },\n            { internalType: 'uint256', name: 'needed', type: 'uint256' },\n        ],\n        name: 'ERC20InsufficientBalance',\n        type: 'error',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'approver', type: 'address' },\n        ],\n        name: 'ERC20InvalidApprover',\n        type: 'error',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'receiver', type: 'address' },\n        ],\n        name: 'ERC20InvalidReceiver',\n        type: 'error',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'sender', type: 'address' }],\n        name: 'ERC20InvalidSender',\n        type: 'error',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'spender', type: 'address' }],\n        name: 'ERC20InvalidSpender',\n        type: 'error',\n    },\n    { inputs: [], name: 'FailedInnerCall', type: 'error' },\n    { inputs: [], name: 'FeePrecisionTooHigh', type: 'error' },\n    {\n        inputs: [\n            {\n                internalType: 'contract IERC20',\n                name: 'tokenIn',\n                type: 'address',\n            },\n            { internalType: 'uint256', name: 'amountIn', type: 'uint256' },\n            { internalType: 'uint256', name: 'maxAmountIn', type: 'uint256' },\n        ],\n        name: 'HookAdjustedAmountInAboveMax',\n        type: 'error',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IERC20',\n                name: 'tokenOut',\n                type: 'address',\n            },\n            { internalType: 'uint256', name: 'amountOut', type: 'uint256' },\n            { internalType: 'uint256', name: 'minAmountOut', type: 'uint256' },\n        ],\n        name: 'HookAdjustedAmountOutBelowMin',\n        type: 'error',\n    },\n    {\n        inputs: [\n            { internalType: 'uint256', name: 'amount', type: 'uint256' },\n            { internalType: 'uint256', name: 'limit', type: 'uint256' },\n        ],\n        name: 'HookAdjustedSwapLimit',\n        type: 'error',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'poolHooksContract',\n                type: 'address',\n            },\n            { internalType: 'address', name: 'pool', type: 'address' },\n            { internalType: 'address', name: 'poolFactory', type: 'address' },\n        ],\n        name: 'HookRegistrationFailed',\n        type: 'error',\n    },\n    { inputs: [], name: 'InputLengthMismatch', type: 'error' },\n    { inputs: [], name: 'InvalidAddLiquidityKind', type: 'error' },\n    { inputs: [], name: 'InvalidRemoveLiquidityKind', type: 'error' },\n    { inputs: [], name: 'InvalidToken', type: 'error' },\n    { inputs: [], name: 'InvalidTokenConfiguration', type: 'error' },\n    { inputs: [], name: 'InvalidTokenDecimals', type: 'error' },\n    { inputs: [], name: 'InvalidTokenType', type: 'error' },\n    {\n        inputs: [\n            {\n                internalType: 'contract IERC4626',\n                name: 'wrappedToken',\n                type: 'address',\n            },\n        ],\n        name: 'InvalidUnderlyingToken',\n        type: 'error',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: 'invariantRatio',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'maxInvariantRatio',\n                type: 'uint256',\n            },\n        ],\n        name: 'InvariantRatioAboveMax',\n        type: 'error',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: 'invariantRatio',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'minInvariantRatio',\n                type: 'uint256',\n            },\n        ],\n        name: 'InvariantRatioBelowMin',\n        type: 'error',\n    },\n    {\n        inputs: [\n            { internalType: 'uint256', name: 'issuedShares', type: 'uint256' },\n            {\n                internalType: 'uint256',\n                name: 'minIssuedShares',\n                type: 'uint256',\n            },\n        ],\n        name: 'IssuedSharesBelowMin',\n        type: 'error',\n    },\n    { inputs: [], name: 'MaxTokens', type: 'error' },\n    { inputs: [], name: 'MinTokens', type: 'error' },\n    { inputs: [], name: 'MultipleNonZeroInputs', type: 'error' },\n    { inputs: [], name: 'NotEnoughBufferShares', type: 'error' },\n    {\n        inputs: [\n            {\n                internalType: 'contract IERC4626',\n                name: 'wrappedToken',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'expectedUnderlyingAmount',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'actualUnderlyingAmount',\n                type: 'uint256',\n            },\n        ],\n        name: 'NotEnoughUnderlying',\n        type: 'error',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IERC4626',\n                name: 'wrappedToken',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'expectedWrappedAmount',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'actualWrappedAmount',\n                type: 'uint256',\n            },\n        ],\n        name: 'NotEnoughWrapped',\n        type: 'error',\n    },\n    { inputs: [], name: 'NotStaticCall', type: 'error' },\n    { inputs: [], name: 'NotVaultDelegateCall', type: 'error' },\n    { inputs: [], name: 'PauseBufferPeriodDurationTooLarge', type: 'error' },\n    { inputs: [], name: 'PercentageAboveMax', type: 'error' },\n    {\n        inputs: [{ internalType: 'address', name: 'pool', type: 'address' }],\n        name: 'PoolAlreadyInitialized',\n        type: 'error',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'pool', type: 'address' }],\n        name: 'PoolAlreadyRegistered',\n        type: 'error',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'pool', type: 'address' }],\n        name: 'PoolInRecoveryMode',\n        type: 'error',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'pool', type: 'address' }],\n        name: 'PoolNotInRecoveryMode',\n        type: 'error',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'pool', type: 'address' }],\n        name: 'PoolNotInitialized',\n        type: 'error',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'pool', type: 'address' }],\n        name: 'PoolNotPaused',\n        type: 'error',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'pool', type: 'address' }],\n        name: 'PoolNotRegistered',\n        type: 'error',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'pool', type: 'address' }],\n        name: 'PoolPauseWindowExpired',\n        type: 'error',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'pool', type: 'address' }],\n        name: 'PoolPaused',\n        type: 'error',\n    },\n    {\n        inputs: [\n            { internalType: 'uint256', name: 'totalSupply', type: 'uint256' },\n        ],\n        name: 'PoolTotalSupplyTooLow',\n        type: 'error',\n    },\n    { inputs: [], name: 'ProtocolFeesExceedTotalCollected', type: 'error' },\n    { inputs: [], name: 'QueriesDisabled', type: 'error' },\n    { inputs: [], name: 'QueriesDisabledPermanently', type: 'error' },\n    { inputs: [], name: 'QuoteResultSpoofed', type: 'error' },\n    { inputs: [], name: 'ReentrancyGuardReentrantCall', type: 'error' },\n    { inputs: [], name: 'RouterNotTrusted', type: 'error' },\n    {\n        inputs: [{ internalType: 'int256', name: 'value', type: 'int256' }],\n        name: 'SafeCastOverflowedIntToUint',\n        type: 'error',\n    },\n    {\n        inputs: [{ internalType: 'uint256', name: 'value', type: 'uint256' }],\n        name: 'SafeCastOverflowedUintToInt',\n        type: 'error',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'token', type: 'address' }],\n        name: 'SafeERC20FailedOperation',\n        type: 'error',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'sender', type: 'address' }],\n        name: 'SenderIsNotVault',\n        type: 'error',\n    },\n    { inputs: [], name: 'SwapFeePercentageTooHigh', type: 'error' },\n    { inputs: [], name: 'SwapFeePercentageTooLow', type: 'error' },\n    {\n        inputs: [\n            { internalType: 'uint256', name: 'amount', type: 'uint256' },\n            { internalType: 'uint256', name: 'limit', type: 'uint256' },\n        ],\n        name: 'SwapLimit',\n        type: 'error',\n    },\n    {\n        inputs: [\n            { internalType: 'contract IERC20', name: 'token', type: 'address' },\n        ],\n        name: 'TokenAlreadyRegistered',\n        type: 'error',\n    },\n    {\n        inputs: [\n            { internalType: 'contract IERC20', name: 'token', type: 'address' },\n        ],\n        name: 'TokenNotRegistered',\n        type: 'error',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'pool', type: 'address' },\n            { internalType: 'address', name: 'expectedToken', type: 'address' },\n            { internalType: 'address', name: 'actualToken', type: 'address' },\n        ],\n        name: 'TokensMismatch',\n        type: 'error',\n    },\n    { inputs: [], name: 'TradeAmountTooSmall', type: 'error' },\n    { inputs: [], name: 'VaultBuffersArePaused', type: 'error' },\n    { inputs: [], name: 'VaultIsNotUnlocked', type: 'error' },\n    { inputs: [], name: 'VaultNotPaused', type: 'error' },\n    { inputs: [], name: 'VaultPauseWindowDurationTooLarge', type: 'error' },\n    { inputs: [], name: 'VaultPauseWindowExpired', type: 'error' },\n    { inputs: [], name: 'VaultPaused', type: 'error' },\n    {\n        inputs: [\n            {\n                internalType: 'contract IERC4626',\n                name: 'wrappedToken',\n                type: 'address',\n            },\n        ],\n        name: 'WrapAmountTooSmall',\n        type: 'error',\n    },\n    { inputs: [], name: 'WrongProtocolFeeControllerDeployment', type: 'error' },\n    {\n        inputs: [\n            {\n                internalType: 'contract IERC4626',\n                name: 'wrappedToken',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'underlyingToken',\n                type: 'address',\n            },\n        ],\n        name: 'WrongUnderlyingToken',\n        type: 'error',\n    },\n    { inputs: [], name: 'WrongVaultAdminDeployment', type: 'error' },\n    { inputs: [], name: 'WrongVaultExtensionDeployment', type: 'error' },\n    { inputs: [], name: 'ZeroDivision', type: 'error' },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'pool',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'aggregateSwapFeePercentage',\n                type: 'uint256',\n            },\n        ],\n        name: 'AggregateSwapFeePercentageChanged',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'pool',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'aggregateYieldFeePercentage',\n                type: 'uint256',\n            },\n        ],\n        name: 'AggregateYieldFeePercentageChanged',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'pool',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'owner',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'spender',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'value',\n                type: 'uint256',\n            },\n        ],\n        name: 'Approval',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'contract IAuthorizer',\n                name: 'newAuthorizer',\n                type: 'address',\n            },\n        ],\n        name: 'AuthorizerChanged',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'contract IERC4626',\n                name: 'wrappedToken',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'from',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'burnedShares',\n                type: 'uint256',\n            },\n        ],\n        name: 'BufferSharesBurned',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'contract IERC4626',\n                name: 'wrappedToken',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'issuedShares',\n                type: 'uint256',\n            },\n        ],\n        name: 'BufferSharesMinted',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'pool',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'liquidityProvider',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'enum AddLiquidityKind',\n                name: 'kind',\n                type: 'uint8',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'totalSupply',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256[]',\n                name: 'amountsAddedRaw',\n                type: 'uint256[]',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256[]',\n                name: 'swapFeeAmountsRaw',\n                type: 'uint256[]',\n            },\n        ],\n        name: 'LiquidityAdded',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'contract IERC4626',\n                name: 'wrappedToken',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'amountUnderlying',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'amountWrapped',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'bytes32',\n                name: 'bufferBalances',\n                type: 'bytes32',\n            },\n        ],\n        name: 'LiquidityAddedToBuffer',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'pool',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'liquidityProvider',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'enum RemoveLiquidityKind',\n                name: 'kind',\n                type: 'uint8',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'totalSupply',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256[]',\n                name: 'amountsRemovedRaw',\n                type: 'uint256[]',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256[]',\n                name: 'swapFeeAmountsRaw',\n                type: 'uint256[]',\n            },\n        ],\n        name: 'LiquidityRemoved',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'contract IERC4626',\n                name: 'wrappedToken',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'amountUnderlying',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'amountWrapped',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'bytes32',\n                name: 'bufferBalances',\n                type: 'bytes32',\n            },\n        ],\n        name: 'LiquidityRemovedFromBuffer',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'pool',\n                type: 'address',\n            },\n        ],\n        name: 'PoolInitialized',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'pool',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'bool',\n                name: 'paused',\n                type: 'bool',\n            },\n        ],\n        name: 'PoolPausedStateChanged',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'pool',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'bool',\n                name: 'recoveryMode',\n                type: 'bool',\n            },\n        ],\n        name: 'PoolRecoveryModeStateChanged',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'pool',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'factory',\n                type: 'address',\n            },\n            {\n                components: [\n                    {\n                        internalType: 'contract IERC20',\n                        name: 'token',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'enum TokenType',\n                        name: 'tokenType',\n                        type: 'uint8',\n                    },\n                    {\n                        internalType: 'contract IRateProvider',\n                        name: 'rateProvider',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'paysYieldFees',\n                        type: 'bool',\n                    },\n                ],\n                indexed: false,\n                internalType: 'struct TokenConfig[]',\n                name: 'tokenConfig',\n                type: 'tuple[]',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'swapFeePercentage',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'uint32',\n                name: 'pauseWindowEndTime',\n                type: 'uint32',\n            },\n            {\n                components: [\n                    {\n                        internalType: 'address',\n                        name: 'pauseManager',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'swapFeeManager',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'poolCreator',\n                        type: 'address',\n                    },\n                ],\n                indexed: false,\n                internalType: 'struct PoolRoleAccounts',\n                name: 'roleAccounts',\n                type: 'tuple',\n            },\n            {\n                components: [\n                    {\n                        internalType: 'bool',\n                        name: 'enableHookAdjustedAmounts',\n                        type: 'bool',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'shouldCallBeforeInitialize',\n                        type: 'bool',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'shouldCallAfterInitialize',\n                        type: 'bool',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'shouldCallComputeDynamicSwapFee',\n                        type: 'bool',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'shouldCallBeforeSwap',\n                        type: 'bool',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'shouldCallAfterSwap',\n                        type: 'bool',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'shouldCallBeforeAddLiquidity',\n                        type: 'bool',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'shouldCallAfterAddLiquidity',\n                        type: 'bool',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'shouldCallBeforeRemoveLiquidity',\n                        type: 'bool',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'shouldCallAfterRemoveLiquidity',\n                        type: 'bool',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'hooksContract',\n                        type: 'address',\n                    },\n                ],\n                indexed: false,\n                internalType: 'struct HooksConfig',\n                name: 'hooksConfig',\n                type: 'tuple',\n            },\n            {\n                components: [\n                    {\n                        internalType: 'bool',\n                        name: 'disableUnbalancedLiquidity',\n                        type: 'bool',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'enableAddLiquidityCustom',\n                        type: 'bool',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'enableRemoveLiquidityCustom',\n                        type: 'bool',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'enableDonation',\n                        type: 'bool',\n                    },\n                ],\n                indexed: false,\n                internalType: 'struct LiquidityManagement',\n                name: 'liquidityManagement',\n                type: 'tuple',\n            },\n        ],\n        name: 'PoolRegistered',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'contract IProtocolFeeController',\n                name: 'newProtocolFeeController',\n                type: 'address',\n            },\n        ],\n        name: 'ProtocolFeeControllerChanged',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'pool',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'contract IERC20',\n                name: 'tokenIn',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'contract IERC20',\n                name: 'tokenOut',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'amountIn',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'amountOut',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'swapFeePercentage',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'swapFeeAmount',\n                type: 'uint256',\n            },\n        ],\n        name: 'Swap',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'pool',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'swapFeePercentage',\n                type: 'uint256',\n            },\n        ],\n        name: 'SwapFeePercentageChanged',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'pool',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'from',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'value',\n                type: 'uint256',\n            },\n        ],\n        name: 'Transfer',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'contract IERC4626',\n                name: 'wrappedToken',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'burnedShares',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'withdrawnUnderlying',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'bytes32',\n                name: 'bufferBalances',\n                type: 'bytes32',\n            },\n        ],\n        name: 'Unwrap',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'pool',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'bytes32',\n                name: 'eventKey',\n                type: 'bytes32',\n            },\n            {\n                indexed: false,\n                internalType: 'bytes',\n                name: 'eventData',\n                type: 'bytes',\n            },\n        ],\n        name: 'VaultAuxiliary',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'bool',\n                name: 'paused',\n                type: 'bool',\n            },\n        ],\n        name: 'VaultBuffersPausedStateChanged',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'bool',\n                name: 'paused',\n                type: 'bool',\n            },\n        ],\n        name: 'VaultPausedStateChanged',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [],\n        name: 'VaultQueriesDisabled',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [],\n        name: 'VaultQueriesEnabled',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'contract IERC4626',\n                name: 'wrappedToken',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'depositedUnderlying',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'mintedShares',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'bytes32',\n                name: 'bufferBalances',\n                type: 'bytes32',\n            },\n        ],\n        name: 'Wrap',\n        type: 'event',\n    },\n    { stateMutability: 'payable', type: 'fallback' },\n    {\n        inputs: [\n            {\n                components: [\n                    { internalType: 'address', name: 'pool', type: 'address' },\n                    { internalType: 'address', name: 'to', type: 'address' },\n                    {\n                        internalType: 'uint256[]',\n                        name: 'maxAmountsIn',\n                        type: 'uint256[]',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'minBptAmountOut',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'enum AddLiquidityKind',\n                        name: 'kind',\n                        type: 'uint8',\n                    },\n                    { internalType: 'bytes', name: 'userData', type: 'bytes' },\n                ],\n                internalType: 'struct AddLiquidityParams',\n                name: 'params',\n                type: 'tuple',\n            },\n        ],\n        name: 'addLiquidity',\n        outputs: [\n            { internalType: 'uint256[]', name: 'amountsIn', type: 'uint256[]' },\n            { internalType: 'uint256', name: 'bptAmountOut', type: 'uint256' },\n            { internalType: 'bytes', name: 'returnData', type: 'bytes' },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'enum SwapKind',\n                        name: 'kind',\n                        type: 'uint8',\n                    },\n                    {\n                        internalType: 'enum WrappingDirection',\n                        name: 'direction',\n                        type: 'uint8',\n                    },\n                    {\n                        internalType: 'contract IERC4626',\n                        name: 'wrappedToken',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'amountGivenRaw',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'limitRaw',\n                        type: 'uint256',\n                    },\n                ],\n                internalType: 'struct BufferWrapOrUnwrapParams',\n                name: 'params',\n                type: 'tuple',\n            },\n        ],\n        name: 'erc4626BufferWrapOrUnwrap',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountCalculatedRaw',\n                type: 'uint256',\n            },\n            { internalType: 'uint256', name: 'amountInRaw', type: 'uint256' },\n            { internalType: 'uint256', name: 'amountOutRaw', type: 'uint256' },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'pool', type: 'address' },\n            { internalType: 'contract IERC20', name: 'token', type: 'address' },\n        ],\n        name: 'getPoolTokenCountAndIndexOfToken',\n        outputs: [\n            { internalType: 'uint256', name: '', type: 'uint256' },\n            { internalType: 'uint256', name: '', type: 'uint256' },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getVaultExtension',\n        outputs: [{ internalType: 'address', name: '', type: 'address' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'reentrancyGuardEntered',\n        outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    { internalType: 'address', name: 'pool', type: 'address' },\n                    { internalType: 'address', name: 'from', type: 'address' },\n                    {\n                        internalType: 'uint256',\n                        name: 'maxBptAmountIn',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint256[]',\n                        name: 'minAmountsOut',\n                        type: 'uint256[]',\n                    },\n                    {\n                        internalType: 'enum RemoveLiquidityKind',\n                        name: 'kind',\n                        type: 'uint8',\n                    },\n                    { internalType: 'bytes', name: 'userData', type: 'bytes' },\n                ],\n                internalType: 'struct RemoveLiquidityParams',\n                name: 'params',\n                type: 'tuple',\n            },\n        ],\n        name: 'removeLiquidity',\n        outputs: [\n            { internalType: 'uint256', name: 'bptAmountIn', type: 'uint256' },\n            {\n                internalType: 'uint256[]',\n                name: 'amountsOut',\n                type: 'uint256[]',\n            },\n            { internalType: 'bytes', name: 'returnData', type: 'bytes' },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'contract IERC20', name: 'token', type: 'address' },\n            { internalType: 'address', name: 'to', type: 'address' },\n            { internalType: 'uint256', name: 'amount', type: 'uint256' },\n        ],\n        name: 'sendTo',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'contract IERC20', name: 'token', type: 'address' },\n            { internalType: 'uint256', name: 'amountHint', type: 'uint256' },\n        ],\n        name: 'settle',\n        outputs: [{ internalType: 'uint256', name: 'credit', type: 'uint256' }],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'enum SwapKind',\n                        name: 'kind',\n                        type: 'uint8',\n                    },\n                    { internalType: 'address', name: 'pool', type: 'address' },\n                    {\n                        internalType: 'contract IERC20',\n                        name: 'tokenIn',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'contract IERC20',\n                        name: 'tokenOut',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'amountGivenRaw',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'limitRaw',\n                        type: 'uint256',\n                    },\n                    { internalType: 'bytes', name: 'userData', type: 'bytes' },\n                ],\n                internalType: 'struct VaultSwapParams',\n                name: 'vaultSwapParams',\n                type: 'tuple',\n            },\n        ],\n        name: 'swap',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountCalculated',\n                type: 'uint256',\n            },\n            { internalType: 'uint256', name: 'amountIn', type: 'uint256' },\n            { internalType: 'uint256', name: 'amountOut', type: 'uint256' },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'owner', type: 'address' },\n            { internalType: 'address', name: 'to', type: 'address' },\n            { internalType: 'uint256', name: 'amount', type: 'uint256' },\n        ],\n        name: 'transfer',\n        outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'spender', type: 'address' },\n            { internalType: 'address', name: 'from', type: 'address' },\n            { internalType: 'address', name: 'to', type: 'address' },\n            { internalType: 'uint256', name: 'amount', type: 'uint256' },\n        ],\n        name: 'transferFrom',\n        outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [{ internalType: 'bytes', name: 'data', type: 'bytes' }],\n        name: 'unlock',\n        outputs: [{ internalType: 'bytes', name: 'result', type: 'bytes' }],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    { stateMutability: 'payable', type: 'receive' },\n] as const;\n","export const vaultExtensionAbi_V3 = [\n    {\n        inputs: [\n            {\n                internalType: 'contract IVault',\n                name: 'mainVault',\n                type: 'address',\n            },\n            {\n                internalType: 'contract IVaultAdmin',\n                name: 'vaultAdmin',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'constructor',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'target', type: 'address' }],\n        name: 'AddressEmptyCode',\n        type: 'error',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'account', type: 'address' }],\n        name: 'AddressInsufficientBalance',\n        type: 'error',\n    },\n    { inputs: [], name: 'AfterAddLiquidityHookFailed', type: 'error' },\n    { inputs: [], name: 'AfterInitializeHookFailed', type: 'error' },\n    { inputs: [], name: 'AfterRemoveLiquidityHookFailed', type: 'error' },\n    { inputs: [], name: 'AfterSwapHookFailed', type: 'error' },\n    { inputs: [], name: 'AmountGivenZero', type: 'error' },\n    {\n        inputs: [\n            {\n                internalType: 'contract IERC20',\n                name: 'tokenIn',\n                type: 'address',\n            },\n            { internalType: 'uint256', name: 'amountIn', type: 'uint256' },\n            { internalType: 'uint256', name: 'maxAmountIn', type: 'uint256' },\n        ],\n        name: 'AmountInAboveMax',\n        type: 'error',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IERC20',\n                name: 'tokenOut',\n                type: 'address',\n            },\n            { internalType: 'uint256', name: 'amountOut', type: 'uint256' },\n            { internalType: 'uint256', name: 'minAmountOut', type: 'uint256' },\n        ],\n        name: 'AmountOutBelowMin',\n        type: 'error',\n    },\n    { inputs: [], name: 'BalanceNotSettled', type: 'error' },\n    { inputs: [], name: 'BalanceOverflow', type: 'error' },\n    { inputs: [], name: 'BeforeAddLiquidityHookFailed', type: 'error' },\n    { inputs: [], name: 'BeforeInitializeHookFailed', type: 'error' },\n    { inputs: [], name: 'BeforeRemoveLiquidityHookFailed', type: 'error' },\n    { inputs: [], name: 'BeforeSwapHookFailed', type: 'error' },\n    {\n        inputs: [\n            { internalType: 'uint256', name: 'amountIn', type: 'uint256' },\n            { internalType: 'uint256', name: 'maxAmountIn', type: 'uint256' },\n        ],\n        name: 'BptAmountInAboveMax',\n        type: 'error',\n    },\n    {\n        inputs: [\n            { internalType: 'uint256', name: 'amountOut', type: 'uint256' },\n            { internalType: 'uint256', name: 'minAmountOut', type: 'uint256' },\n        ],\n        name: 'BptAmountOutBelowMin',\n        type: 'error',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IERC4626',\n                name: 'wrappedToken',\n                type: 'address',\n            },\n        ],\n        name: 'BufferAlreadyInitialized',\n        type: 'error',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IERC4626',\n                name: 'wrappedToken',\n                type: 'address',\n            },\n        ],\n        name: 'BufferNotInitialized',\n        type: 'error',\n    },\n    { inputs: [], name: 'BufferSharesInvalidOwner', type: 'error' },\n    { inputs: [], name: 'BufferSharesInvalidReceiver', type: 'error' },\n    {\n        inputs: [\n            { internalType: 'uint256', name: 'totalSupply', type: 'uint256' },\n        ],\n        name: 'BufferTotalSupplyTooLow',\n        type: 'error',\n    },\n    { inputs: [], name: 'CannotReceiveEth', type: 'error' },\n    { inputs: [], name: 'CannotSwapSameToken', type: 'error' },\n    { inputs: [], name: 'CodecOverflow', type: 'error' },\n    { inputs: [], name: 'DoesNotSupportAddLiquidityCustom', type: 'error' },\n    { inputs: [], name: 'DoesNotSupportDonation', type: 'error' },\n    { inputs: [], name: 'DoesNotSupportRemoveLiquidityCustom', type: 'error' },\n    { inputs: [], name: 'DoesNotSupportUnbalancedLiquidity', type: 'error' },\n    { inputs: [], name: 'DynamicSwapFeeHookFailed', type: 'error' },\n    {\n        inputs: [\n            { internalType: 'address', name: 'spender', type: 'address' },\n            { internalType: 'uint256', name: 'allowance', type: 'uint256' },\n            { internalType: 'uint256', name: 'needed', type: 'uint256' },\n        ],\n        name: 'ERC20InsufficientAllowance',\n        type: 'error',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'sender', type: 'address' },\n            { internalType: 'uint256', name: 'balance', type: 'uint256' },\n            { internalType: 'uint256', name: 'needed', type: 'uint256' },\n        ],\n        name: 'ERC20InsufficientBalance',\n        type: 'error',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'approver', type: 'address' },\n        ],\n        name: 'ERC20InvalidApprover',\n        type: 'error',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'receiver', type: 'address' },\n        ],\n        name: 'ERC20InvalidReceiver',\n        type: 'error',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'sender', type: 'address' }],\n        name: 'ERC20InvalidSender',\n        type: 'error',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'spender', type: 'address' }],\n        name: 'ERC20InvalidSpender',\n        type: 'error',\n    },\n    { inputs: [], name: 'ErrorSelectorNotFound', type: 'error' },\n    { inputs: [], name: 'FailedInnerCall', type: 'error' },\n    { inputs: [], name: 'FeePrecisionTooHigh', type: 'error' },\n    {\n        inputs: [\n            {\n                internalType: 'contract IERC20',\n                name: 'tokenIn',\n                type: 'address',\n            },\n            { internalType: 'uint256', name: 'amountIn', type: 'uint256' },\n            { internalType: 'uint256', name: 'maxAmountIn', type: 'uint256' },\n        ],\n        name: 'HookAdjustedAmountInAboveMax',\n        type: 'error',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IERC20',\n                name: 'tokenOut',\n                type: 'address',\n            },\n            { internalType: 'uint256', name: 'amountOut', type: 'uint256' },\n            { internalType: 'uint256', name: 'minAmountOut', type: 'uint256' },\n        ],\n        name: 'HookAdjustedAmountOutBelowMin',\n        type: 'error',\n    },\n    {\n        inputs: [\n            { internalType: 'uint256', name: 'amount', type: 'uint256' },\n            { internalType: 'uint256', name: 'limit', type: 'uint256' },\n        ],\n        name: 'HookAdjustedSwapLimit',\n        type: 'error',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'poolHooksContract',\n                type: 'address',\n            },\n            { internalType: 'address', name: 'pool', type: 'address' },\n            { internalType: 'address', name: 'poolFactory', type: 'address' },\n        ],\n        name: 'HookRegistrationFailed',\n        type: 'error',\n    },\n    { inputs: [], name: 'InputLengthMismatch', type: 'error' },\n    { inputs: [], name: 'InvalidAddLiquidityKind', type: 'error' },\n    { inputs: [], name: 'InvalidRemoveLiquidityKind', type: 'error' },\n    { inputs: [], name: 'InvalidToken', type: 'error' },\n    { inputs: [], name: 'InvalidTokenConfiguration', type: 'error' },\n    { inputs: [], name: 'InvalidTokenDecimals', type: 'error' },\n    { inputs: [], name: 'InvalidTokenType', type: 'error' },\n    {\n        inputs: [\n            {\n                internalType: 'contract IERC4626',\n                name: 'wrappedToken',\n                type: 'address',\n            },\n        ],\n        name: 'InvalidUnderlyingToken',\n        type: 'error',\n    },\n    {\n        inputs: [\n            { internalType: 'uint256', name: 'issuedShares', type: 'uint256' },\n            {\n                internalType: 'uint256',\n                name: 'minIssuedShares',\n                type: 'uint256',\n            },\n        ],\n        name: 'IssuedSharesBelowMin',\n        type: 'error',\n    },\n    { inputs: [], name: 'MaxTokens', type: 'error' },\n    { inputs: [], name: 'MinTokens', type: 'error' },\n    { inputs: [], name: 'NotEnoughBufferShares', type: 'error' },\n    {\n        inputs: [\n            {\n                internalType: 'contract IERC4626',\n                name: 'wrappedToken',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'expectedUnderlyingAmount',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'actualUnderlyingAmount',\n                type: 'uint256',\n            },\n        ],\n        name: 'NotEnoughUnderlying',\n        type: 'error',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IERC4626',\n                name: 'wrappedToken',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'expectedWrappedAmount',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'actualWrappedAmount',\n                type: 'uint256',\n            },\n        ],\n        name: 'NotEnoughWrapped',\n        type: 'error',\n    },\n    { inputs: [], name: 'NotStaticCall', type: 'error' },\n    { inputs: [], name: 'NotVaultDelegateCall', type: 'error' },\n    { inputs: [], name: 'OutOfBounds', type: 'error' },\n    { inputs: [], name: 'PauseBufferPeriodDurationTooLarge', type: 'error' },\n    { inputs: [], name: 'PercentageAboveMax', type: 'error' },\n    {\n        inputs: [{ internalType: 'address', name: 'pool', type: 'address' }],\n        name: 'PoolAlreadyInitialized',\n        type: 'error',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'pool', type: 'address' }],\n        name: 'PoolAlreadyRegistered',\n        type: 'error',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'pool', type: 'address' }],\n        name: 'PoolInRecoveryMode',\n        type: 'error',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'pool', type: 'address' }],\n        name: 'PoolNotInRecoveryMode',\n        type: 'error',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'pool', type: 'address' }],\n        name: 'PoolNotInitialized',\n        type: 'error',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'pool', type: 'address' }],\n        name: 'PoolNotPaused',\n        type: 'error',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'pool', type: 'address' }],\n        name: 'PoolNotRegistered',\n        type: 'error',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'pool', type: 'address' }],\n        name: 'PoolPauseWindowExpired',\n        type: 'error',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'pool', type: 'address' }],\n        name: 'PoolPaused',\n        type: 'error',\n    },\n    {\n        inputs: [\n            { internalType: 'uint256', name: 'totalSupply', type: 'uint256' },\n        ],\n        name: 'PoolTotalSupplyTooLow',\n        type: 'error',\n    },\n    { inputs: [], name: 'ProtocolFeesExceedTotalCollected', type: 'error' },\n    { inputs: [], name: 'QueriesDisabled', type: 'error' },\n    { inputs: [], name: 'QueriesDisabledPermanently', type: 'error' },\n    { inputs: [], name: 'QuoteResultSpoofed', type: 'error' },\n    { inputs: [], name: 'ReentrancyGuardReentrantCall', type: 'error' },\n    {\n        inputs: [{ internalType: 'bytes', name: 'result', type: 'bytes' }],\n        name: 'Result',\n        type: 'error',\n    },\n    { inputs: [], name: 'RouterNotTrusted', type: 'error' },\n    {\n        inputs: [{ internalType: 'uint256', name: 'value', type: 'uint256' }],\n        name: 'SafeCastOverflowedUintToInt',\n        type: 'error',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'sender', type: 'address' }],\n        name: 'SenderIsNotVault',\n        type: 'error',\n    },\n    { inputs: [], name: 'SwapFeePercentageTooHigh', type: 'error' },\n    { inputs: [], name: 'SwapFeePercentageTooLow', type: 'error' },\n    {\n        inputs: [\n            { internalType: 'uint256', name: 'amount', type: 'uint256' },\n            { internalType: 'uint256', name: 'limit', type: 'uint256' },\n        ],\n        name: 'SwapLimit',\n        type: 'error',\n    },\n    {\n        inputs: [\n            { internalType: 'contract IERC20', name: 'token', type: 'address' },\n        ],\n        name: 'TokenAlreadyRegistered',\n        type: 'error',\n    },\n    {\n        inputs: [\n            { internalType: 'contract IERC20', name: 'token', type: 'address' },\n        ],\n        name: 'TokenNotRegistered',\n        type: 'error',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'pool', type: 'address' },\n            { internalType: 'address', name: 'expectedToken', type: 'address' },\n            { internalType: 'address', name: 'actualToken', type: 'address' },\n        ],\n        name: 'TokensMismatch',\n        type: 'error',\n    },\n    { inputs: [], name: 'TokensNotSorted', type: 'error' },\n    { inputs: [], name: 'TradeAmountTooSmall', type: 'error' },\n    { inputs: [], name: 'VaultBuffersArePaused', type: 'error' },\n    { inputs: [], name: 'VaultIsNotUnlocked', type: 'error' },\n    { inputs: [], name: 'VaultNotPaused', type: 'error' },\n    { inputs: [], name: 'VaultPauseWindowDurationTooLarge', type: 'error' },\n    { inputs: [], name: 'VaultPauseWindowExpired', type: 'error' },\n    { inputs: [], name: 'VaultPaused', type: 'error' },\n    {\n        inputs: [\n            {\n                internalType: 'contract IERC4626',\n                name: 'wrappedToken',\n                type: 'address',\n            },\n        ],\n        name: 'WrapAmountTooSmall',\n        type: 'error',\n    },\n    { inputs: [], name: 'WrongProtocolFeeControllerDeployment', type: 'error' },\n    {\n        inputs: [\n            {\n                internalType: 'contract IERC4626',\n                name: 'wrappedToken',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'underlyingToken',\n                type: 'address',\n            },\n        ],\n        name: 'WrongUnderlyingToken',\n        type: 'error',\n    },\n    { inputs: [], name: 'WrongVaultAdminDeployment', type: 'error' },\n    { inputs: [], name: 'WrongVaultExtensionDeployment', type: 'error' },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'pool',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'aggregateSwapFeePercentage',\n                type: 'uint256',\n            },\n        ],\n        name: 'AggregateSwapFeePercentageChanged',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'pool',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'aggregateYieldFeePercentage',\n                type: 'uint256',\n            },\n        ],\n        name: 'AggregateYieldFeePercentageChanged',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'pool',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'owner',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'spender',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'value',\n                type: 'uint256',\n            },\n        ],\n        name: 'Approval',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'contract IAuthorizer',\n                name: 'newAuthorizer',\n                type: 'address',\n            },\n        ],\n        name: 'AuthorizerChanged',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'contract IERC4626',\n                name: 'wrappedToken',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'from',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'burnedShares',\n                type: 'uint256',\n            },\n        ],\n        name: 'BufferSharesBurned',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'contract IERC4626',\n                name: 'wrappedToken',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'issuedShares',\n                type: 'uint256',\n            },\n        ],\n        name: 'BufferSharesMinted',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'pool',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'liquidityProvider',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'enum AddLiquidityKind',\n                name: 'kind',\n                type: 'uint8',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'totalSupply',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256[]',\n                name: 'amountsAddedRaw',\n                type: 'uint256[]',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256[]',\n                name: 'swapFeeAmountsRaw',\n                type: 'uint256[]',\n            },\n        ],\n        name: 'LiquidityAdded',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'contract IERC4626',\n                name: 'wrappedToken',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'amountUnderlying',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'amountWrapped',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'bytes32',\n                name: 'bufferBalances',\n                type: 'bytes32',\n            },\n        ],\n        name: 'LiquidityAddedToBuffer',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'pool',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'liquidityProvider',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'enum RemoveLiquidityKind',\n                name: 'kind',\n                type: 'uint8',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'totalSupply',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256[]',\n                name: 'amountsRemovedRaw',\n                type: 'uint256[]',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256[]',\n                name: 'swapFeeAmountsRaw',\n                type: 'uint256[]',\n            },\n        ],\n        name: 'LiquidityRemoved',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'contract IERC4626',\n                name: 'wrappedToken',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'amountUnderlying',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'amountWrapped',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'bytes32',\n                name: 'bufferBalances',\n                type: 'bytes32',\n            },\n        ],\n        name: 'LiquidityRemovedFromBuffer',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'pool',\n                type: 'address',\n            },\n        ],\n        name: 'PoolInitialized',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'pool',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'bool',\n                name: 'paused',\n                type: 'bool',\n            },\n        ],\n        name: 'PoolPausedStateChanged',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'pool',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'bool',\n                name: 'recoveryMode',\n                type: 'bool',\n            },\n        ],\n        name: 'PoolRecoveryModeStateChanged',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'pool',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'factory',\n                type: 'address',\n            },\n            {\n                components: [\n                    {\n                        internalType: 'contract IERC20',\n                        name: 'token',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'enum TokenType',\n                        name: 'tokenType',\n                        type: 'uint8',\n                    },\n                    {\n                        internalType: 'contract IRateProvider',\n                        name: 'rateProvider',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'paysYieldFees',\n                        type: 'bool',\n                    },\n                ],\n                indexed: false,\n                internalType: 'struct TokenConfig[]',\n                name: 'tokenConfig',\n                type: 'tuple[]',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'swapFeePercentage',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'uint32',\n                name: 'pauseWindowEndTime',\n                type: 'uint32',\n            },\n            {\n                components: [\n                    {\n                        internalType: 'address',\n                        name: 'pauseManager',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'swapFeeManager',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'poolCreator',\n                        type: 'address',\n                    },\n                ],\n                indexed: false,\n                internalType: 'struct PoolRoleAccounts',\n                name: 'roleAccounts',\n                type: 'tuple',\n            },\n            {\n                components: [\n                    {\n                        internalType: 'bool',\n                        name: 'enableHookAdjustedAmounts',\n                        type: 'bool',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'shouldCallBeforeInitialize',\n                        type: 'bool',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'shouldCallAfterInitialize',\n                        type: 'bool',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'shouldCallComputeDynamicSwapFee',\n                        type: 'bool',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'shouldCallBeforeSwap',\n                        type: 'bool',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'shouldCallAfterSwap',\n                        type: 'bool',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'shouldCallBeforeAddLiquidity',\n                        type: 'bool',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'shouldCallAfterAddLiquidity',\n                        type: 'bool',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'shouldCallBeforeRemoveLiquidity',\n                        type: 'bool',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'shouldCallAfterRemoveLiquidity',\n                        type: 'bool',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'hooksContract',\n                        type: 'address',\n                    },\n                ],\n                indexed: false,\n                internalType: 'struct HooksConfig',\n                name: 'hooksConfig',\n                type: 'tuple',\n            },\n            {\n                components: [\n                    {\n                        internalType: 'bool',\n                        name: 'disableUnbalancedLiquidity',\n                        type: 'bool',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'enableAddLiquidityCustom',\n                        type: 'bool',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'enableRemoveLiquidityCustom',\n                        type: 'bool',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'enableDonation',\n                        type: 'bool',\n                    },\n                ],\n                indexed: false,\n                internalType: 'struct LiquidityManagement',\n                name: 'liquidityManagement',\n                type: 'tuple',\n            },\n        ],\n        name: 'PoolRegistered',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'contract IProtocolFeeController',\n                name: 'newProtocolFeeController',\n                type: 'address',\n            },\n        ],\n        name: 'ProtocolFeeControllerChanged',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'pool',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'contract IERC20',\n                name: 'tokenIn',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'contract IERC20',\n                name: 'tokenOut',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'amountIn',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'amountOut',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'swapFeePercentage',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'swapFeeAmount',\n                type: 'uint256',\n            },\n        ],\n        name: 'Swap',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'pool',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'swapFeePercentage',\n                type: 'uint256',\n            },\n        ],\n        name: 'SwapFeePercentageChanged',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'pool',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'from',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'value',\n                type: 'uint256',\n            },\n        ],\n        name: 'Transfer',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'contract IERC4626',\n                name: 'wrappedToken',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'burnedShares',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'withdrawnUnderlying',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'bytes32',\n                name: 'bufferBalances',\n                type: 'bytes32',\n            },\n        ],\n        name: 'Unwrap',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'pool',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'bytes32',\n                name: 'eventKey',\n                type: 'bytes32',\n            },\n            {\n                indexed: false,\n                internalType: 'bytes',\n                name: 'eventData',\n                type: 'bytes',\n            },\n        ],\n        name: 'VaultAuxiliary',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'bool',\n                name: 'paused',\n                type: 'bool',\n            },\n        ],\n        name: 'VaultBuffersPausedStateChanged',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'bool',\n                name: 'paused',\n                type: 'bool',\n            },\n        ],\n        name: 'VaultPausedStateChanged',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [],\n        name: 'VaultQueriesDisabled',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [],\n        name: 'VaultQueriesEnabled',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'contract IERC4626',\n                name: 'wrappedToken',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'depositedUnderlying',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'mintedShares',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'bytes32',\n                name: 'bufferBalances',\n                type: 'bytes32',\n            },\n        ],\n        name: 'Wrap',\n        type: 'event',\n    },\n    { stateMutability: 'payable', type: 'fallback' },\n    {\n        inputs: [\n            { internalType: 'address', name: 'token', type: 'address' },\n            { internalType: 'address', name: 'owner', type: 'address' },\n            { internalType: 'address', name: 'spender', type: 'address' },\n        ],\n        name: 'allowance',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'owner', type: 'address' },\n            { internalType: 'address', name: 'spender', type: 'address' },\n            { internalType: 'uint256', name: 'amount', type: 'uint256' },\n        ],\n        name: 'approve',\n        outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'token', type: 'address' },\n            { internalType: 'address', name: 'account', type: 'address' },\n        ],\n        name: 'balanceOf',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'pool', type: 'address' },\n            {\n                components: [\n                    {\n                        internalType: 'enum SwapKind',\n                        name: 'kind',\n                        type: 'uint8',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'amountGivenScaled18',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint256[]',\n                        name: 'balancesScaled18',\n                        type: 'uint256[]',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'indexIn',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'indexOut',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'router',\n                        type: 'address',\n                    },\n                    { internalType: 'bytes', name: 'userData', type: 'bytes' },\n                ],\n                internalType: 'struct PoolSwapParams',\n                name: 'swapParams',\n                type: 'tuple',\n            },\n        ],\n        name: 'computeDynamicSwapFeePercentage',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'dynamicSwapFeePercentage',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'bytes32', name: 'eventKey', type: 'bytes32' },\n            { internalType: 'bytes', name: 'eventData', type: 'bytes' },\n        ],\n        name: 'emitAuxiliaryEvent',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'pool', type: 'address' }],\n        name: 'getAddLiquidityCalledFlag',\n        outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'pool', type: 'address' },\n            { internalType: 'contract IERC20', name: 'token', type: 'address' },\n        ],\n        name: 'getAggregateSwapFeeAmount',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'pool', type: 'address' },\n            { internalType: 'contract IERC20', name: 'token', type: 'address' },\n        ],\n        name: 'getAggregateYieldFeeAmount',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getAuthorizer',\n        outputs: [\n            { internalType: 'contract IAuthorizer', name: '', type: 'address' },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'pool', type: 'address' }],\n        name: 'getBptRate',\n        outputs: [{ internalType: 'uint256', name: 'rate', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'pool', type: 'address' }],\n        name: 'getCurrentLiveBalances',\n        outputs: [\n            {\n                internalType: 'uint256[]',\n                name: 'balancesLiveScaled18',\n                type: 'uint256[]',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IERC4626',\n                name: 'wrappedToken',\n                type: 'address',\n            },\n        ],\n        name: 'getERC4626BufferAsset',\n        outputs: [{ internalType: 'address', name: 'asset', type: 'address' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'pool', type: 'address' }],\n        name: 'getHooksConfig',\n        outputs: [\n            {\n                components: [\n                    {\n                        internalType: 'bool',\n                        name: 'enableHookAdjustedAmounts',\n                        type: 'bool',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'shouldCallBeforeInitialize',\n                        type: 'bool',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'shouldCallAfterInitialize',\n                        type: 'bool',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'shouldCallComputeDynamicSwapFee',\n                        type: 'bool',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'shouldCallBeforeSwap',\n                        type: 'bool',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'shouldCallAfterSwap',\n                        type: 'bool',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'shouldCallBeforeAddLiquidity',\n                        type: 'bool',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'shouldCallAfterAddLiquidity',\n                        type: 'bool',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'shouldCallBeforeRemoveLiquidity',\n                        type: 'bool',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'shouldCallAfterRemoveLiquidity',\n                        type: 'bool',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'hooksContract',\n                        type: 'address',\n                    },\n                ],\n                internalType: 'struct HooksConfig',\n                name: '',\n                type: 'tuple',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getNonzeroDeltaCount',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'pool', type: 'address' }],\n        name: 'getPoolConfig',\n        outputs: [\n            {\n                components: [\n                    {\n                        components: [\n                            {\n                                internalType: 'bool',\n                                name: 'disableUnbalancedLiquidity',\n                                type: 'bool',\n                            },\n                            {\n                                internalType: 'bool',\n                                name: 'enableAddLiquidityCustom',\n                                type: 'bool',\n                            },\n                            {\n                                internalType: 'bool',\n                                name: 'enableRemoveLiquidityCustom',\n                                type: 'bool',\n                            },\n                            {\n                                internalType: 'bool',\n                                name: 'enableDonation',\n                                type: 'bool',\n                            },\n                        ],\n                        internalType: 'struct LiquidityManagement',\n                        name: 'liquidityManagement',\n                        type: 'tuple',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'staticSwapFeePercentage',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'aggregateSwapFeePercentage',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'aggregateYieldFeePercentage',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint40',\n                        name: 'tokenDecimalDiffs',\n                        type: 'uint40',\n                    },\n                    {\n                        internalType: 'uint32',\n                        name: 'pauseWindowEndTime',\n                        type: 'uint32',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'isPoolRegistered',\n                        type: 'bool',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'isPoolInitialized',\n                        type: 'bool',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'isPoolPaused',\n                        type: 'bool',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'isPoolInRecoveryMode',\n                        type: 'bool',\n                    },\n                ],\n                internalType: 'struct PoolConfig',\n                name: '',\n                type: 'tuple',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'pool', type: 'address' }],\n        name: 'getPoolData',\n        outputs: [\n            {\n                components: [\n                    {\n                        internalType: 'PoolConfigBits',\n                        name: 'poolConfigBits',\n                        type: 'bytes32',\n                    },\n                    {\n                        internalType: 'contract IERC20[]',\n                        name: 'tokens',\n                        type: 'address[]',\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: 'enum TokenType',\n                                name: 'tokenType',\n                                type: 'uint8',\n                            },\n                            {\n                                internalType: 'contract IRateProvider',\n                                name: 'rateProvider',\n                                type: 'address',\n                            },\n                            {\n                                internalType: 'bool',\n                                name: 'paysYieldFees',\n                                type: 'bool',\n                            },\n                        ],\n                        internalType: 'struct TokenInfo[]',\n                        name: 'tokenInfo',\n                        type: 'tuple[]',\n                    },\n                    {\n                        internalType: 'uint256[]',\n                        name: 'balancesRaw',\n                        type: 'uint256[]',\n                    },\n                    {\n                        internalType: 'uint256[]',\n                        name: 'balancesLiveScaled18',\n                        type: 'uint256[]',\n                    },\n                    {\n                        internalType: 'uint256[]',\n                        name: 'tokenRates',\n                        type: 'uint256[]',\n                    },\n                    {\n                        internalType: 'uint256[]',\n                        name: 'decimalScalingFactors',\n                        type: 'uint256[]',\n                    },\n                ],\n                internalType: 'struct PoolData',\n                name: '',\n                type: 'tuple',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'pool', type: 'address' }],\n        name: 'getPoolPausedState',\n        outputs: [\n            { internalType: 'bool', name: '', type: 'bool' },\n            { internalType: 'uint32', name: '', type: 'uint32' },\n            { internalType: 'uint32', name: '', type: 'uint32' },\n            { internalType: 'address', name: '', type: 'address' },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'pool', type: 'address' }],\n        name: 'getPoolRoleAccounts',\n        outputs: [\n            {\n                components: [\n                    {\n                        internalType: 'address',\n                        name: 'pauseManager',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'swapFeeManager',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'poolCreator',\n                        type: 'address',\n                    },\n                ],\n                internalType: 'struct PoolRoleAccounts',\n                name: '',\n                type: 'tuple',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'pool', type: 'address' }],\n        name: 'getPoolTokenInfo',\n        outputs: [\n            {\n                internalType: 'contract IERC20[]',\n                name: 'tokens',\n                type: 'address[]',\n            },\n            {\n                components: [\n                    {\n                        internalType: 'enum TokenType',\n                        name: 'tokenType',\n                        type: 'uint8',\n                    },\n                    {\n                        internalType: 'contract IRateProvider',\n                        name: 'rateProvider',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'paysYieldFees',\n                        type: 'bool',\n                    },\n                ],\n                internalType: 'struct TokenInfo[]',\n                name: 'tokenInfo',\n                type: 'tuple[]',\n            },\n            {\n                internalType: 'uint256[]',\n                name: 'balancesRaw',\n                type: 'uint256[]',\n            },\n            {\n                internalType: 'uint256[]',\n                name: 'lastBalancesLiveScaled18',\n                type: 'uint256[]',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'pool', type: 'address' }],\n        name: 'getPoolTokenRates',\n        outputs: [\n            {\n                internalType: 'uint256[]',\n                name: 'decimalScalingFactors',\n                type: 'uint256[]',\n            },\n            {\n                internalType: 'uint256[]',\n                name: 'tokenRates',\n                type: 'uint256[]',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'pool', type: 'address' }],\n        name: 'getPoolTokens',\n        outputs: [\n            {\n                internalType: 'contract IERC20[]',\n                name: 'tokens',\n                type: 'address[]',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getProtocolFeeController',\n        outputs: [\n            {\n                internalType: 'contract IProtocolFeeController',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'contract IERC20', name: 'token', type: 'address' },\n        ],\n        name: 'getReservesOf',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'pool', type: 'address' }],\n        name: 'getStaticSwapFeePercentage',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'contract IERC20', name: 'token', type: 'address' },\n        ],\n        name: 'getTokenDelta',\n        outputs: [{ internalType: 'int256', name: '', type: 'int256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getVaultAdmin',\n        outputs: [{ internalType: 'address', name: '', type: 'address' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'pool', type: 'address' },\n            { internalType: 'address', name: 'to', type: 'address' },\n            {\n                internalType: 'contract IERC20[]',\n                name: 'tokens',\n                type: 'address[]',\n            },\n            {\n                internalType: 'uint256[]',\n                name: 'exactAmountsIn',\n                type: 'uint256[]',\n            },\n            {\n                internalType: 'uint256',\n                name: 'minBptAmountOut',\n                type: 'uint256',\n            },\n            { internalType: 'bytes', name: 'userData', type: 'bytes' },\n        ],\n        name: 'initialize',\n        outputs: [\n            { internalType: 'uint256', name: 'bptAmountOut', type: 'uint256' },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IERC4626',\n                name: 'wrappedToken',\n                type: 'address',\n            },\n        ],\n        name: 'isERC4626BufferInitialized',\n        outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'pool', type: 'address' }],\n        name: 'isPoolInRecoveryMode',\n        outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'pool', type: 'address' }],\n        name: 'isPoolInitialized',\n        outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'pool', type: 'address' }],\n        name: 'isPoolPaused',\n        outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'pool', type: 'address' }],\n        name: 'isPoolRegistered',\n        outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'isQueryDisabled',\n        outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'isQueryDisabledPermanently',\n        outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'isUnlocked',\n        outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [{ internalType: 'bytes', name: 'data', type: 'bytes' }],\n        name: 'quote',\n        outputs: [{ internalType: 'bytes', name: 'result', type: 'bytes' }],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [{ internalType: 'bytes', name: 'data', type: 'bytes' }],\n        name: 'quoteAndRevert',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'reentrancyGuardEntered',\n        outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'pool', type: 'address' },\n            {\n                components: [\n                    {\n                        internalType: 'contract IERC20',\n                        name: 'token',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'enum TokenType',\n                        name: 'tokenType',\n                        type: 'uint8',\n                    },\n                    {\n                        internalType: 'contract IRateProvider',\n                        name: 'rateProvider',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'paysYieldFees',\n                        type: 'bool',\n                    },\n                ],\n                internalType: 'struct TokenConfig[]',\n                name: 'tokenConfig',\n                type: 'tuple[]',\n            },\n            {\n                internalType: 'uint256',\n                name: 'swapFeePercentage',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint32',\n                name: 'pauseWindowEndTime',\n                type: 'uint32',\n            },\n            { internalType: 'bool', name: 'protocolFeeExempt', type: 'bool' },\n            {\n                components: [\n                    {\n                        internalType: 'address',\n                        name: 'pauseManager',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'swapFeeManager',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'poolCreator',\n                        type: 'address',\n                    },\n                ],\n                internalType: 'struct PoolRoleAccounts',\n                name: 'roleAccounts',\n                type: 'tuple',\n            },\n            {\n                internalType: 'address',\n                name: 'poolHooksContract',\n                type: 'address',\n            },\n            {\n                components: [\n                    {\n                        internalType: 'bool',\n                        name: 'disableUnbalancedLiquidity',\n                        type: 'bool',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'enableAddLiquidityCustom',\n                        type: 'bool',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'enableRemoveLiquidityCustom',\n                        type: 'bool',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'enableDonation',\n                        type: 'bool',\n                    },\n                ],\n                internalType: 'struct LiquidityManagement',\n                name: 'liquidityManagement',\n                type: 'tuple',\n            },\n        ],\n        name: 'registerPool',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'pool', type: 'address' },\n            { internalType: 'address', name: 'from', type: 'address' },\n            {\n                internalType: 'uint256',\n                name: 'exactBptAmountIn',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256[]',\n                name: 'minAmountsOut',\n                type: 'uint256[]',\n            },\n        ],\n        name: 'removeLiquidityRecovery',\n        outputs: [\n            {\n                internalType: 'uint256[]',\n                name: 'amountsOutRaw',\n                type: 'uint256[]',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'token', type: 'address' }],\n        name: 'totalSupply',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'vault',\n        outputs: [\n            { internalType: 'contract IVault', name: '', type: 'address' },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    { stateMutability: 'payable', type: 'receive' },\n] as const;\n","export const weightedPoolFactoryAbi_V3 = [\n    {\n        inputs: [\n            { internalType: 'contract IVault', name: 'vault', type: 'address' },\n            {\n                internalType: 'uint32',\n                name: 'pauseWindowDuration',\n                type: 'uint32',\n            },\n            { internalType: 'string', name: 'factoryVersion', type: 'string' },\n            { internalType: 'string', name: 'poolVersion', type: 'string' },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'constructor',\n    },\n    { inputs: [], name: 'Create2EmptyBytecode', type: 'error' },\n    { inputs: [], name: 'Create2FailedDeployment', type: 'error' },\n    {\n        inputs: [\n            { internalType: 'uint256', name: 'balance', type: 'uint256' },\n            { internalType: 'uint256', name: 'needed', type: 'uint256' },\n        ],\n        name: 'Create2InsufficientBalance',\n        type: 'error',\n    },\n    { inputs: [], name: 'Disabled', type: 'error' },\n    { inputs: [], name: 'IndexOutOfBounds', type: 'error' },\n    { inputs: [], name: 'PoolPauseWindowDurationOverflow', type: 'error' },\n    { inputs: [], name: 'SenderNotAllowed', type: 'error' },\n    { inputs: [], name: 'StandardPoolWithCreator', type: 'error' },\n    { anonymous: false, inputs: [], name: 'FactoryDisabled', type: 'event' },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'pool',\n                type: 'address',\n            },\n        ],\n        name: 'PoolCreated',\n        type: 'event',\n    },\n    {\n        inputs: [\n            { internalType: 'string', name: 'name', type: 'string' },\n            { internalType: 'string', name: 'symbol', type: 'string' },\n            {\n                components: [\n                    {\n                        internalType: 'contract IERC20',\n                        name: 'token',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'enum TokenType',\n                        name: 'tokenType',\n                        type: 'uint8',\n                    },\n                    {\n                        internalType: 'contract IRateProvider',\n                        name: 'rateProvider',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'paysYieldFees',\n                        type: 'bool',\n                    },\n                ],\n                internalType: 'struct TokenConfig[]',\n                name: 'tokens',\n                type: 'tuple[]',\n            },\n            {\n                internalType: 'uint256[]',\n                name: 'normalizedWeights',\n                type: 'uint256[]',\n            },\n            {\n                components: [\n                    {\n                        internalType: 'address',\n                        name: 'pauseManager',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'swapFeeManager',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'poolCreator',\n                        type: 'address',\n                    },\n                ],\n                internalType: 'struct PoolRoleAccounts',\n                name: 'roleAccounts',\n                type: 'tuple',\n            },\n            {\n                internalType: 'uint256',\n                name: 'swapFeePercentage',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address',\n                name: 'poolHooksContract',\n                type: 'address',\n            },\n            { internalType: 'bool', name: 'enableDonation', type: 'bool' },\n            {\n                internalType: 'bool',\n                name: 'disableUnbalancedLiquidity',\n                type: 'bool',\n            },\n            { internalType: 'bytes32', name: 'salt', type: 'bytes32' },\n        ],\n        name: 'create',\n        outputs: [{ internalType: 'address', name: 'pool', type: 'address' }],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'disable',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [{ internalType: 'bytes4', name: 'selector', type: 'bytes4' }],\n        name: 'getActionId',\n        outputs: [{ internalType: 'bytes32', name: '', type: 'bytes32' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getAuthorizer',\n        outputs: [\n            { internalType: 'contract IAuthorizer', name: '', type: 'address' },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getDefaultLiquidityManagement',\n        outputs: [\n            {\n                components: [\n                    {\n                        internalType: 'bool',\n                        name: 'disableUnbalancedLiquidity',\n                        type: 'bool',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'enableAddLiquidityCustom',\n                        type: 'bool',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'enableRemoveLiquidityCustom',\n                        type: 'bool',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'enableDonation',\n                        type: 'bool',\n                    },\n                ],\n                internalType: 'struct LiquidityManagement',\n                name: 'liquidityManagement',\n                type: 'tuple',\n            },\n        ],\n        stateMutability: 'pure',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getDefaultPoolHooksContract',\n        outputs: [{ internalType: 'address', name: '', type: 'address' }],\n        stateMutability: 'pure',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'bytes', name: 'constructorArgs', type: 'bytes' },\n            { internalType: 'bytes32', name: 'salt', type: 'bytes32' },\n        ],\n        name: 'getDeploymentAddress',\n        outputs: [{ internalType: 'address', name: '', type: 'address' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getNewPoolPauseWindowEndTime',\n        outputs: [{ internalType: 'uint32', name: '', type: 'uint32' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getOriginalPauseWindowEndTime',\n        outputs: [{ internalType: 'uint32', name: '', type: 'uint32' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getPauseWindowDuration',\n        outputs: [{ internalType: 'uint32', name: '', type: 'uint32' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getPoolCount',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getPoolVersion',\n        outputs: [{ internalType: 'string', name: '', type: 'string' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getPools',\n        outputs: [{ internalType: 'address[]', name: '', type: 'address[]' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'uint256', name: 'start', type: 'uint256' },\n            { internalType: 'uint256', name: 'count', type: 'uint256' },\n        ],\n        name: 'getPoolsInRange',\n        outputs: [\n            { internalType: 'address[]', name: 'pools', type: 'address[]' },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getVault',\n        outputs: [\n            { internalType: 'contract IVault', name: '', type: 'address' },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'isDisabled',\n        outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'pool', type: 'address' }],\n        name: 'isPoolFromFactory',\n        outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'version',\n        outputs: [{ internalType: 'string', name: '', type: 'string' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n] as const;\n","export const weightedPoolFactoryV4Abi_V2 = [\n    {\n        inputs: [\n            {\n                internalType: 'contract IVault',\n                name: 'vault',\n                type: 'address',\n            },\n            {\n                internalType: 'contract IProtocolFeePercentagesProvider',\n                name: 'protocolFeeProvider',\n                type: 'address',\n            },\n            {\n                internalType: 'string',\n                name: 'factoryVersion',\n                type: 'string',\n            },\n            {\n                internalType: 'string',\n                name: 'poolVersion',\n                type: 'string',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'constructor',\n    },\n    {\n        anonymous: false,\n        inputs: [],\n        name: 'FactoryDisabled',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'pool',\n                type: 'address',\n            },\n        ],\n        name: 'PoolCreated',\n        type: 'event',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'string',\n                name: 'name',\n                type: 'string',\n            },\n            {\n                internalType: 'string',\n                name: 'symbol',\n                type: 'string',\n            },\n            {\n                internalType: 'contract IERC20[]',\n                name: 'tokens',\n                type: 'address[]',\n            },\n            {\n                internalType: 'uint256[]',\n                name: 'normalizedWeights',\n                type: 'uint256[]',\n            },\n            {\n                internalType: 'contract IRateProvider[]',\n                name: 'rateProviders',\n                type: 'address[]',\n            },\n            {\n                internalType: 'uint256',\n                name: 'swapFeePercentage',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address',\n                name: 'owner',\n                type: 'address',\n            },\n            {\n                internalType: 'bytes32',\n                name: 'salt',\n                type: 'bytes32',\n            },\n        ],\n        name: 'create',\n        outputs: [\n            {\n                internalType: 'address',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'disable',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'bytes4',\n                name: 'selector',\n                type: 'bytes4',\n            },\n        ],\n        name: 'getActionId',\n        outputs: [\n            {\n                internalType: 'bytes32',\n                name: '',\n                type: 'bytes32',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getAuthorizer',\n        outputs: [\n            {\n                internalType: 'contract IAuthorizer',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getCreationCode',\n        outputs: [\n            {\n                internalType: 'bytes',\n                name: '',\n                type: 'bytes',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getCreationCodeContracts',\n        outputs: [\n            {\n                internalType: 'address',\n                name: 'contractA',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'contractB',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getPauseConfiguration',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'pauseWindowDuration',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'bufferPeriodDuration',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getPoolVersion',\n        outputs: [\n            {\n                internalType: 'string',\n                name: '',\n                type: 'string',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getProtocolFeePercentagesProvider',\n        outputs: [\n            {\n                internalType: 'contract IProtocolFeePercentagesProvider',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getVault',\n        outputs: [\n            {\n                internalType: 'contract IVault',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'isDisabled',\n        outputs: [\n            {\n                internalType: 'bool',\n                name: '',\n                type: 'bool',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'pool',\n                type: 'address',\n            },\n        ],\n        name: 'isPoolFromFactory',\n        outputs: [\n            {\n                internalType: 'bool',\n                name: '',\n                type: 'bool',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'version',\n        outputs: [\n            {\n                internalType: 'string',\n                name: '',\n                type: 'string',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n] as const;\n","export const weightedPoolV4Abi_V2 = [\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'string',\n                        name: 'name',\n                        type: 'string',\n                    },\n                    {\n                        internalType: 'string',\n                        name: 'symbol',\n                        type: 'string',\n                    },\n                    {\n                        internalType: 'contract IERC20[]',\n                        name: 'tokens',\n                        type: 'address[]',\n                    },\n                    {\n                        internalType: 'uint256[]',\n                        name: 'normalizedWeights',\n                        type: 'uint256[]',\n                    },\n                    {\n                        internalType: 'contract IRateProvider[]',\n                        name: 'rateProviders',\n                        type: 'address[]',\n                    },\n                    {\n                        internalType: 'address[]',\n                        name: 'assetManagers',\n                        type: 'address[]',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'swapFeePercentage',\n                        type: 'uint256',\n                    },\n                ],\n                internalType: 'struct WeightedPool.NewPoolParams',\n                name: 'params',\n                type: 'tuple',\n            },\n            {\n                internalType: 'contract IVault',\n                name: 'vault',\n                type: 'address',\n            },\n            {\n                internalType: 'contract IProtocolFeePercentagesProvider',\n                name: 'protocolFeeProvider',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'pauseWindowDuration',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'bufferPeriodDuration',\n                type: 'uint256',\n            },\n            { internalType: 'address', name: 'owner', type: 'address' },\n            { internalType: 'string', name: 'version', type: 'string' },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'constructor',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'owner',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'spender',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'value',\n                type: 'uint256',\n            },\n        ],\n        name: 'Approval',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'bool',\n                name: 'paused',\n                type: 'bool',\n            },\n        ],\n        name: 'PausedStateChanged',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'uint256',\n                name: 'feeType',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'protocolFeePercentage',\n                type: 'uint256',\n            },\n        ],\n        name: 'ProtocolFeePercentageCacheUpdated',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'bool',\n                name: 'enabled',\n                type: 'bool',\n            },\n        ],\n        name: 'RecoveryModeStateChanged',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'swapFeePercentage',\n                type: 'uint256',\n            },\n        ],\n        name: 'SwapFeePercentageChanged',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'from',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'value',\n                type: 'uint256',\n            },\n        ],\n        name: 'Transfer',\n        type: 'event',\n    },\n    {\n        inputs: [],\n        name: 'DELEGATE_PROTOCOL_SWAP_FEES_SENTINEL',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'DOMAIN_SEPARATOR',\n        outputs: [{ internalType: 'bytes32', name: '', type: 'bytes32' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'owner', type: 'address' },\n            { internalType: 'address', name: 'spender', type: 'address' },\n        ],\n        name: 'allowance',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'spender', type: 'address' },\n            { internalType: 'uint256', name: 'amount', type: 'uint256' },\n        ],\n        name: 'approve',\n        outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'account', type: 'address' }],\n        name: 'balanceOf',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'decimals',\n        outputs: [{ internalType: 'uint8', name: '', type: 'uint8' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'spender', type: 'address' },\n            { internalType: 'uint256', name: 'amount', type: 'uint256' },\n        ],\n        name: 'decreaseAllowance',\n        outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'disableRecoveryMode',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'enableRecoveryMode',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getATHRateProduct',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [{ internalType: 'bytes4', name: 'selector', type: 'bytes4' }],\n        name: 'getActionId',\n        outputs: [{ internalType: 'bytes32', name: '', type: 'bytes32' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getActualSupply',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getAuthorizer',\n        outputs: [\n            {\n                internalType: 'contract IAuthorizer',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getDomainSeparator',\n        outputs: [{ internalType: 'bytes32', name: '', type: 'bytes32' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getInvariant',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getLastPostJoinExitInvariant',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'account', type: 'address' }],\n        name: 'getNextNonce',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getNormalizedWeights',\n        outputs: [{ internalType: 'uint256[]', name: '', type: 'uint256[]' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getOwner',\n        outputs: [{ internalType: 'address', name: '', type: 'address' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getPausedState',\n        outputs: [\n            { internalType: 'bool', name: 'paused', type: 'bool' },\n            {\n                internalType: 'uint256',\n                name: 'pauseWindowEndTime',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'bufferPeriodEndTime',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getPoolId',\n        outputs: [{ internalType: 'bytes32', name: '', type: 'bytes32' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [{ internalType: 'uint256', name: 'feeType', type: 'uint256' }],\n        name: 'getProtocolFeePercentageCache',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getProtocolFeesCollector',\n        outputs: [\n            {\n                internalType: 'contract IProtocolFeesCollector',\n                name: '',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getProtocolSwapFeeDelegation',\n        outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getRateProviders',\n        outputs: [\n            {\n                internalType: 'contract IRateProvider[]',\n                name: '',\n                type: 'address[]',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getScalingFactors',\n        outputs: [{ internalType: 'uint256[]', name: '', type: 'uint256[]' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getSwapFeePercentage',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getVault',\n        outputs: [\n            { internalType: 'contract IVault', name: '', type: 'address' },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'inRecoveryMode',\n        outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'spender', type: 'address' },\n            {\n                internalType: 'uint256',\n                name: 'addedValue',\n                type: 'uint256',\n            },\n        ],\n        name: 'increaseAllowance',\n        outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'name',\n        outputs: [{ internalType: 'string', name: '', type: 'string' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'owner', type: 'address' }],\n        name: 'nonces',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'bytes32', name: 'poolId', type: 'bytes32' },\n            { internalType: 'address', name: 'sender', type: 'address' },\n            {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256[]',\n                name: 'balances',\n                type: 'uint256[]',\n            },\n            {\n                internalType: 'uint256',\n                name: 'lastChangeBlock',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'protocolSwapFeePercentage',\n                type: 'uint256',\n            },\n            { internalType: 'bytes', name: 'userData', type: 'bytes' },\n        ],\n        name: 'onExitPool',\n        outputs: [\n            { internalType: 'uint256[]', name: '', type: 'uint256[]' },\n            { internalType: 'uint256[]', name: '', type: 'uint256[]' },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'bytes32', name: 'poolId', type: 'bytes32' },\n            { internalType: 'address', name: 'sender', type: 'address' },\n            {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256[]',\n                name: 'balances',\n                type: 'uint256[]',\n            },\n            {\n                internalType: 'uint256',\n                name: 'lastChangeBlock',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'protocolSwapFeePercentage',\n                type: 'uint256',\n            },\n            { internalType: 'bytes', name: 'userData', type: 'bytes' },\n        ],\n        name: 'onJoinPool',\n        outputs: [\n            { internalType: 'uint256[]', name: '', type: 'uint256[]' },\n            { internalType: 'uint256[]', name: '', type: 'uint256[]' },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'enum IVault.SwapKind',\n                        name: 'kind',\n                        type: 'uint8',\n                    },\n                    {\n                        internalType: 'contract IERC20',\n                        name: 'tokenIn',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'contract IERC20',\n                        name: 'tokenOut',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'amount',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'bytes32',\n                        name: 'poolId',\n                        type: 'bytes32',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'lastChangeBlock',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'from',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'to',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'bytes',\n                        name: 'userData',\n                        type: 'bytes',\n                    },\n                ],\n                internalType: 'struct IPoolSwapStructs.SwapRequest',\n                name: 'request',\n                type: 'tuple',\n            },\n            {\n                internalType: 'uint256',\n                name: 'balanceTokenIn',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'balanceTokenOut',\n                type: 'uint256',\n            },\n        ],\n        name: 'onSwap',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'pause',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'owner', type: 'address' },\n            { internalType: 'address', name: 'spender', type: 'address' },\n            { internalType: 'uint256', name: 'value', type: 'uint256' },\n            {\n                internalType: 'uint256',\n                name: 'deadline',\n                type: 'uint256',\n            },\n            { internalType: 'uint8', name: 'v', type: 'uint8' },\n            { internalType: 'bytes32', name: 'r', type: 'bytes32' },\n            { internalType: 'bytes32', name: 's', type: 'bytes32' },\n        ],\n        name: 'permit',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'bytes32', name: 'poolId', type: 'bytes32' },\n            { internalType: 'address', name: 'sender', type: 'address' },\n            {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256[]',\n                name: 'balances',\n                type: 'uint256[]',\n            },\n            {\n                internalType: 'uint256',\n                name: 'lastChangeBlock',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'protocolSwapFeePercentage',\n                type: 'uint256',\n            },\n            { internalType: 'bytes', name: 'userData', type: 'bytes' },\n        ],\n        name: 'queryExit',\n        outputs: [\n            { internalType: 'uint256', name: 'bptIn', type: 'uint256' },\n            {\n                internalType: 'uint256[]',\n                name: 'amountsOut',\n                type: 'uint256[]',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'bytes32', name: 'poolId', type: 'bytes32' },\n            { internalType: 'address', name: 'sender', type: 'address' },\n            {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256[]',\n                name: 'balances',\n                type: 'uint256[]',\n            },\n            {\n                internalType: 'uint256',\n                name: 'lastChangeBlock',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'protocolSwapFeePercentage',\n                type: 'uint256',\n            },\n            { internalType: 'bytes', name: 'userData', type: 'bytes' },\n        ],\n        name: 'queryJoin',\n        outputs: [\n            { internalType: 'uint256', name: 'bptOut', type: 'uint256' },\n            {\n                internalType: 'uint256[]',\n                name: 'amountsIn',\n                type: 'uint256[]',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IERC20',\n                name: 'token',\n                type: 'address',\n            },\n            { internalType: 'bytes', name: 'poolConfig', type: 'bytes' },\n        ],\n        name: 'setAssetManagerPoolConfig',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256',\n                name: 'swapFeePercentage',\n                type: 'uint256',\n            },\n        ],\n        name: 'setSwapFeePercentage',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'symbol',\n        outputs: [{ internalType: 'string', name: '', type: 'string' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'totalSupply',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n            { internalType: 'uint256', name: 'amount', type: 'uint256' },\n        ],\n        name: 'transfer',\n        outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'sender', type: 'address' },\n            {\n                internalType: 'address',\n                name: 'recipient',\n                type: 'address',\n            },\n            { internalType: 'uint256', name: 'amount', type: 'uint256' },\n        ],\n        name: 'transferFrom',\n        outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'unpause',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'updateProtocolFeePercentageCache',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'version',\n        outputs: [{ internalType: 'string', name: '', type: 'string' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n] as const;\n","export const weightedPoolAbi_V3 = [\n    {\n        inputs: [\n            {\n                components: [\n                    { internalType: 'string', name: 'name', type: 'string' },\n                    { internalType: 'string', name: 'symbol', type: 'string' },\n                    {\n                        internalType: 'uint256',\n                        name: 'numTokens',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint256[]',\n                        name: 'normalizedWeights',\n                        type: 'uint256[]',\n                    },\n                    { internalType: 'string', name: 'version', type: 'string' },\n                ],\n                internalType: 'struct WeightedPool.NewPoolParams',\n                name: 'params',\n                type: 'tuple',\n            },\n            { internalType: 'contract IVault', name: 'vault', type: 'address' },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'constructor',\n    },\n    { inputs: [], name: 'BaseOutOfBounds', type: 'error' },\n    { inputs: [], name: 'ECDSAInvalidSignature', type: 'error' },\n    {\n        inputs: [{ internalType: 'uint256', name: 'length', type: 'uint256' }],\n        name: 'ECDSAInvalidSignatureLength',\n        type: 'error',\n    },\n    {\n        inputs: [{ internalType: 'bytes32', name: 's', type: 'bytes32' }],\n        name: 'ECDSAInvalidSignatureS',\n        type: 'error',\n    },\n    {\n        inputs: [\n            { internalType: 'uint256', name: 'deadline', type: 'uint256' },\n        ],\n        name: 'ERC2612ExpiredSignature',\n        type: 'error',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'signer', type: 'address' },\n            { internalType: 'address', name: 'owner', type: 'address' },\n        ],\n        name: 'ERC2612InvalidSigner',\n        type: 'error',\n    },\n    { inputs: [], name: 'ExponentOutOfBounds', type: 'error' },\n    { inputs: [], name: 'InputLengthMismatch', type: 'error' },\n    {\n        inputs: [\n            { internalType: 'address', name: 'account', type: 'address' },\n            { internalType: 'uint256', name: 'currentNonce', type: 'uint256' },\n        ],\n        name: 'InvalidAccountNonce',\n        type: 'error',\n    },\n    { inputs: [], name: 'InvalidExponent', type: 'error' },\n    { inputs: [], name: 'InvalidShortString', type: 'error' },\n    { inputs: [], name: 'InvalidToken', type: 'error' },\n    { inputs: [], name: 'MaxInRatio', type: 'error' },\n    { inputs: [], name: 'MaxOutRatio', type: 'error' },\n    { inputs: [], name: 'MinWeight', type: 'error' },\n    { inputs: [], name: 'NormalizedWeightInvariant', type: 'error' },\n    { inputs: [], name: 'ProductOutOfBounds', type: 'error' },\n    {\n        inputs: [{ internalType: 'address', name: 'sender', type: 'address' }],\n        name: 'SenderIsNotVault',\n        type: 'error',\n    },\n    {\n        inputs: [{ internalType: 'string', name: 'str', type: 'string' }],\n        name: 'StringTooLong',\n        type: 'error',\n    },\n    { inputs: [], name: 'WeightedPoolBptRateUnsupported', type: 'error' },\n    { inputs: [], name: 'ZeroDivision', type: 'error' },\n    { inputs: [], name: 'ZeroInvariant', type: 'error' },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'owner',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'spender',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'value',\n                type: 'uint256',\n            },\n        ],\n        name: 'Approval',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [],\n        name: 'EIP712DomainChanged',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'from',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'value',\n                type: 'uint256',\n            },\n        ],\n        name: 'Transfer',\n        type: 'event',\n    },\n    {\n        inputs: [],\n        name: 'DOMAIN_SEPARATOR',\n        outputs: [{ internalType: 'bytes32', name: '', type: 'bytes32' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'PERMIT_TYPEHASH',\n        outputs: [{ internalType: 'bytes32', name: '', type: 'bytes32' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'owner', type: 'address' },\n            { internalType: 'address', name: 'spender', type: 'address' },\n        ],\n        name: 'allowance',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'spender', type: 'address' },\n            { internalType: 'uint256', name: 'amount', type: 'uint256' },\n        ],\n        name: 'approve',\n        outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'account', type: 'address' }],\n        name: 'balanceOf',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256[]',\n                name: 'balancesLiveScaled18',\n                type: 'uint256[]',\n            },\n            { internalType: 'uint256', name: 'tokenInIndex', type: 'uint256' },\n            {\n                internalType: 'uint256',\n                name: 'invariantRatio',\n                type: 'uint256',\n            },\n        ],\n        name: 'computeBalance',\n        outputs: [\n            { internalType: 'uint256', name: 'newBalance', type: 'uint256' },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256[]',\n                name: 'balancesLiveScaled18',\n                type: 'uint256[]',\n            },\n            { internalType: 'enum Rounding', name: 'rounding', type: 'uint8' },\n        ],\n        name: 'computeInvariant',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'decimals',\n        outputs: [{ internalType: 'uint8', name: '', type: 'uint8' }],\n        stateMutability: 'pure',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'eip712Domain',\n        outputs: [\n            { internalType: 'bytes1', name: 'fields', type: 'bytes1' },\n            { internalType: 'string', name: 'name', type: 'string' },\n            { internalType: 'string', name: 'version', type: 'string' },\n            { internalType: 'uint256', name: 'chainId', type: 'uint256' },\n            {\n                internalType: 'address',\n                name: 'verifyingContract',\n                type: 'address',\n            },\n            { internalType: 'bytes32', name: 'salt', type: 'bytes32' },\n            {\n                internalType: 'uint256[]',\n                name: 'extensions',\n                type: 'uint256[]',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'owner', type: 'address' },\n            { internalType: 'address', name: 'spender', type: 'address' },\n            { internalType: 'uint256', name: 'amount', type: 'uint256' },\n        ],\n        name: 'emitApproval',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'from', type: 'address' },\n            { internalType: 'address', name: 'to', type: 'address' },\n            { internalType: 'uint256', name: 'amount', type: 'uint256' },\n        ],\n        name: 'emitTransfer',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getAggregateFeePercentages',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'aggregateSwapFeePercentage',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'aggregateYieldFeePercentage',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getCurrentLiveBalances',\n        outputs: [\n            {\n                internalType: 'uint256[]',\n                name: 'balancesLiveScaled18',\n                type: 'uint256[]',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getMaximumInvariantRatio',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'pure',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getMaximumSwapFeePercentage',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'pure',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getMinimumInvariantRatio',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'pure',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getMinimumSwapFeePercentage',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'pure',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getNormalizedWeights',\n        outputs: [{ internalType: 'uint256[]', name: '', type: 'uint256[]' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getRate',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'pure',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getStaticSwapFeePercentage',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getTokenInfo',\n        outputs: [\n            {\n                internalType: 'contract IERC20[]',\n                name: 'tokens',\n                type: 'address[]',\n            },\n            {\n                components: [\n                    {\n                        internalType: 'enum TokenType',\n                        name: 'tokenType',\n                        type: 'uint8',\n                    },\n                    {\n                        internalType: 'contract IRateProvider',\n                        name: 'rateProvider',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'paysYieldFees',\n                        type: 'bool',\n                    },\n                ],\n                internalType: 'struct TokenInfo[]',\n                name: 'tokenInfo',\n                type: 'tuple[]',\n            },\n            {\n                internalType: 'uint256[]',\n                name: 'balancesRaw',\n                type: 'uint256[]',\n            },\n            {\n                internalType: 'uint256[]',\n                name: 'lastBalancesLiveScaled18',\n                type: 'uint256[]',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getTokens',\n        outputs: [\n            {\n                internalType: 'contract IERC20[]',\n                name: 'tokens',\n                type: 'address[]',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getVault',\n        outputs: [\n            { internalType: 'contract IVault', name: '', type: 'address' },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getWeightedPoolDynamicData',\n        outputs: [\n            {\n                components: [\n                    {\n                        internalType: 'uint256[]',\n                        name: 'balancesLiveScaled18',\n                        type: 'uint256[]',\n                    },\n                    {\n                        internalType: 'uint256[]',\n                        name: 'tokenRates',\n                        type: 'uint256[]',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'staticSwapFeePercentage',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'totalSupply',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'isPoolInitialized',\n                        type: 'bool',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'isPoolPaused',\n                        type: 'bool',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'isPoolInRecoveryMode',\n                        type: 'bool',\n                    },\n                ],\n                internalType: 'struct WeightedPoolDynamicData',\n                name: 'data',\n                type: 'tuple',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getWeightedPoolImmutableData',\n        outputs: [\n            {\n                components: [\n                    {\n                        internalType: 'contract IERC20[]',\n                        name: 'tokens',\n                        type: 'address[]',\n                    },\n                    {\n                        internalType: 'uint256[]',\n                        name: 'decimalScalingFactors',\n                        type: 'uint256[]',\n                    },\n                    {\n                        internalType: 'uint256[]',\n                        name: 'normalizedWeights',\n                        type: 'uint256[]',\n                    },\n                ],\n                internalType: 'struct WeightedPoolImmutableData',\n                name: 'data',\n                type: 'tuple',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'incrementNonce',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'name',\n        outputs: [{ internalType: 'string', name: '', type: 'string' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'owner', type: 'address' }],\n        name: 'nonces',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'enum SwapKind',\n                        name: 'kind',\n                        type: 'uint8',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'amountGivenScaled18',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint256[]',\n                        name: 'balancesScaled18',\n                        type: 'uint256[]',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'indexIn',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'indexOut',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'router',\n                        type: 'address',\n                    },\n                    { internalType: 'bytes', name: 'userData', type: 'bytes' },\n                ],\n                internalType: 'struct PoolSwapParams',\n                name: 'request',\n                type: 'tuple',\n            },\n        ],\n        name: 'onSwap',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'owner', type: 'address' },\n            { internalType: 'address', name: 'spender', type: 'address' },\n            { internalType: 'uint256', name: 'amount', type: 'uint256' },\n            { internalType: 'uint256', name: 'deadline', type: 'uint256' },\n            { internalType: 'uint8', name: 'v', type: 'uint8' },\n            { internalType: 'bytes32', name: 'r', type: 'bytes32' },\n            { internalType: 'bytes32', name: 's', type: 'bytes32' },\n        ],\n        name: 'permit',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'bytes4', name: 'interfaceId', type: 'bytes4' },\n        ],\n        name: 'supportsInterface',\n        outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'symbol',\n        outputs: [{ internalType: 'string', name: '', type: 'string' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'totalSupply',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'to', type: 'address' },\n            { internalType: 'uint256', name: 'amount', type: 'uint256' },\n        ],\n        name: 'transfer',\n        outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'from', type: 'address' },\n            { internalType: 'address', name: 'to', type: 'address' },\n            { internalType: 'uint256', name: 'amount', type: 'uint256' },\n        ],\n        name: 'transferFrom',\n        outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'version',\n        outputs: [{ internalType: 'string', name: '', type: 'string' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n] as const;\n","export const vaultAdminAbi_V3 = [\n    {\n        inputs: [\n            {\n                internalType: 'contract IVault',\n                name: 'mainVault',\n                type: 'address',\n            },\n            {\n                internalType: 'uint32',\n                name: 'pauseWindowDuration',\n                type: 'uint32',\n            },\n            {\n                internalType: 'uint32',\n                name: 'bufferPeriodDuration',\n                type: 'uint32',\n            },\n            {\n                internalType: 'uint256',\n                name: 'minTradeAmount',\n                type: 'uint256',\n            },\n            { internalType: 'uint256', name: 'minWrapAmount', type: 'uint256' },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'constructor',\n    },\n    { inputs: [], name: 'AfterAddLiquidityHookFailed', type: 'error' },\n    { inputs: [], name: 'AfterInitializeHookFailed', type: 'error' },\n    { inputs: [], name: 'AfterRemoveLiquidityHookFailed', type: 'error' },\n    { inputs: [], name: 'AfterSwapHookFailed', type: 'error' },\n    { inputs: [], name: 'AmountGivenZero', type: 'error' },\n    {\n        inputs: [\n            {\n                internalType: 'contract IERC20',\n                name: 'tokenIn',\n                type: 'address',\n            },\n            { internalType: 'uint256', name: 'amountIn', type: 'uint256' },\n            { internalType: 'uint256', name: 'maxAmountIn', type: 'uint256' },\n        ],\n        name: 'AmountInAboveMax',\n        type: 'error',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IERC20',\n                name: 'tokenOut',\n                type: 'address',\n            },\n            { internalType: 'uint256', name: 'amountOut', type: 'uint256' },\n            { internalType: 'uint256', name: 'minAmountOut', type: 'uint256' },\n        ],\n        name: 'AmountOutBelowMin',\n        type: 'error',\n    },\n    { inputs: [], name: 'BalanceNotSettled', type: 'error' },\n    { inputs: [], name: 'BalanceOverflow', type: 'error' },\n    { inputs: [], name: 'BeforeAddLiquidityHookFailed', type: 'error' },\n    { inputs: [], name: 'BeforeInitializeHookFailed', type: 'error' },\n    { inputs: [], name: 'BeforeRemoveLiquidityHookFailed', type: 'error' },\n    { inputs: [], name: 'BeforeSwapHookFailed', type: 'error' },\n    {\n        inputs: [\n            { internalType: 'uint256', name: 'amountIn', type: 'uint256' },\n            { internalType: 'uint256', name: 'maxAmountIn', type: 'uint256' },\n        ],\n        name: 'BptAmountInAboveMax',\n        type: 'error',\n    },\n    {\n        inputs: [\n            { internalType: 'uint256', name: 'amountOut', type: 'uint256' },\n            { internalType: 'uint256', name: 'minAmountOut', type: 'uint256' },\n        ],\n        name: 'BptAmountOutBelowMin',\n        type: 'error',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IERC4626',\n                name: 'wrappedToken',\n                type: 'address',\n            },\n        ],\n        name: 'BufferAlreadyInitialized',\n        type: 'error',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IERC4626',\n                name: 'wrappedToken',\n                type: 'address',\n            },\n        ],\n        name: 'BufferNotInitialized',\n        type: 'error',\n    },\n    { inputs: [], name: 'BufferSharesInvalidOwner', type: 'error' },\n    { inputs: [], name: 'BufferSharesInvalidReceiver', type: 'error' },\n    {\n        inputs: [\n            { internalType: 'uint256', name: 'totalSupply', type: 'uint256' },\n        ],\n        name: 'BufferTotalSupplyTooLow',\n        type: 'error',\n    },\n    { inputs: [], name: 'CannotReceiveEth', type: 'error' },\n    { inputs: [], name: 'CannotSwapSameToken', type: 'error' },\n    { inputs: [], name: 'CodecOverflow', type: 'error' },\n    { inputs: [], name: 'DoesNotSupportAddLiquidityCustom', type: 'error' },\n    { inputs: [], name: 'DoesNotSupportDonation', type: 'error' },\n    { inputs: [], name: 'DoesNotSupportRemoveLiquidityCustom', type: 'error' },\n    { inputs: [], name: 'DoesNotSupportUnbalancedLiquidity', type: 'error' },\n    { inputs: [], name: 'DynamicSwapFeeHookFailed', type: 'error' },\n    {\n        inputs: [\n            { internalType: 'address', name: 'spender', type: 'address' },\n            { internalType: 'uint256', name: 'allowance', type: 'uint256' },\n            { internalType: 'uint256', name: 'needed', type: 'uint256' },\n        ],\n        name: 'ERC20InsufficientAllowance',\n        type: 'error',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'sender', type: 'address' },\n            { internalType: 'uint256', name: 'balance', type: 'uint256' },\n            { internalType: 'uint256', name: 'needed', type: 'uint256' },\n        ],\n        name: 'ERC20InsufficientBalance',\n        type: 'error',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'approver', type: 'address' },\n        ],\n        name: 'ERC20InvalidApprover',\n        type: 'error',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'receiver', type: 'address' },\n        ],\n        name: 'ERC20InvalidReceiver',\n        type: 'error',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'sender', type: 'address' }],\n        name: 'ERC20InvalidSender',\n        type: 'error',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'spender', type: 'address' }],\n        name: 'ERC20InvalidSpender',\n        type: 'error',\n    },\n    { inputs: [], name: 'FeePrecisionTooHigh', type: 'error' },\n    {\n        inputs: [\n            {\n                internalType: 'contract IERC20',\n                name: 'tokenIn',\n                type: 'address',\n            },\n            { internalType: 'uint256', name: 'amountIn', type: 'uint256' },\n            { internalType: 'uint256', name: 'maxAmountIn', type: 'uint256' },\n        ],\n        name: 'HookAdjustedAmountInAboveMax',\n        type: 'error',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IERC20',\n                name: 'tokenOut',\n                type: 'address',\n            },\n            { internalType: 'uint256', name: 'amountOut', type: 'uint256' },\n            { internalType: 'uint256', name: 'minAmountOut', type: 'uint256' },\n        ],\n        name: 'HookAdjustedAmountOutBelowMin',\n        type: 'error',\n    },\n    {\n        inputs: [\n            { internalType: 'uint256', name: 'amount', type: 'uint256' },\n            { internalType: 'uint256', name: 'limit', type: 'uint256' },\n        ],\n        name: 'HookAdjustedSwapLimit',\n        type: 'error',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'address',\n                name: 'poolHooksContract',\n                type: 'address',\n            },\n            { internalType: 'address', name: 'pool', type: 'address' },\n            { internalType: 'address', name: 'poolFactory', type: 'address' },\n        ],\n        name: 'HookRegistrationFailed',\n        type: 'error',\n    },\n    { inputs: [], name: 'InvalidAddLiquidityKind', type: 'error' },\n    { inputs: [], name: 'InvalidRemoveLiquidityKind', type: 'error' },\n    { inputs: [], name: 'InvalidToken', type: 'error' },\n    { inputs: [], name: 'InvalidTokenConfiguration', type: 'error' },\n    { inputs: [], name: 'InvalidTokenDecimals', type: 'error' },\n    { inputs: [], name: 'InvalidTokenType', type: 'error' },\n    {\n        inputs: [\n            {\n                internalType: 'contract IERC4626',\n                name: 'wrappedToken',\n                type: 'address',\n            },\n        ],\n        name: 'InvalidUnderlyingToken',\n        type: 'error',\n    },\n    {\n        inputs: [\n            { internalType: 'uint256', name: 'issuedShares', type: 'uint256' },\n            {\n                internalType: 'uint256',\n                name: 'minIssuedShares',\n                type: 'uint256',\n            },\n        ],\n        name: 'IssuedSharesBelowMin',\n        type: 'error',\n    },\n    { inputs: [], name: 'MaxTokens', type: 'error' },\n    { inputs: [], name: 'MinTokens', type: 'error' },\n    { inputs: [], name: 'NotEnoughBufferShares', type: 'error' },\n    {\n        inputs: [\n            {\n                internalType: 'contract IERC4626',\n                name: 'wrappedToken',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'expectedUnderlyingAmount',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'actualUnderlyingAmount',\n                type: 'uint256',\n            },\n        ],\n        name: 'NotEnoughUnderlying',\n        type: 'error',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IERC4626',\n                name: 'wrappedToken',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'expectedWrappedAmount',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'actualWrappedAmount',\n                type: 'uint256',\n            },\n        ],\n        name: 'NotEnoughWrapped',\n        type: 'error',\n    },\n    { inputs: [], name: 'NotStaticCall', type: 'error' },\n    { inputs: [], name: 'NotVaultDelegateCall', type: 'error' },\n    { inputs: [], name: 'OutOfBounds', type: 'error' },\n    { inputs: [], name: 'PauseBufferPeriodDurationTooLarge', type: 'error' },\n    { inputs: [], name: 'PercentageAboveMax', type: 'error' },\n    {\n        inputs: [{ internalType: 'address', name: 'pool', type: 'address' }],\n        name: 'PoolAlreadyInitialized',\n        type: 'error',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'pool', type: 'address' }],\n        name: 'PoolAlreadyRegistered',\n        type: 'error',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'pool', type: 'address' }],\n        name: 'PoolInRecoveryMode',\n        type: 'error',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'pool', type: 'address' }],\n        name: 'PoolNotInRecoveryMode',\n        type: 'error',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'pool', type: 'address' }],\n        name: 'PoolNotInitialized',\n        type: 'error',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'pool', type: 'address' }],\n        name: 'PoolNotPaused',\n        type: 'error',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'pool', type: 'address' }],\n        name: 'PoolNotRegistered',\n        type: 'error',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'pool', type: 'address' }],\n        name: 'PoolPauseWindowExpired',\n        type: 'error',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'pool', type: 'address' }],\n        name: 'PoolPaused',\n        type: 'error',\n    },\n    {\n        inputs: [\n            { internalType: 'uint256', name: 'totalSupply', type: 'uint256' },\n        ],\n        name: 'PoolTotalSupplyTooLow',\n        type: 'error',\n    },\n    { inputs: [], name: 'ProtocolFeesExceedTotalCollected', type: 'error' },\n    { inputs: [], name: 'QueriesDisabled', type: 'error' },\n    { inputs: [], name: 'QueriesDisabledPermanently', type: 'error' },\n    { inputs: [], name: 'QuoteResultSpoofed', type: 'error' },\n    { inputs: [], name: 'ReentrancyGuardReentrantCall', type: 'error' },\n    { inputs: [], name: 'RouterNotTrusted', type: 'error' },\n    {\n        inputs: [\n            { internalType: 'uint8', name: 'bits', type: 'uint8' },\n            { internalType: 'uint256', name: 'value', type: 'uint256' },\n        ],\n        name: 'SafeCastOverflowedUintDowncast',\n        type: 'error',\n    },\n    {\n        inputs: [{ internalType: 'uint256', name: 'value', type: 'uint256' }],\n        name: 'SafeCastOverflowedUintToInt',\n        type: 'error',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'sender', type: 'address' }],\n        name: 'SenderIsNotVault',\n        type: 'error',\n    },\n    { inputs: [], name: 'SenderNotAllowed', type: 'error' },\n    { inputs: [], name: 'SwapFeePercentageTooHigh', type: 'error' },\n    { inputs: [], name: 'SwapFeePercentageTooLow', type: 'error' },\n    {\n        inputs: [\n            { internalType: 'uint256', name: 'amount', type: 'uint256' },\n            { internalType: 'uint256', name: 'limit', type: 'uint256' },\n        ],\n        name: 'SwapLimit',\n        type: 'error',\n    },\n    {\n        inputs: [\n            { internalType: 'contract IERC20', name: 'token', type: 'address' },\n        ],\n        name: 'TokenAlreadyRegistered',\n        type: 'error',\n    },\n    {\n        inputs: [\n            { internalType: 'contract IERC20', name: 'token', type: 'address' },\n        ],\n        name: 'TokenNotRegistered',\n        type: 'error',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'pool', type: 'address' },\n            { internalType: 'address', name: 'expectedToken', type: 'address' },\n            { internalType: 'address', name: 'actualToken', type: 'address' },\n        ],\n        name: 'TokensMismatch',\n        type: 'error',\n    },\n    { inputs: [], name: 'TradeAmountTooSmall', type: 'error' },\n    { inputs: [], name: 'VaultBuffersArePaused', type: 'error' },\n    { inputs: [], name: 'VaultIsNotUnlocked', type: 'error' },\n    { inputs: [], name: 'VaultNotPaused', type: 'error' },\n    { inputs: [], name: 'VaultPauseWindowDurationTooLarge', type: 'error' },\n    { inputs: [], name: 'VaultPauseWindowExpired', type: 'error' },\n    { inputs: [], name: 'VaultPaused', type: 'error' },\n    {\n        inputs: [\n            {\n                internalType: 'contract IERC4626',\n                name: 'wrappedToken',\n                type: 'address',\n            },\n        ],\n        name: 'WrapAmountTooSmall',\n        type: 'error',\n    },\n    { inputs: [], name: 'WrongProtocolFeeControllerDeployment', type: 'error' },\n    {\n        inputs: [\n            {\n                internalType: 'contract IERC4626',\n                name: 'wrappedToken',\n                type: 'address',\n            },\n            {\n                internalType: 'address',\n                name: 'underlyingToken',\n                type: 'address',\n            },\n        ],\n        name: 'WrongUnderlyingToken',\n        type: 'error',\n    },\n    { inputs: [], name: 'WrongVaultAdminDeployment', type: 'error' },\n    { inputs: [], name: 'WrongVaultExtensionDeployment', type: 'error' },\n    { inputs: [], name: 'ZeroDivision', type: 'error' },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'pool',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'aggregateSwapFeePercentage',\n                type: 'uint256',\n            },\n        ],\n        name: 'AggregateSwapFeePercentageChanged',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'pool',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'aggregateYieldFeePercentage',\n                type: 'uint256',\n            },\n        ],\n        name: 'AggregateYieldFeePercentageChanged',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'pool',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'owner',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'spender',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'value',\n                type: 'uint256',\n            },\n        ],\n        name: 'Approval',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'contract IAuthorizer',\n                name: 'newAuthorizer',\n                type: 'address',\n            },\n        ],\n        name: 'AuthorizerChanged',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'contract IERC4626',\n                name: 'wrappedToken',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'from',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'burnedShares',\n                type: 'uint256',\n            },\n        ],\n        name: 'BufferSharesBurned',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'contract IERC4626',\n                name: 'wrappedToken',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'issuedShares',\n                type: 'uint256',\n            },\n        ],\n        name: 'BufferSharesMinted',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'pool',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'liquidityProvider',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'enum AddLiquidityKind',\n                name: 'kind',\n                type: 'uint8',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'totalSupply',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256[]',\n                name: 'amountsAddedRaw',\n                type: 'uint256[]',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256[]',\n                name: 'swapFeeAmountsRaw',\n                type: 'uint256[]',\n            },\n        ],\n        name: 'LiquidityAdded',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'contract IERC4626',\n                name: 'wrappedToken',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'amountUnderlying',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'amountWrapped',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'bytes32',\n                name: 'bufferBalances',\n                type: 'bytes32',\n            },\n        ],\n        name: 'LiquidityAddedToBuffer',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'pool',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'liquidityProvider',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'enum RemoveLiquidityKind',\n                name: 'kind',\n                type: 'uint8',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'totalSupply',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256[]',\n                name: 'amountsRemovedRaw',\n                type: 'uint256[]',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256[]',\n                name: 'swapFeeAmountsRaw',\n                type: 'uint256[]',\n            },\n        ],\n        name: 'LiquidityRemoved',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'contract IERC4626',\n                name: 'wrappedToken',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'amountUnderlying',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'amountWrapped',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'bytes32',\n                name: 'bufferBalances',\n                type: 'bytes32',\n            },\n        ],\n        name: 'LiquidityRemovedFromBuffer',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'pool',\n                type: 'address',\n            },\n        ],\n        name: 'PoolInitialized',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'pool',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'bool',\n                name: 'paused',\n                type: 'bool',\n            },\n        ],\n        name: 'PoolPausedStateChanged',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'pool',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'bool',\n                name: 'recoveryMode',\n                type: 'bool',\n            },\n        ],\n        name: 'PoolRecoveryModeStateChanged',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'pool',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'factory',\n                type: 'address',\n            },\n            {\n                components: [\n                    {\n                        internalType: 'contract IERC20',\n                        name: 'token',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'enum TokenType',\n                        name: 'tokenType',\n                        type: 'uint8',\n                    },\n                    {\n                        internalType: 'contract IRateProvider',\n                        name: 'rateProvider',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'paysYieldFees',\n                        type: 'bool',\n                    },\n                ],\n                indexed: false,\n                internalType: 'struct TokenConfig[]',\n                name: 'tokenConfig',\n                type: 'tuple[]',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'swapFeePercentage',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'uint32',\n                name: 'pauseWindowEndTime',\n                type: 'uint32',\n            },\n            {\n                components: [\n                    {\n                        internalType: 'address',\n                        name: 'pauseManager',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'swapFeeManager',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'poolCreator',\n                        type: 'address',\n                    },\n                ],\n                indexed: false,\n                internalType: 'struct PoolRoleAccounts',\n                name: 'roleAccounts',\n                type: 'tuple',\n            },\n            {\n                components: [\n                    {\n                        internalType: 'bool',\n                        name: 'enableHookAdjustedAmounts',\n                        type: 'bool',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'shouldCallBeforeInitialize',\n                        type: 'bool',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'shouldCallAfterInitialize',\n                        type: 'bool',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'shouldCallComputeDynamicSwapFee',\n                        type: 'bool',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'shouldCallBeforeSwap',\n                        type: 'bool',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'shouldCallAfterSwap',\n                        type: 'bool',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'shouldCallBeforeAddLiquidity',\n                        type: 'bool',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'shouldCallAfterAddLiquidity',\n                        type: 'bool',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'shouldCallBeforeRemoveLiquidity',\n                        type: 'bool',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'shouldCallAfterRemoveLiquidity',\n                        type: 'bool',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'hooksContract',\n                        type: 'address',\n                    },\n                ],\n                indexed: false,\n                internalType: 'struct HooksConfig',\n                name: 'hooksConfig',\n                type: 'tuple',\n            },\n            {\n                components: [\n                    {\n                        internalType: 'bool',\n                        name: 'disableUnbalancedLiquidity',\n                        type: 'bool',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'enableAddLiquidityCustom',\n                        type: 'bool',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'enableRemoveLiquidityCustom',\n                        type: 'bool',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'enableDonation',\n                        type: 'bool',\n                    },\n                ],\n                indexed: false,\n                internalType: 'struct LiquidityManagement',\n                name: 'liquidityManagement',\n                type: 'tuple',\n            },\n        ],\n        name: 'PoolRegistered',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'contract IProtocolFeeController',\n                name: 'newProtocolFeeController',\n                type: 'address',\n            },\n        ],\n        name: 'ProtocolFeeControllerChanged',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'pool',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'contract IERC20',\n                name: 'tokenIn',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'contract IERC20',\n                name: 'tokenOut',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'amountIn',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'amountOut',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'swapFeePercentage',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'swapFeeAmount',\n                type: 'uint256',\n            },\n        ],\n        name: 'Swap',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'pool',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'swapFeePercentage',\n                type: 'uint256',\n            },\n        ],\n        name: 'SwapFeePercentageChanged',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'pool',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'from',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'value',\n                type: 'uint256',\n            },\n        ],\n        name: 'Transfer',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'contract IERC4626',\n                name: 'wrappedToken',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'burnedShares',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'withdrawnUnderlying',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'bytes32',\n                name: 'bufferBalances',\n                type: 'bytes32',\n            },\n        ],\n        name: 'Unwrap',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'pool',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'bytes32',\n                name: 'eventKey',\n                type: 'bytes32',\n            },\n            {\n                indexed: false,\n                internalType: 'bytes',\n                name: 'eventData',\n                type: 'bytes',\n            },\n        ],\n        name: 'VaultAuxiliary',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'bool',\n                name: 'paused',\n                type: 'bool',\n            },\n        ],\n        name: 'VaultBuffersPausedStateChanged',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'bool',\n                name: 'paused',\n                type: 'bool',\n            },\n        ],\n        name: 'VaultPausedStateChanged',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [],\n        name: 'VaultQueriesDisabled',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [],\n        name: 'VaultQueriesEnabled',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'contract IERC4626',\n                name: 'wrappedToken',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'depositedUnderlying',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'mintedShares',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'bytes32',\n                name: 'bufferBalances',\n                type: 'bytes32',\n            },\n        ],\n        name: 'Wrap',\n        type: 'event',\n    },\n    { stateMutability: 'payable', type: 'fallback' },\n    {\n        inputs: [\n            {\n                internalType: 'contract IERC4626',\n                name: 'wrappedToken',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'maxAmountUnderlyingInRaw',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'maxAmountWrappedInRaw',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'exactSharesToIssue',\n                type: 'uint256',\n            },\n            { internalType: 'address', name: 'sharesOwner', type: 'address' },\n        ],\n        name: 'addLiquidityToBuffer',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'amountUnderlyingRaw',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountWrappedRaw',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'areBuffersPaused',\n        outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'pool', type: 'address' }],\n        name: 'collectAggregateFees',\n        outputs: [\n            {\n                internalType: 'uint256[]',\n                name: 'totalSwapFees',\n                type: 'uint256[]',\n            },\n            {\n                internalType: 'uint256[]',\n                name: 'totalYieldFees',\n                type: 'uint256[]',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'disableQuery',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'disableQueryPermanently',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'pool', type: 'address' }],\n        name: 'disableRecoveryMode',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'enableQuery',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'pool', type: 'address' }],\n        name: 'enableRecoveryMode',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [{ internalType: 'bytes4', name: 'selector', type: 'bytes4' }],\n        name: 'getActionId',\n        outputs: [{ internalType: 'bytes32', name: '', type: 'bytes32' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IERC4626',\n                name: 'wrappedToken',\n                type: 'address',\n            },\n        ],\n        name: 'getBufferAsset',\n        outputs: [\n            {\n                internalType: 'address',\n                name: 'underlyingToken',\n                type: 'address',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IERC4626',\n                name: 'token',\n                type: 'address',\n            },\n        ],\n        name: 'getBufferBalance',\n        outputs: [\n            { internalType: 'uint256', name: '', type: 'uint256' },\n            { internalType: 'uint256', name: '', type: 'uint256' },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getBufferMinimumTotalSupply',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'pure',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IERC4626',\n                name: 'token',\n                type: 'address',\n            },\n            { internalType: 'address', name: 'user', type: 'address' },\n        ],\n        name: 'getBufferOwnerShares',\n        outputs: [{ internalType: 'uint256', name: 'shares', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getBufferPeriodDuration',\n        outputs: [{ internalType: 'uint32', name: '', type: 'uint32' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getBufferPeriodEndTime',\n        outputs: [{ internalType: 'uint32', name: '', type: 'uint32' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IERC4626',\n                name: 'token',\n                type: 'address',\n            },\n        ],\n        name: 'getBufferTotalShares',\n        outputs: [{ internalType: 'uint256', name: 'shares', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getMaximumPoolTokens',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'pure',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getMinimumPoolTokens',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'pure',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getMinimumTradeAmount',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getMinimumWrapAmount',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getPauseWindowEndTime',\n        outputs: [{ internalType: 'uint32', name: '', type: 'uint32' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getPoolMinimumTotalSupply',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'pure',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getVaultPausedState',\n        outputs: [\n            { internalType: 'bool', name: '', type: 'bool' },\n            { internalType: 'uint32', name: '', type: 'uint32' },\n            { internalType: 'uint32', name: '', type: 'uint32' },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IERC4626',\n                name: 'wrappedToken',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountUnderlyingRaw',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amountWrappedRaw',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'minIssuedShares',\n                type: 'uint256',\n            },\n            { internalType: 'address', name: 'sharesOwner', type: 'address' },\n        ],\n        name: 'initializeBuffer',\n        outputs: [\n            { internalType: 'uint256', name: 'issuedShares', type: 'uint256' },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'isVaultPaused',\n        outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'pool', type: 'address' }],\n        name: 'pausePool',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'pauseVault',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'pauseVaultBuffers',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'reentrancyGuardEntered',\n        outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IERC4626',\n                name: 'wrappedToken',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'sharesToRemove',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'minAmountUnderlyingOutRaw',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'minAmountWrappedOutRaw',\n                type: 'uint256',\n            },\n        ],\n        name: 'removeLiquidityFromBuffer',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'removedUnderlyingBalanceRaw',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'removedWrappedBalanceRaw',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IERC4626',\n                name: 'wrappedToken',\n                type: 'address',\n            },\n            {\n                internalType: 'uint256',\n                name: 'sharesToRemove',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'minAmountUnderlyingOutRaw',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'minAmountWrappedOutRaw',\n                type: 'uint256',\n            },\n            { internalType: 'address', name: 'sharesOwner', type: 'address' },\n        ],\n        name: 'removeLiquidityFromBufferHook',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'removedUnderlyingBalanceRaw',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'removedWrappedBalanceRaw',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IAuthorizer',\n                name: 'newAuthorizer',\n                type: 'address',\n            },\n        ],\n        name: 'setAuthorizer',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IProtocolFeeController',\n                name: 'newProtocolFeeController',\n                type: 'address',\n            },\n        ],\n        name: 'setProtocolFeeController',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'pool', type: 'address' },\n            {\n                internalType: 'uint256',\n                name: 'swapFeePercentage',\n                type: 'uint256',\n            },\n        ],\n        name: 'setStaticSwapFeePercentage',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'pool', type: 'address' }],\n        name: 'unpausePool',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'unpauseVault',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'unpauseVaultBuffers',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'pool', type: 'address' },\n            {\n                internalType: 'uint256',\n                name: 'newAggregateSwapFeePercentage',\n                type: 'uint256',\n            },\n        ],\n        name: 'updateAggregateSwapFeePercentage',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'pool', type: 'address' },\n            {\n                internalType: 'uint256',\n                name: 'newAggregateYieldFeePercentage',\n                type: 'uint256',\n            },\n        ],\n        name: 'updateAggregateYieldFeePercentage',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'vault',\n        outputs: [\n            { internalType: 'contract IVault', name: '', type: 'address' },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    { stateMutability: 'payable', type: 'receive' },\n] as const;\n","export const stablePoolAbi_V3 = [\n    {\n        inputs: [\n            {\n                components: [\n                    { internalType: 'string', name: 'name', type: 'string' },\n                    { internalType: 'string', name: 'symbol', type: 'string' },\n                    {\n                        internalType: 'uint256',\n                        name: 'amplificationParameter',\n                        type: 'uint256',\n                    },\n                    { internalType: 'string', name: 'version', type: 'string' },\n                ],\n                internalType: 'struct StablePool.NewPoolParams',\n                name: 'params',\n                type: 'tuple',\n            },\n            { internalType: 'contract IVault', name: 'vault', type: 'address' },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'constructor',\n    },\n    { inputs: [], name: 'AmpUpdateAlreadyStarted', type: 'error' },\n    { inputs: [], name: 'AmpUpdateDurationTooShort', type: 'error' },\n    { inputs: [], name: 'AmpUpdateNotStarted', type: 'error' },\n    { inputs: [], name: 'AmpUpdateRateTooFast', type: 'error' },\n    { inputs: [], name: 'AmplificationFactorTooHigh', type: 'error' },\n    { inputs: [], name: 'AmplificationFactorTooLow', type: 'error' },\n    { inputs: [], name: 'ECDSAInvalidSignature', type: 'error' },\n    {\n        inputs: [{ internalType: 'uint256', name: 'length', type: 'uint256' }],\n        name: 'ECDSAInvalidSignatureLength',\n        type: 'error',\n    },\n    {\n        inputs: [{ internalType: 'bytes32', name: 's', type: 'bytes32' }],\n        name: 'ECDSAInvalidSignatureS',\n        type: 'error',\n    },\n    {\n        inputs: [\n            { internalType: 'uint256', name: 'deadline', type: 'uint256' },\n        ],\n        name: 'ERC2612ExpiredSignature',\n        type: 'error',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'signer', type: 'address' },\n            { internalType: 'address', name: 'owner', type: 'address' },\n        ],\n        name: 'ERC2612InvalidSigner',\n        type: 'error',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'account', type: 'address' },\n            { internalType: 'uint256', name: 'currentNonce', type: 'uint256' },\n        ],\n        name: 'InvalidAccountNonce',\n        type: 'error',\n    },\n    { inputs: [], name: 'InvalidShortString', type: 'error' },\n    {\n        inputs: [\n            { internalType: 'uint8', name: 'bits', type: 'uint8' },\n            { internalType: 'uint256', name: 'value', type: 'uint256' },\n        ],\n        name: 'SafeCastOverflowedUintDowncast',\n        type: 'error',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'sender', type: 'address' }],\n        name: 'SenderIsNotVault',\n        type: 'error',\n    },\n    { inputs: [], name: 'SenderNotAllowed', type: 'error' },\n    { inputs: [], name: 'StableComputeBalanceDidNotConverge', type: 'error' },\n    { inputs: [], name: 'StableInvariantDidNotConverge', type: 'error' },\n    {\n        inputs: [{ internalType: 'string', name: 'str', type: 'string' }],\n        name: 'StringTooLong',\n        type: 'error',\n    },\n    { inputs: [], name: 'ZeroDivision', type: 'error' },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'startValue',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'endValue',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'startTime',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'endTime',\n                type: 'uint256',\n            },\n        ],\n        name: 'AmpUpdateStarted',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'currentValue',\n                type: 'uint256',\n            },\n        ],\n        name: 'AmpUpdateStopped',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'owner',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'spender',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'value',\n                type: 'uint256',\n            },\n        ],\n        name: 'Approval',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [],\n        name: 'EIP712DomainChanged',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'from',\n                type: 'address',\n            },\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'to',\n                type: 'address',\n            },\n            {\n                indexed: false,\n                internalType: 'uint256',\n                name: 'value',\n                type: 'uint256',\n            },\n        ],\n        name: 'Transfer',\n        type: 'event',\n    },\n    {\n        inputs: [],\n        name: 'DOMAIN_SEPARATOR',\n        outputs: [{ internalType: 'bytes32', name: '', type: 'bytes32' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'PERMIT_TYPEHASH',\n        outputs: [{ internalType: 'bytes32', name: '', type: 'bytes32' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'owner', type: 'address' },\n            { internalType: 'address', name: 'spender', type: 'address' },\n        ],\n        name: 'allowance',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'spender', type: 'address' },\n            { internalType: 'uint256', name: 'amount', type: 'uint256' },\n        ],\n        name: 'approve',\n        outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'account', type: 'address' }],\n        name: 'balanceOf',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256[]',\n                name: 'balancesLiveScaled18',\n                type: 'uint256[]',\n            },\n            { internalType: 'uint256', name: 'tokenInIndex', type: 'uint256' },\n            {\n                internalType: 'uint256',\n                name: 'invariantRatio',\n                type: 'uint256',\n            },\n        ],\n        name: 'computeBalance',\n        outputs: [\n            { internalType: 'uint256', name: 'newBalance', type: 'uint256' },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'uint256[]',\n                name: 'balancesLiveScaled18',\n                type: 'uint256[]',\n            },\n            { internalType: 'enum Rounding', name: 'rounding', type: 'uint8' },\n        ],\n        name: 'computeInvariant',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'decimals',\n        outputs: [{ internalType: 'uint8', name: '', type: 'uint8' }],\n        stateMutability: 'pure',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'eip712Domain',\n        outputs: [\n            { internalType: 'bytes1', name: 'fields', type: 'bytes1' },\n            { internalType: 'string', name: 'name', type: 'string' },\n            { internalType: 'string', name: 'version', type: 'string' },\n            { internalType: 'uint256', name: 'chainId', type: 'uint256' },\n            {\n                internalType: 'address',\n                name: 'verifyingContract',\n                type: 'address',\n            },\n            { internalType: 'bytes32', name: 'salt', type: 'bytes32' },\n            {\n                internalType: 'uint256[]',\n                name: 'extensions',\n                type: 'uint256[]',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'owner', type: 'address' },\n            { internalType: 'address', name: 'spender', type: 'address' },\n            { internalType: 'uint256', name: 'amount', type: 'uint256' },\n        ],\n        name: 'emitApproval',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'from', type: 'address' },\n            { internalType: 'address', name: 'to', type: 'address' },\n            { internalType: 'uint256', name: 'amount', type: 'uint256' },\n        ],\n        name: 'emitTransfer',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [{ internalType: 'bytes4', name: 'selector', type: 'bytes4' }],\n        name: 'getActionId',\n        outputs: [{ internalType: 'bytes32', name: '', type: 'bytes32' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getAggregateFeePercentages',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'aggregateSwapFeePercentage',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256',\n                name: 'aggregateYieldFeePercentage',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getAmplificationParameter',\n        outputs: [\n            { internalType: 'uint256', name: 'value', type: 'uint256' },\n            { internalType: 'bool', name: 'isUpdating', type: 'bool' },\n            { internalType: 'uint256', name: 'precision', type: 'uint256' },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getAmplificationState',\n        outputs: [\n            {\n                components: [\n                    {\n                        internalType: 'uint64',\n                        name: 'startValue',\n                        type: 'uint64',\n                    },\n                    {\n                        internalType: 'uint64',\n                        name: 'endValue',\n                        type: 'uint64',\n                    },\n                    {\n                        internalType: 'uint32',\n                        name: 'startTime',\n                        type: 'uint32',\n                    },\n                    { internalType: 'uint32', name: 'endTime', type: 'uint32' },\n                ],\n                internalType: 'struct AmplificationState',\n                name: 'amplificationState',\n                type: 'tuple',\n            },\n            { internalType: 'uint256', name: 'precision', type: 'uint256' },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getCurrentLiveBalances',\n        outputs: [\n            {\n                internalType: 'uint256[]',\n                name: 'balancesLiveScaled18',\n                type: 'uint256[]',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getMaximumInvariantRatio',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'pure',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getMaximumSwapFeePercentage',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'pure',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getMinimumInvariantRatio',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'pure',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getMinimumSwapFeePercentage',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'pure',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getRate',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getStablePoolDynamicData',\n        outputs: [\n            {\n                components: [\n                    {\n                        internalType: 'uint256[]',\n                        name: 'balancesLiveScaled18',\n                        type: 'uint256[]',\n                    },\n                    {\n                        internalType: 'uint256[]',\n                        name: 'tokenRates',\n                        type: 'uint256[]',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'staticSwapFeePercentage',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'totalSupply',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'bptRate',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'amplificationParameter',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'startValue',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'endValue',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint32',\n                        name: 'startTime',\n                        type: 'uint32',\n                    },\n                    { internalType: 'uint32', name: 'endTime', type: 'uint32' },\n                    {\n                        internalType: 'bool',\n                        name: 'isAmpUpdating',\n                        type: 'bool',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'isPoolInitialized',\n                        type: 'bool',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'isPoolPaused',\n                        type: 'bool',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'isPoolInRecoveryMode',\n                        type: 'bool',\n                    },\n                ],\n                internalType: 'struct StablePoolDynamicData',\n                name: 'data',\n                type: 'tuple',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getStablePoolImmutableData',\n        outputs: [\n            {\n                components: [\n                    {\n                        internalType: 'contract IERC20[]',\n                        name: 'tokens',\n                        type: 'address[]',\n                    },\n                    {\n                        internalType: 'uint256[]',\n                        name: 'decimalScalingFactors',\n                        type: 'uint256[]',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'amplificationParameterPrecision',\n                        type: 'uint256',\n                    },\n                ],\n                internalType: 'struct StablePoolImmutableData',\n                name: 'data',\n                type: 'tuple',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getStaticSwapFeePercentage',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getTokenInfo',\n        outputs: [\n            {\n                internalType: 'contract IERC20[]',\n                name: 'tokens',\n                type: 'address[]',\n            },\n            {\n                components: [\n                    {\n                        internalType: 'enum TokenType',\n                        name: 'tokenType',\n                        type: 'uint8',\n                    },\n                    {\n                        internalType: 'contract IRateProvider',\n                        name: 'rateProvider',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'paysYieldFees',\n                        type: 'bool',\n                    },\n                ],\n                internalType: 'struct TokenInfo[]',\n                name: 'tokenInfo',\n                type: 'tuple[]',\n            },\n            {\n                internalType: 'uint256[]',\n                name: 'balancesRaw',\n                type: 'uint256[]',\n            },\n            {\n                internalType: 'uint256[]',\n                name: 'lastBalancesLiveScaled18',\n                type: 'uint256[]',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getTokens',\n        outputs: [\n            {\n                internalType: 'contract IERC20[]',\n                name: 'tokens',\n                type: 'address[]',\n            },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getVault',\n        outputs: [\n            { internalType: 'contract IVault', name: '', type: 'address' },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'incrementNonce',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'name',\n        outputs: [{ internalType: 'string', name: '', type: 'string' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'owner', type: 'address' }],\n        name: 'nonces',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'enum SwapKind',\n                        name: 'kind',\n                        type: 'uint8',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'amountGivenScaled18',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint256[]',\n                        name: 'balancesScaled18',\n                        type: 'uint256[]',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'indexIn',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'indexOut',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'router',\n                        type: 'address',\n                    },\n                    { internalType: 'bytes', name: 'userData', type: 'bytes' },\n                ],\n                internalType: 'struct PoolSwapParams',\n                name: 'request',\n                type: 'tuple',\n            },\n        ],\n        name: 'onSwap',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'owner', type: 'address' },\n            { internalType: 'address', name: 'spender', type: 'address' },\n            { internalType: 'uint256', name: 'amount', type: 'uint256' },\n            { internalType: 'uint256', name: 'deadline', type: 'uint256' },\n            { internalType: 'uint8', name: 'v', type: 'uint8' },\n            { internalType: 'bytes32', name: 'r', type: 'bytes32' },\n            { internalType: 'bytes32', name: 's', type: 'bytes32' },\n        ],\n        name: 'permit',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'uint256', name: 'rawEndValue', type: 'uint256' },\n            { internalType: 'uint256', name: 'endTime', type: 'uint256' },\n        ],\n        name: 'startAmplificationParameterUpdate',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'stopAmplificationParameterUpdate',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'bytes4', name: 'interfaceId', type: 'bytes4' },\n        ],\n        name: 'supportsInterface',\n        outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'symbol',\n        outputs: [{ internalType: 'string', name: '', type: 'string' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'totalSupply',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'to', type: 'address' },\n            { internalType: 'uint256', name: 'amount', type: 'uint256' },\n        ],\n        name: 'transfer',\n        outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'from', type: 'address' },\n            { internalType: 'address', name: 'to', type: 'address' },\n            { internalType: 'uint256', name: 'amount', type: 'uint256' },\n        ],\n        name: 'transferFrom',\n        outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'version',\n        outputs: [{ internalType: 'string', name: '', type: 'string' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n] as const;\n","export const stablePoolFactoryAbi_V3 = [\n    {\n        inputs: [\n            { internalType: 'contract IVault', name: 'vault', type: 'address' },\n            {\n                internalType: 'uint32',\n                name: 'pauseWindowDuration',\n                type: 'uint32',\n            },\n            { internalType: 'string', name: 'factoryVersion', type: 'string' },\n            { internalType: 'string', name: 'poolVersion', type: 'string' },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'constructor',\n    },\n    { inputs: [], name: 'Create2EmptyBytecode', type: 'error' },\n    { inputs: [], name: 'Create2FailedDeployment', type: 'error' },\n    {\n        inputs: [\n            { internalType: 'uint256', name: 'balance', type: 'uint256' },\n            { internalType: 'uint256', name: 'needed', type: 'uint256' },\n        ],\n        name: 'Create2InsufficientBalance',\n        type: 'error',\n    },\n    { inputs: [], name: 'Disabled', type: 'error' },\n    { inputs: [], name: 'IndexOutOfBounds', type: 'error' },\n    { inputs: [], name: 'MaxTokens', type: 'error' },\n    { inputs: [], name: 'PoolPauseWindowDurationOverflow', type: 'error' },\n    { inputs: [], name: 'SenderNotAllowed', type: 'error' },\n    { inputs: [], name: 'StandardPoolWithCreator', type: 'error' },\n    { anonymous: false, inputs: [], name: 'FactoryDisabled', type: 'event' },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: 'address',\n                name: 'pool',\n                type: 'address',\n            },\n        ],\n        name: 'PoolCreated',\n        type: 'event',\n    },\n    {\n        inputs: [\n            { internalType: 'string', name: 'name', type: 'string' },\n            { internalType: 'string', name: 'symbol', type: 'string' },\n            {\n                components: [\n                    {\n                        internalType: 'contract IERC20',\n                        name: 'token',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'enum TokenType',\n                        name: 'tokenType',\n                        type: 'uint8',\n                    },\n                    {\n                        internalType: 'contract IRateProvider',\n                        name: 'rateProvider',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'paysYieldFees',\n                        type: 'bool',\n                    },\n                ],\n                internalType: 'struct TokenConfig[]',\n                name: 'tokens',\n                type: 'tuple[]',\n            },\n            {\n                internalType: 'uint256',\n                name: 'amplificationParameter',\n                type: 'uint256',\n            },\n            {\n                components: [\n                    {\n                        internalType: 'address',\n                        name: 'pauseManager',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'swapFeeManager',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'poolCreator',\n                        type: 'address',\n                    },\n                ],\n                internalType: 'struct PoolRoleAccounts',\n                name: 'roleAccounts',\n                type: 'tuple',\n            },\n            {\n                internalType: 'uint256',\n                name: 'swapFeePercentage',\n                type: 'uint256',\n            },\n            {\n                internalType: 'address',\n                name: 'poolHooksContract',\n                type: 'address',\n            },\n            { internalType: 'bool', name: 'enableDonation', type: 'bool' },\n            {\n                internalType: 'bool',\n                name: 'disableUnbalancedLiquidity',\n                type: 'bool',\n            },\n            { internalType: 'bytes32', name: 'salt', type: 'bytes32' },\n        ],\n        name: 'create',\n        outputs: [{ internalType: 'address', name: 'pool', type: 'address' }],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'disable',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [{ internalType: 'bytes4', name: 'selector', type: 'bytes4' }],\n        name: 'getActionId',\n        outputs: [{ internalType: 'bytes32', name: '', type: 'bytes32' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getAuthorizer',\n        outputs: [\n            { internalType: 'contract IAuthorizer', name: '', type: 'address' },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getDefaultLiquidityManagement',\n        outputs: [\n            {\n                components: [\n                    {\n                        internalType: 'bool',\n                        name: 'disableUnbalancedLiquidity',\n                        type: 'bool',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'enableAddLiquidityCustom',\n                        type: 'bool',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'enableRemoveLiquidityCustom',\n                        type: 'bool',\n                    },\n                    {\n                        internalType: 'bool',\n                        name: 'enableDonation',\n                        type: 'bool',\n                    },\n                ],\n                internalType: 'struct LiquidityManagement',\n                name: 'liquidityManagement',\n                type: 'tuple',\n            },\n        ],\n        stateMutability: 'pure',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getDefaultPoolHooksContract',\n        outputs: [{ internalType: 'address', name: '', type: 'address' }],\n        stateMutability: 'pure',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'bytes', name: 'constructorArgs', type: 'bytes' },\n            { internalType: 'bytes32', name: 'salt', type: 'bytes32' },\n        ],\n        name: 'getDeploymentAddress',\n        outputs: [{ internalType: 'address', name: '', type: 'address' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getNewPoolPauseWindowEndTime',\n        outputs: [{ internalType: 'uint32', name: '', type: 'uint32' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getOriginalPauseWindowEndTime',\n        outputs: [{ internalType: 'uint32', name: '', type: 'uint32' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getPauseWindowDuration',\n        outputs: [{ internalType: 'uint32', name: '', type: 'uint32' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getPoolCount',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getPoolVersion',\n        outputs: [{ internalType: 'string', name: '', type: 'string' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getPools',\n        outputs: [{ internalType: 'address[]', name: '', type: 'address[]' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'uint256', name: 'start', type: 'uint256' },\n            { internalType: 'uint256', name: 'count', type: 'uint256' },\n        ],\n        name: 'getPoolsInRange',\n        outputs: [\n            { internalType: 'address[]', name: 'pools', type: 'address[]' },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getVault',\n        outputs: [\n            { internalType: 'contract IVault', name: '', type: 'address' },\n        ],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'isDisabled',\n        outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'pool', type: 'address' }],\n        name: 'isPoolFromFactory',\n        outputs: [{ internalType: 'bool', name: '', type: 'bool' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'version',\n        outputs: [{ internalType: 'string', name: '', type: 'string' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n] as const;\n","export const balancerCompositeLiquidityRouterAbi = [\n    {\n        inputs: [\n            { internalType: 'contract IVault', name: 'vault', type: 'address' },\n            { internalType: 'contract IWETH', name: 'weth', type: 'address' },\n            {\n                internalType: 'contract IPermit2',\n                name: 'permit2',\n                type: 'address',\n            },\n            { internalType: 'string', name: 'routerVersion', type: 'string' },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'constructor',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'target', type: 'address' }],\n        name: 'AddressEmptyCode',\n        type: 'error',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'account', type: 'address' }],\n        name: 'AddressInsufficientBalance',\n        type: 'error',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IERC20',\n                name: 'tokenIn',\n                type: 'address',\n            },\n            { internalType: 'uint256', name: 'amountIn', type: 'uint256' },\n            { internalType: 'uint256', name: 'maxAmountIn', type: 'uint256' },\n        ],\n        name: 'AmountInAboveMax',\n        type: 'error',\n    },\n    {\n        inputs: [\n            {\n                internalType: 'contract IERC20',\n                name: 'tokenOut',\n                type: 'address',\n            },\n            { internalType: 'uint256', name: 'amountOut', type: 'uint256' },\n            { internalType: 'uint256', name: 'minAmountOut', type: 'uint256' },\n        ],\n        name: 'AmountOutBelowMin',\n        type: 'error',\n    },\n    { inputs: [], name: 'ElementNotFound', type: 'error' },\n    { inputs: [], name: 'ErrorSelectorNotFound', type: 'error' },\n    { inputs: [], name: 'EthTransfer', type: 'error' },\n    { inputs: [], name: 'FailedInnerCall', type: 'error' },\n    { inputs: [], name: 'InputLengthMismatch', type: 'error' },\n    { inputs: [], name: 'InsufficientEth', type: 'error' },\n    { inputs: [], name: 'ReentrancyGuardReentrantCall', type: 'error' },\n    {\n        inputs: [\n            { internalType: 'uint8', name: 'bits', type: 'uint8' },\n            { internalType: 'uint256', name: 'value', type: 'uint256' },\n        ],\n        name: 'SafeCastOverflowedUintDowncast',\n        type: 'error',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'token', type: 'address' }],\n        name: 'SafeERC20FailedOperation',\n        type: 'error',\n    },\n    {\n        inputs: [{ internalType: 'address', name: 'sender', type: 'address' }],\n        name: 'SenderIsNotVault',\n        type: 'error',\n    },\n    { inputs: [], name: 'SwapDeadline', type: 'error' },\n    { inputs: [], name: 'TransientIndexOutOfBounds', type: 'error' },\n    {\n        inputs: [\n            {\n                internalType: 'address[]',\n                name: 'expectedTokensOut',\n                type: 'address[]',\n            },\n            { internalType: 'address[]', name: 'tokensOut', type: 'address[]' },\n        ],\n        name: 'WrongTokensOut',\n        type: 'error',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'address',\n                        name: 'sender',\n                        type: 'address',\n                    },\n                    { internalType: 'address', name: 'pool', type: 'address' },\n                    {\n                        internalType: 'uint256[]',\n                        name: 'maxAmountsIn',\n                        type: 'uint256[]',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'minBptAmountOut',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'enum AddLiquidityKind',\n                        name: 'kind',\n                        type: 'uint8',\n                    },\n                    { internalType: 'bool', name: 'wethIsEth', type: 'bool' },\n                    { internalType: 'bytes', name: 'userData', type: 'bytes' },\n                ],\n                internalType: 'struct IRouterCommon.AddLiquidityHookParams',\n                name: 'params',\n                type: 'tuple',\n            },\n        ],\n        name: 'addLiquidityERC4626PoolProportionalHook',\n        outputs: [\n            {\n                internalType: 'uint256[]',\n                name: 'underlyingAmountsIn',\n                type: 'uint256[]',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'address',\n                        name: 'sender',\n                        type: 'address',\n                    },\n                    { internalType: 'address', name: 'pool', type: 'address' },\n                    {\n                        internalType: 'uint256[]',\n                        name: 'maxAmountsIn',\n                        type: 'uint256[]',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'minBptAmountOut',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'enum AddLiquidityKind',\n                        name: 'kind',\n                        type: 'uint8',\n                    },\n                    { internalType: 'bool', name: 'wethIsEth', type: 'bool' },\n                    { internalType: 'bytes', name: 'userData', type: 'bytes' },\n                ],\n                internalType: 'struct IRouterCommon.AddLiquidityHookParams',\n                name: 'params',\n                type: 'tuple',\n            },\n        ],\n        name: 'addLiquidityERC4626PoolUnbalancedHook',\n        outputs: [\n            { internalType: 'uint256', name: 'bptAmountOut', type: 'uint256' },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'pool', type: 'address' },\n            {\n                internalType: 'uint256[]',\n                name: 'maxUnderlyingAmountsIn',\n                type: 'uint256[]',\n            },\n            {\n                internalType: 'uint256',\n                name: 'exactBptAmountOut',\n                type: 'uint256',\n            },\n            { internalType: 'bool', name: 'wethIsEth', type: 'bool' },\n            { internalType: 'bytes', name: 'userData', type: 'bytes' },\n        ],\n        name: 'addLiquidityProportionalToERC4626Pool',\n        outputs: [\n            {\n                internalType: 'uint256[]',\n                name: 'underlyingAmountsIn',\n                type: 'uint256[]',\n            },\n        ],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'parentPool', type: 'address' },\n            { internalType: 'address[]', name: 'tokensIn', type: 'address[]' },\n            {\n                internalType: 'uint256[]',\n                name: 'exactAmountsIn',\n                type: 'uint256[]',\n            },\n            {\n                internalType: 'uint256',\n                name: 'minBptAmountOut',\n                type: 'uint256',\n            },\n            { internalType: 'bool', name: 'wethIsEth', type: 'bool' },\n            { internalType: 'bytes', name: 'userData', type: 'bytes' },\n        ],\n        name: 'addLiquidityUnbalancedNestedPool',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'address',\n                        name: 'sender',\n                        type: 'address',\n                    },\n                    { internalType: 'address', name: 'pool', type: 'address' },\n                    {\n                        internalType: 'uint256[]',\n                        name: 'maxAmountsIn',\n                        type: 'uint256[]',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'minBptAmountOut',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'enum AddLiquidityKind',\n                        name: 'kind',\n                        type: 'uint8',\n                    },\n                    { internalType: 'bool', name: 'wethIsEth', type: 'bool' },\n                    { internalType: 'bytes', name: 'userData', type: 'bytes' },\n                ],\n                internalType: 'struct IRouterCommon.AddLiquidityHookParams',\n                name: 'params',\n                type: 'tuple',\n            },\n            { internalType: 'address[]', name: 'tokensIn', type: 'address[]' },\n        ],\n        name: 'addLiquidityUnbalancedNestedPoolHook',\n        outputs: [\n            {\n                internalType: 'uint256',\n                name: 'exactBptAmountOut',\n                type: 'uint256',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'pool', type: 'address' },\n            {\n                internalType: 'uint256[]',\n                name: 'exactUnderlyingAmountsIn',\n                type: 'uint256[]',\n            },\n            {\n                internalType: 'uint256',\n                name: 'minBptAmountOut',\n                type: 'uint256',\n            },\n            { internalType: 'bool', name: 'wethIsEth', type: 'bool' },\n            { internalType: 'bytes', name: 'userData', type: 'bytes' },\n        ],\n        name: 'addLiquidityUnbalancedToERC4626Pool',\n        outputs: [\n            { internalType: 'uint256', name: 'bptAmountOut', type: 'uint256' },\n        ],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'getSender',\n        outputs: [{ internalType: 'address', name: '', type: 'address' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        inputs: [{ internalType: 'bytes[]', name: 'data', type: 'bytes[]' }],\n        name: 'multicall',\n        outputs: [\n            { internalType: 'bytes[]', name: 'results', type: 'bytes[]' },\n        ],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    { internalType: 'address', name: 'token', type: 'address' },\n                    { internalType: 'address', name: 'owner', type: 'address' },\n                    {\n                        internalType: 'address',\n                        name: 'spender',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'amount',\n                        type: 'uint256',\n                    },\n                    { internalType: 'uint256', name: 'nonce', type: 'uint256' },\n                    {\n                        internalType: 'uint256',\n                        name: 'deadline',\n                        type: 'uint256',\n                    },\n                ],\n                internalType: 'struct IRouterCommon.PermitApproval[]',\n                name: 'permitBatch',\n                type: 'tuple[]',\n            },\n            {\n                internalType: 'bytes[]',\n                name: 'permitSignatures',\n                type: 'bytes[]',\n            },\n            {\n                components: [\n                    {\n                        components: [\n                            {\n                                internalType: 'address',\n                                name: 'token',\n                                type: 'address',\n                            },\n                            {\n                                internalType: 'uint160',\n                                name: 'amount',\n                                type: 'uint160',\n                            },\n                            {\n                                internalType: 'uint48',\n                                name: 'expiration',\n                                type: 'uint48',\n                            },\n                            {\n                                internalType: 'uint48',\n                                name: 'nonce',\n                                type: 'uint48',\n                            },\n                        ],\n                        internalType:\n                            'struct IAllowanceTransfer.PermitDetails[]',\n                        name: 'details',\n                        type: 'tuple[]',\n                    },\n                    {\n                        internalType: 'address',\n                        name: 'spender',\n                        type: 'address',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'sigDeadline',\n                        type: 'uint256',\n                    },\n                ],\n                internalType: 'struct IAllowanceTransfer.PermitBatch',\n                name: 'permit2Batch',\n                type: 'tuple',\n            },\n            { internalType: 'bytes', name: 'permit2Signature', type: 'bytes' },\n            { internalType: 'bytes[]', name: 'multicallData', type: 'bytes[]' },\n        ],\n        name: 'permitBatchAndCall',\n        outputs: [\n            { internalType: 'bytes[]', name: 'results', type: 'bytes[]' },\n        ],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'pool', type: 'address' },\n            {\n                internalType: 'uint256',\n                name: 'exactBptAmountOut',\n                type: 'uint256',\n            },\n            { internalType: 'address', name: 'sender', type: 'address' },\n            { internalType: 'bytes', name: 'userData', type: 'bytes' },\n        ],\n        name: 'queryAddLiquidityProportionalToERC4626Pool',\n        outputs: [\n            {\n                internalType: 'uint256[]',\n                name: 'underlyingAmountsIn',\n                type: 'uint256[]',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'parentPool', type: 'address' },\n            { internalType: 'address[]', name: 'tokensIn', type: 'address[]' },\n            {\n                internalType: 'uint256[]',\n                name: 'exactAmountsIn',\n                type: 'uint256[]',\n            },\n            { internalType: 'address', name: 'sender', type: 'address' },\n            { internalType: 'bytes', name: 'userData', type: 'bytes' },\n        ],\n        name: 'queryAddLiquidityUnbalancedNestedPool',\n        outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'pool', type: 'address' },\n            {\n                internalType: 'uint256[]',\n                name: 'exactUnderlyingAmountsIn',\n                type: 'uint256[]',\n            },\n            { internalType: 'address', name: 'sender', type: 'address' },\n            { internalType: 'bytes', name: 'userData', type: 'bytes' },\n        ],\n        name: 'queryAddLiquidityUnbalancedToERC4626Pool',\n        outputs: [\n            { internalType: 'uint256', name: 'bptAmountOut', type: 'uint256' },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'pool', type: 'address' },\n            {\n                internalType: 'uint256',\n                name: 'exactBptAmountIn',\n                type: 'uint256',\n            },\n            { internalType: 'address', name: 'sender', type: 'address' },\n            { internalType: 'bytes', name: 'userData', type: 'bytes' },\n        ],\n        name: 'queryRemoveLiquidityProportionalFromERC4626Pool',\n        outputs: [\n            {\n                internalType: 'uint256[]',\n                name: 'underlyingAmountsOut',\n                type: 'uint256[]',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'parentPool', type: 'address' },\n            {\n                internalType: 'uint256',\n                name: 'exactBptAmountIn',\n                type: 'uint256',\n            },\n            { internalType: 'address[]', name: 'tokensOut', type: 'address[]' },\n            { internalType: 'address', name: 'sender', type: 'address' },\n            { internalType: 'bytes', name: 'userData', type: 'bytes' },\n        ],\n        name: 'queryRemoveLiquidityProportionalNestedPool',\n        outputs: [\n            {\n                internalType: 'uint256[]',\n                name: 'amountsOut',\n                type: 'uint256[]',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'address',\n                        name: 'sender',\n                        type: 'address',\n                    },\n                    { internalType: 'address', name: 'pool', type: 'address' },\n                    {\n                        internalType: 'uint256[]',\n                        name: 'minAmountsOut',\n                        type: 'uint256[]',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'maxBptAmountIn',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'enum RemoveLiquidityKind',\n                        name: 'kind',\n                        type: 'uint8',\n                    },\n                    { internalType: 'bool', name: 'wethIsEth', type: 'bool' },\n                    { internalType: 'bytes', name: 'userData', type: 'bytes' },\n                ],\n                internalType: 'struct IRouterCommon.RemoveLiquidityHookParams',\n                name: 'params',\n                type: 'tuple',\n            },\n        ],\n        name: 'removeLiquidityERC4626PoolProportionalHook',\n        outputs: [\n            {\n                internalType: 'uint256[]',\n                name: 'underlyingAmountsOut',\n                type: 'uint256[]',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'pool', type: 'address' },\n            {\n                internalType: 'uint256',\n                name: 'exactBptAmountIn',\n                type: 'uint256',\n            },\n            {\n                internalType: 'uint256[]',\n                name: 'minUnderlyingAmountsOut',\n                type: 'uint256[]',\n            },\n            { internalType: 'bool', name: 'wethIsEth', type: 'bool' },\n            { internalType: 'bytes', name: 'userData', type: 'bytes' },\n        ],\n        name: 'removeLiquidityProportionalFromERC4626Pool',\n        outputs: [\n            {\n                internalType: 'uint256[]',\n                name: 'underlyingAmountsOut',\n                type: 'uint256[]',\n            },\n        ],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            { internalType: 'address', name: 'parentPool', type: 'address' },\n            {\n                internalType: 'uint256',\n                name: 'exactBptAmountIn',\n                type: 'uint256',\n            },\n            { internalType: 'address[]', name: 'tokensOut', type: 'address[]' },\n            {\n                internalType: 'uint256[]',\n                name: 'minAmountsOut',\n                type: 'uint256[]',\n            },\n            { internalType: 'bool', name: 'wethIsEth', type: 'bool' },\n            { internalType: 'bytes', name: 'userData', type: 'bytes' },\n        ],\n        name: 'removeLiquidityProportionalNestedPool',\n        outputs: [\n            {\n                internalType: 'uint256[]',\n                name: 'amountsOut',\n                type: 'uint256[]',\n            },\n        ],\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: 'address',\n                        name: 'sender',\n                        type: 'address',\n                    },\n                    { internalType: 'address', name: 'pool', type: 'address' },\n                    {\n                        internalType: 'uint256[]',\n                        name: 'minAmountsOut',\n                        type: 'uint256[]',\n                    },\n                    {\n                        internalType: 'uint256',\n                        name: 'maxBptAmountIn',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'enum RemoveLiquidityKind',\n                        name: 'kind',\n                        type: 'uint8',\n                    },\n                    { internalType: 'bool', name: 'wethIsEth', type: 'bool' },\n                    { internalType: 'bytes', name: 'userData', type: 'bytes' },\n                ],\n                internalType: 'struct IRouterCommon.RemoveLiquidityHookParams',\n                name: 'params',\n                type: 'tuple',\n            },\n            { internalType: 'address[]', name: 'tokensOut', type: 'address[]' },\n        ],\n        name: 'removeLiquidityProportionalNestedPoolHook',\n        outputs: [\n            {\n                internalType: 'uint256[]',\n                name: 'amountsOut',\n                type: 'uint256[]',\n            },\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        inputs: [],\n        name: 'version',\n        outputs: [{ internalType: 'string', name: '', type: 'string' }],\n        stateMutability: 'view',\n        type: 'function',\n    },\n    { stateMutability: 'payable', type: 'receive' },\n] as const;\n","import { ChainId } from '../../../../utils';\n\nexport class BalancerApiClient {\n    apiUrl: string;\n    chainId: ChainId;\n    constructor(apiUrl: string, chainId: ChainId) {\n        this.apiUrl = apiUrl;\n        this.chainId = chainId;\n    }\n\n    async fetch(requestQuery: {\n        operationName?: string;\n        query: string;\n        variables?: any;\n    }) {\n        const headers = {\n            'Content-Type': 'application/json',\n            ChainId: this.chainId.toString(),\n        };\n\n        if (process.env.BEX_API_KEY) {\n            headers['x-api-key'] = process.env.BEX_API_KEY;\n        }\n\n        const response = await fetch(this.apiUrl, {\n            method: 'post',\n            body: JSON.stringify(requestQuery),\n            headers,\n        });\n        return response.json();\n    }\n}\n","export type Address = `0x${string}`;\nexport type Hex = `0x${string}`;\n\nexport enum PoolType {\n    AaveLinear = 'AaveLinear',\n    ComposableStable = 'ComposableStable',\n    CowAmm = 'CowAmm',\n    Fx = 'FX',\n    Gyro2 = 'Gyro2',\n    Gyro3 = 'Gyro3',\n    GyroE = 'GyroE',\n    MetaStable = 'MetaStable',\n    Stable = 'Stable',\n    Weighted = 'Weighted',\n    Boosted = 'Boosted',\n}\n\nexport enum SwapKind {\n    GivenIn = 0,\n    GivenOut = 1,\n}\n\nexport interface SingleSwap {\n    poolId: Hex;\n    kind: SwapKind;\n    assetIn: Address;\n    assetOut: Address;\n    amount: bigint;\n    userData: Hex;\n}\n\nexport interface BatchSwapStep {\n    poolId: Hex;\n    assetInIndex: bigint;\n    assetOutIndex: bigint;\n    amount: bigint;\n    userData: Hex;\n}\n\nexport type InputToken = {\n    address: Address;\n    decimals: number;\n};\n\nexport type InputAmount = InputToken & {\n    rawAmount: bigint;\n};\n\nexport enum TokenType {\n    STANDARD = 0,\n    TOKEN_WITH_RATE = 1,\n    ERC4626_TOKEN = 2,\n}\n","import { PoolType } from '../types';\n\n// map pool type from the api to the sdk\nconst poolTypeMap = {\n    COMPOSABLE_STABLE: PoolType.ComposableStable,\n    GYRO: PoolType.Gyro2,\n    GYRO3: PoolType.Gyro3,\n    GYROE: PoolType.GyroE,\n    META_STABLE: PoolType.MetaStable,\n    STABLE: PoolType.Stable,\n    WEIGHTED: PoolType.Weighted,\n    COW_AMM: PoolType.CowAmm,\n};\n\nexport const mapPoolType = (type: string): PoolType => {\n    const supportedPoolTypes = Object.keys(poolTypeMap);\n\n    if (!supportedPoolTypes.includes(type)) {\n        throw new Error(\n            `Unsupported pool type ${type} - supported types are ${supportedPoolTypes.join(\n                ', ',\n            )}`,\n        );\n    }\n\n    return poolTypeMap[type];\n};\n","import { Address } from 'viem';\nimport { InputToken } from '../types';\nexport class Token {\n    public readonly chainId: number;\n    public readonly address: Address;\n    public readonly decimals: number;\n    public readonly symbol?: string;\n    public readonly name?: string;\n    public readonly wrapped: Address;\n\n    public constructor(\n        chainId: number,\n        address: Address,\n        decimals: number,\n        symbol?: string,\n        name?: string,\n        wrapped?: Address,\n    ) {\n        this.chainId = chainId;\n        // Addresses are always lowercased for speed\n        this.address = address.toLowerCase() as Address;\n        this.decimals = decimals;\n        this.symbol = symbol;\n        this.name = name;\n        this.wrapped = (\n            wrapped ? wrapped.toLowerCase() : address.toLowerCase()\n        ) as Address;\n    }\n\n    public isEqual(token: Token) {\n        return this.chainId === token.chainId && this.address === token.address;\n    }\n\n    public isUnderlyingEqual(token: Token) {\n        return this.chainId === token.chainId && this.wrapped === token.wrapped;\n    }\n\n    public isSameAddress(address: Address) {\n        return this.address === address.toLowerCase();\n    }\n\n    public toInputToken(): InputToken {\n        return {\n            address: this.address,\n            decimals: this.decimals,\n        };\n    }\n}\n","import { Address, Chain } from 'viem';\nimport { Token } from '../entities/token';\nimport { avalanche, mainnet, sepolia, berachain } from 'viem/chains';\n\nexport const ZERO_ADDRESS: Address =\n    '0x0000000000000000000000000000000000000000';\n/*\n    Using empty account (undefined by default) in some multicall requests causes failures in some nodes\n    More info: https://github.com/wevm/viem/issues/2792\n*/\nexport const EMPTY_SENDER = { account: ZERO_ADDRESS };\n\nconst NATIVE_ADDRESS: Address = '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee';\n\nexport const MAX_UINT112 = 5192296858534827628530496329220095n;\nexport const MAX_UINT256 =\n    115792089237316195423570985008687907853269984665640564039457584007913129639935n;\nexport const PREMINTED_STABLE_BPT = 2596148429267413814265248164610048n; // 2**111\n\nexport const DECIMAL_SCALES = {\n    0: 1n,\n    1: 10n,\n    2: 100n,\n    3: 1000n,\n    4: 10000n,\n    5: 100000n,\n    6: 1000000n,\n    7: 10000000n,\n    8: 100000000n,\n    9: 1000000000n,\n    10: 10000000000n,\n    11: 100000000000n,\n    12: 1000000000000n,\n    13: 10000000000000n,\n    14: 100000000000000n,\n    15: 1000000000000000n,\n    16: 10000000000000000n,\n    17: 100000000000000000n,\n    18: 1000000000000000000n,\n};\n\nexport const SECONDS_PER_YEAR = 31536000n;\n\nexport enum ChainId {\n    MAINNET = 1,\n    BERACHAIN = 80094,\n    AVALANCHE = 43114,\n    BASE_GOERLI = 84531,\n    SEPOLIA = 11155111,\n}\n\n// The Balancer API requires the chain to be passed as a specific string\nexport const API_CHAIN_NAMES: Record<number, string> = {\n    [ChainId.MAINNET]: 'MAINNET',\n    [ChainId.BERACHAIN]: 'BERACHAIN',\n    [ChainId.SEPOLIA]: 'SEPOLIA',\n};\n\nexport const CHAINS: Record<number, Chain> = {\n    [ChainId.MAINNET]: mainnet,\n    [ChainId.BERACHAIN]: berachain,\n    [ChainId.AVALANCHE]: avalanche,\n    [ChainId.SEPOLIA]: sepolia,\n};\n\n/**\n * Deployment Addresses\n * Source: https://docs.balancer.fi/reference/contracts\n */\n\nexport const BALANCER_RELAYER: Record<number, Address> = {\n    [ChainId.AVALANCHE]: '0xA084c11cb55e67C9becf9607f1DBB20ec4D5E7b2',\n    [ChainId.MAINNET]: '0x35Cea9e57A393ac66Aaa7E25C391D52C74B5648f',\n    [ChainId.BERACHAIN]: '0x7852fB9d0895e6e8b3EedA553c03F6e2F9124dF9',\n    [ChainId.SEPOLIA]: '0x7852fB9d0895e6e8b3EedA553c03F6e2F9124dF9',\n};\n\nexport const VAULT: Record<number, Address> = {\n    [ChainId.AVALANCHE]: '0xBA12222222228d8Ba445958a75a0704d566BF2C8',\n    [ChainId.MAINNET]: '0xBA12222222228d8Ba445958a75a0704d566BF2C8',\n    [ChainId.SEPOLIA]: '0xBA12222222228d8Ba445958a75a0704d566BF2C8',\n    [ChainId.BERACHAIN]: '0x4Be03f781C497A489E3cB0287833452cA9B9E80B',\n};\n\nexport const VAULT_V3: Record<number, Address> = {\n    [ChainId.SEPOLIA]: '0xbA1333333333a1BA1108E8412f11850A5C319bA9',\n    [ChainId.MAINNET]: '0xbA1333333333a1BA1108E8412f11850A5C319bA9',\n};\n\nexport const VAULT_ADMIN: Record<number, Address> = {\n    [ChainId.SEPOLIA]: '0x35fFB749B273bEb20F40f35EdeB805012C539864',\n    [ChainId.MAINNET]: '0x35fFB749B273bEb20F40f35EdeB805012C539864',\n};\n\nexport const BALANCER_QUERIES: Record<number, Address> = {\n    [ChainId.AVALANCHE]: '0xC128468b7Ce63eA702C1f104D55A2566b13D3ABD',\n    [ChainId.MAINNET]: '0xE39B5e3B6D74016b2F6A9673D7d7493B6DF549d5',\n    [ChainId.SEPOLIA]: '0x1802953277FD955f9a254B80Aa0582f193cF1d77',\n    [ChainId.BERACHAIN]: '0x3C612e132624f4Bd500eE1495F54565F0bcc9b59',\n};\n\nexport const WEIGHTED_POOL_FACTORY_BALANCER_V2: Record<number, Address> = {\n    [ChainId.AVALANCHE]: '0x230a59f4d9adc147480f03b0d3fffecd56c3289a',\n    [ChainId.MAINNET]: '0x897888115ada5773e02aa29f775430bfb5f34c51',\n    [ChainId.BERACHAIN]: '0xa966fA8F2d5B087FFFA499C0C1240589371Af409',\n};\n\nexport const COMPOSABLE_STABLE_POOL_FACTORY: Record<number, Address> = {\n    [ChainId.AVALANCHE]: '0xb9F8AB3ED3F3aCBa64Bc6cd2DcA74B7F38fD7B88',\n    [ChainId.MAINNET]: '0x5B42eC6D40f7B7965BE5308c70e2603c0281C1E9',\n    [ChainId.SEPOLIA]: '0x05503B3aDE04aCA81c8D6F88eCB73Ba156982D2B',\n    [ChainId.BERACHAIN]: '0xDfA30BDa0375d4763711AB0CC8D91B20bfCC87E1',\n};\n\nexport const WEIGHTED_POOL_FACTORY_BALANCER_V3: Record<number, Address> = {\n    [ChainId.SEPOLIA]: '0x7532d5a3bE916e4a4D900240F49F0BABd4FD855C',\n    [ChainId.MAINNET]: '0x201efd508c8DfE9DE1a13c2452863A78CB2a86Cc',\n};\n\nexport const STABLE_POOL_FACTORY_BALANCER_V3: Record<number, Address> = {\n    [ChainId.SEPOLIA]: '0xd67F485C07D258B3e93835a3799d862ffcB55923',\n    [ChainId.MAINNET]: '0xB9d01CA61b9C181dA1051bFDd28e1097e920AB14',\n};\n\nexport const BALANCER_ROUTER: Record<number, Address> = {\n    [ChainId.SEPOLIA]: '0x0BF61f706105EA44694f2e92986bD01C39930280',\n    [ChainId.MAINNET]: '0x5C6fb490BDFD3246EB0bB062c168DeCAF4bD9FDd',\n};\n\nexport const BALANCER_BATCH_ROUTER: Record<number, Address> = {\n    [ChainId.SEPOLIA]: '0xC85b652685567C1B074e8c0D4389f83a2E458b1C',\n    [ChainId.MAINNET]: '0x136f1EFcC3f8f88516B9E94110D56FDBfB1778d1',\n};\n\nexport const BALANCER_COMPOSITE_LIQUIDITY_ROUTER: Record<number, Address> = {\n    [ChainId.SEPOLIA]: '0xc6674C0c7694E9b990eAc939E74F8cc3DD39B4b0',\n    [ChainId.MAINNET]: '0x1CD776897ef4f647bf8241Ec69549e4A9cb1D608',\n};\n\nexport const BALANCER_BUFFER_ROUTER: Record<number, Address> = {\n    [ChainId.SEPOLIA]: '0xb5F3A41515457CC6E2716c62a011D260441CcfC9',\n    [ChainId.MAINNET]: '0x9179C06629ef7f17Cb5759F501D89997FE0E7b45',\n};\n\nexport const PERMIT2: Record<number, Address> = {\n    [ChainId.SEPOLIA]: '0x000000000022D473030F116dDEE9F6B43aC78BA3',\n    [ChainId.MAINNET]: '0x000000000022D473030F116dDEE9F6B43aC78BA3',\n};\n\n// TODO: Figure out Authorizer addresses\nexport const AUTHORIZER: Record<number, Address> = {\n    [ChainId.SEPOLIA]: '0xa331d84ec860bf466b4cdccfb4ac09a1b43f3ae6',\n};\n\nexport const ADMIN_OF_AUTHORIZER = '0x171C0fF5943CE5f133130436A29bF61E26516003'; // do we plan to use same EoA for all chains?\n\n/**\n * Native Assets\n */\n\nexport const NATIVE_ASSETS = {\n    [ChainId.MAINNET]: new Token(\n        ChainId.MAINNET,\n        NATIVE_ADDRESS,\n        18,\n        'ETH',\n        'Ether',\n        '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    ),\n\n    [ChainId.SEPOLIA]: new Token(\n        ChainId.SEPOLIA,\n        NATIVE_ADDRESS,\n        18,\n        'ETH',\n        'Ether',\n        '0x7b79995e5f793a07bc00c21412e50ecae098e7f9',\n    ),\n    [ChainId.AVALANCHE]: new Token(\n        ChainId.AVALANCHE,\n        NATIVE_ADDRESS,\n        18,\n        'AVAX',\n        'Avax',\n        '0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7',\n    ),\n    [ChainId.BERACHAIN]: new Token(\n        ChainId.BERACHAIN,\n        ZERO_ADDRESS,\n        18,\n        'BERA',\n        'Bera',\n        '0x6969696969696969696969696969696969696969',\n    ),\n};\n\nexport const ETH = NATIVE_ASSETS[ChainId.MAINNET];\n\nexport const DEFAULT_FUND_MANAGMENT = {\n    sender: ZERO_ADDRESS,\n    recipient: ZERO_ADDRESS,\n    fromInternalBalance: false,\n    toInternalBalance: false,\n};\n\nexport const DEFAULT_USERDATA = '0x';\n\nexport const API_ENDPOINT = 'https://api-v3.balancer.fi';\nexport const TEST_API_ENDPOINT = 'https://test-api-v3.balancer.fi';\n","import { AddLiquidityKind, RemoveLiquidityKind } from '..';\n\nexport const addLiquiditySingleTokenShouldHaveTokenInIndexError = Error(\n    'AddLiquidityKind.SingleToken should have tokenInIndex',\n);\n\nexport const addLiquidityProportionalUnavailableError = new Error(\n    'AddLiquidityKind.Proportional is not available for V3. Please use ProportionalAmountsHelper to calculate proportional amountsIn and use AddLiquidityKind.Unbalanced instead.',\n);\n\nexport const removeLiquiditySingleTokenExactInShouldHaveTokenOutIndexError =\n    Error('RemoveLiquidityKind.SingleTokenExactIn should have tokenOutIndex');\n\nexport const removeLiquidityUnbalancedNotSupportedOnV3 = Error(\n    'Unbalanced remove liquidity not supported on V3',\n);\n\nexport const addLiquidityProportionalNotSupportedOnPoolTypeError = (\n    poolType: string,\n) =>\n    Error(`Add Liquidity Proportional not supported on pool type: ${poolType}`);\n\nexport const addLiquidityProportionalOnlyError = (\n    kind: AddLiquidityKind,\n    poolType: string,\n) =>\n    Error(\n        `Add Liquidity ${kind} not supported for pool ${poolType}. Use Add Liquidity Proportional`,\n    );\n\nexport const removeLiquidityProportionalOnlyError = (\n    kind: RemoveLiquidityKind,\n    poolType: string,\n) =>\n    Error(\n        `Remove Liquidity ${kind} not supported for pool ${poolType}. Use Remove Liquidity Proportional`,\n    );\n\nexport const buildCallWithPermit2ProtocolVersionError = Error(\n    'buildCall with Permit2 signatures is only available for v3',\n);\n","import _Decimal, { Decimal } from \"decimal.js-light\";\nimport { parseUnits } from \"viem\";\nimport { InputAmount } from \"../types\";\nimport { DECIMAL_SCALES } from \"../utils/constants\";\nimport { WAD } from \"../utils/math\";\nimport { Token } from \"./token\";\n\nexport type BigintIsh = bigint | string | number;\n\nexport class TokenAmount {\n    public readonly token: Token;\n    public readonly scalar: bigint;\n    public readonly decimalScale: bigint;\n    public amount: bigint;\n    public scale18: bigint;\n\n    public static fromRawAmount(token: Token, rawAmount: BigintIsh) {\n        return new TokenAmount(token, rawAmount);\n    }\n\n    public static fromHumanAmount(token: Token, humanAmount: `${number}`) {\n        const rawAmount = parseUnits(humanAmount, token.decimals);\n        return new TokenAmount(token, rawAmount);\n    }\n\n    public static fromScale18Amount(\n        token: Token,\n        scale18Amount: BigintIsh,\n        divUp?: boolean,\n    ) {\n        const scalar = DECIMAL_SCALES[18 - token.decimals];\n        const rawAmount = divUp\n            ? 1n + (BigInt(scale18Amount) - 1n) / scalar\n            : BigInt(scale18Amount) / scalar;\n        return new TokenAmount(token, rawAmount);\n    }\n\n    public static fromInputAmount(\n        input: InputAmount,\n        chainId: number,\n    ): TokenAmount {\n        const token = new Token(chainId, input.address, input.decimals);\n        return new TokenAmount(token, input.rawAmount);\n    }\n\n    protected constructor(token: Token, amount: BigintIsh) {\n        this.decimalScale = DECIMAL_SCALES[token.decimals];\n        this.token = token;\n        this.amount = BigInt(amount);\n        this.scalar = DECIMAL_SCALES[18 - token.decimals];\n        this.scale18 = this.amount * this.scalar;\n    }\n\n    public add(other: TokenAmount): TokenAmount {\n        return new TokenAmount(this.token, this.amount + other.amount);\n    }\n\n    public sub(other: TokenAmount): TokenAmount {\n        return new TokenAmount(this.token, this.amount - other.amount);\n    }\n\n    public mulUpFixed(other: bigint): TokenAmount {\n        const product = this.amount * other;\n        const multiplied = (product - 1n) / WAD + 1n;\n        return new TokenAmount(this.token, multiplied);\n    }\n\n    public mulDownFixed(other: bigint): TokenAmount {\n        const multiplied = (this.amount * other) / WAD;\n        return new TokenAmount(this.token, multiplied);\n    }\n\n    public divUpFixed(other: bigint): TokenAmount {\n        const divided = (this.amount * WAD + other - 1n) / other;\n        return new TokenAmount(this.token, divided);\n    }\n\n    public divDownFixed(other: bigint): TokenAmount {\n        const divided = (this.amount * WAD) / other;\n        return new TokenAmount(this.token, divided);\n    }\n\n    public toSignificant(significantDigits = 6): string {\n        // There is a bug in b-sdk where too small numbers are being converted to scientific notation but api does not support it\n\n        let result = new _Decimal(this.amount.toString())\n            .div(new _Decimal(this.decimalScale.toString()))\n            .toDecimalPlaces(significantDigits)\n            .toFixed(significantDigits);\n\n        if (result.includes(\".\")) {\n            while (result.at(-1) === \"0\") {\n                result = result.slice(0, -1);\n            }\n        }\n\n        if (result.at(-1) === \".\") {\n            result = result.slice(0, -1);\n        }\n\n        return result;\n    }\n\n    public toInputAmount(): InputAmount {\n        return {\n            address: this.token.address,\n            decimals: this.token.decimals,\n            rawAmount: this.amount,\n        };\n    }\n}\n","export const WAD = 1000000000000000000n;\nexport const RAY = 1000000000000000000000000000000000000n;\n\nexport const TWO_WAD = 2000000000000000000n;\nexport const FOUR_WAD = 4000000000000000000n;\nexport const HUNDRED_WAD = 100000000000000000000n;\n\nexport const abs = (n: bigint): bigint => (n < 0n ? -n : n);\n\nexport const min = (values: bigint[]): bigint =>\n    values.reduce((a, b) => (a < b ? a : b));\n\nexport const max = (values: bigint[]): bigint =>\n    values.reduce((a, b) => (a > b ? a : b));\n\nconst _require = (b: boolean, message: string) => {\n    if (!b) throw new Error(message);\n};\n\nexport class MathSol {\n    static max(a: bigint, b: bigint): bigint {\n        return a >= b ? a : b;\n    }\n\n    static min(a: bigint, b: bigint): bigint {\n        return a < b ? a : b;\n    }\n\n    static MAX_POW_RELATIVE_ERROR = 10000n;\n\n    static mulDownFixed(a: bigint, b: bigint): bigint {\n        const product = a * b;\n        return product / WAD;\n    }\n\n    static mulUpFixed(a: bigint, b: bigint): bigint {\n        const product = a * b;\n\n        if (product === 0n) {\n            return 0n;\n        }\n        return (product - 1n) / WAD + 1n;\n    }\n\n    static divDownFixed(a: bigint, b: bigint): bigint {\n        if (a === 0n) {\n            return 0n;\n        }\n        const aInflated = a * WAD;\n        return aInflated / b;\n    }\n\n    static divUpFixed(a: bigint, b: bigint): bigint {\n        if (a === 0n) {\n            return 0n;\n        }\n        const aInflated = a * WAD;\n        return (aInflated - 1n) / b + 1n;\n    }\n\n    static divUp(a: bigint, b: bigint): bigint {\n        if (a === 0n) {\n            return 0n;\n        }\n        return 1n + (a - 1n) / b;\n    }\n\n    // version = poolTypeVersion\n    static powUpFixed(x: bigint, y: bigint, version?: number): bigint {\n        if (y === WAD && version !== 1) {\n            return x;\n        }\n        if (y === TWO_WAD && version !== 1) {\n            return MathSol.mulUpFixed(x, x);\n        }\n        if (y === FOUR_WAD && version !== 1) {\n            const square = MathSol.mulUpFixed(x, x);\n            return MathSol.mulUpFixed(square, square);\n        }\n        const raw = LogExpMath.pow(x, y);\n        const maxError =\n            MathSol.mulUpFixed(raw, MathSol.MAX_POW_RELATIVE_ERROR) + 1n;\n        return raw + maxError;\n    }\n\n    // version = poolTypeVersion\n    static powDownFixed(x: bigint, y: bigint, version?: number): bigint {\n        if (y === WAD && version !== 1) {\n            return x;\n        }\n        if (y === TWO_WAD && version !== 1) {\n            return MathSol.mulUpFixed(x, x);\n        }\n        if (y === FOUR_WAD && version !== 1) {\n            const square = MathSol.mulUpFixed(x, x);\n            return MathSol.mulUpFixed(square, square);\n        }\n        const raw = LogExpMath.pow(x, y);\n        const maxError =\n            MathSol.mulUpFixed(raw, MathSol.MAX_POW_RELATIVE_ERROR) + 1n;\n        if (raw < maxError) {\n            return 0n;\n        }\n        return raw - maxError;\n    }\n\n    static complementFixed(x: bigint): bigint {\n        return x < WAD ? WAD - x : 0n;\n    }\n}\n\nclass LogExpMath {\n    // All fixed point multiplications and divisions are inlined. This means we need to divide by ONE when multiplying\n    // two numbers, and multiply by ONE when dividing them.\n\n    // The domain of natural exponentiation is bound by the word size and number of decimals used.\n    //\n    // Because internally the result will be stored using 20 decimals, the largest possible result is\n    // (2^255 - 1) / 10^20, which makes the largest exponent ln((2^255 - 1) / 10^20) = 130.700829182905140221.\n    // The smallest possible result is 10^(-18), which makes largest negative argument\n    // ln(10^(-18)) = -41.446531673892822312.\n    // We use 130.0 and -41.0 to have some safety margin.\n    static MAX_NATURAL_EXPONENT = 130000000000000000000n;\n    static MIN_NATURAL_EXPONENT = -41000000000000000000n;\n\n    // Bounds for ln_36's argument. Both ln(0.9) and ln(1.1) can be represented with 36 decimal places in a fixed point\n    // 256 bit integer.\n    static LN_36_LOWER_BOUND: bigint = WAD - 100000000000000000n;\n    static LN_36_UPPER_BOUND: bigint = WAD + 100000000000000000n;\n\n    // static MILD_EXPONENT_BOUND: bigint = 2 ** 254 / HUNDRED_WAD;\n    // Precomputed value of the above expression\n    static MILD_EXPONENT_BOUND =\n        289480223093290488558927462521719769633174961664101410098n;\n\n    // 18 decimal constants\n    static x0 = 128000000000000000000n; // 2ˆ7\n    static a0 = 38877084059945950922200000000000000000000000000000000000n; // eˆ(x0) (no decimals)\n    static x1 = 64000000000000000000n; // 2ˆ6\n    static a1 = 6235149080811616882910000000n; // eˆ(x1) (no decimals)\n\n    // 20 decimal constants\n    static x2 = 3200000000000000000000n; // 2ˆ5\n    static a2 = 7896296018268069516100000000000000n; // eˆ(x2)\n    static x3 = 1600000000000000000000n; // 2ˆ4\n    static a3 = 888611052050787263676000000n; // eˆ(x3)\n    static x4 = 800000000000000000000n; // 2ˆ3\n    static a4 = 298095798704172827474000n; // eˆ(x4)\n    static x5 = 400000000000000000000n; // 2ˆ2\n    static a5 = 5459815003314423907810n; // eˆ(x5)\n    static x6 = 200000000000000000000n; // 2ˆ1\n    static a6 = 738905609893065022723n; // eˆ(x6)\n    static x7 = 100000000000000000000n; // 2ˆ0\n    static a7 = 271828182845904523536n; // eˆ(x7)\n    static x8 = 50000000000000000000n; // 2ˆ-1\n    static a8 = 164872127070012814685n; // eˆ(x8)\n    static x9 = 25000000000000000000n; // 2ˆ-2\n    static a9 = 128402541668774148407n; // eˆ(x9)\n    static x10 = 12500000000000000000n; // 2ˆ-3\n    static a10 = 113314845306682631683n; // eˆ(x10)\n    static x11 = 6250000000000000000n; // 2ˆ-4\n    static a11 = 106449445891785942956n; // eˆ(x11)\n\n    // All arguments and return values are 18 decimal fixed point numbers.\n    static pow(x: bigint, y: bigint): bigint {\n        if (y === 0n) {\n            // We solve the 0^0 indetermination by making it equal one.\n            return WAD;\n        }\n\n        if (x === 0n) {\n            return 0n;\n        }\n\n        // Instead of computing x^y directly, we instead rely on the properties of logarithms and exponentiation to\n        // arrive at that result. In particular, exp(ln(x)) = x, and ln(x^y) = y * ln(x). This means\n        // x^y = exp(y * ln(x)).\n\n        // The ln function takes a signed value, so we need to make sure x fits in the signed 256 bit range.\n        _require(\n            x <\n                57896044618658097711785492504343953926634992332820282019728792003956564819968n,\n\n            'Errors.X_OUT_OF_BOUNDS',\n        );\n        const x_int256 = x;\n\n        // We will compute y * ln(x) in a single step. Depending on the value of x, we can either use ln or ln_36. In\n        // both cases, we leave the division by ONE_18 (due to fixed point multiplication) to the end.\n\n        // This prevents y * ln(x) from overflowing, and at the same time guarantees y fits in the signed 256 bit range.\n        _require(y < LogExpMath.MILD_EXPONENT_BOUND, 'Errors.Y_OUT_OF_BOUNDS');\n        const y_int256 = y;\n\n        let logx_times_y: bigint;\n        if (\n            LogExpMath.LN_36_LOWER_BOUND < x_int256 &&\n            x_int256 < LogExpMath.LN_36_UPPER_BOUND\n        ) {\n            const ln_36_x = LogExpMath._ln_36(x_int256);\n\n            // ln_36_x has 36 decimal places, so multiplying by y_int256 isn't as straightforward, since we can't just\n            // bring y_int256 to 36 decimal places, as it might overflow. Instead, we perform two 18 decimal\n            // multiplications and add the results: one with the first 18 decimals of ln_36_x, and one with the\n            // (downscaled) last 18 decimals.\n            logx_times_y =\n                (ln_36_x / WAD) * y_int256 + ((ln_36_x % WAD) * y_int256) / WAD;\n        } else {\n            logx_times_y = LogExpMath._ln(x_int256) * y_int256;\n        }\n        logx_times_y /= WAD;\n\n        // Finally, we compute exp(y * ln(x)) to arrive at x^y\n        _require(\n            LogExpMath.MIN_NATURAL_EXPONENT <= logx_times_y &&\n                logx_times_y <= LogExpMath.MAX_NATURAL_EXPONENT,\n            'Errors.PRODUCT_OUT_OF_BOUNDS',\n        );\n\n        // return uint256(exp(logx_times_y));\n        return LogExpMath.exp(logx_times_y);\n    }\n\n    static exp(x_: bigint): bigint {\n        let x = x_;\n        _require(\n            x >= LogExpMath.MIN_NATURAL_EXPONENT &&\n                x <= LogExpMath.MAX_NATURAL_EXPONENT,\n            'Errors.INVALID_EXPONENT',\n        );\n\n        if (x < 0) {\n            // We only handle positive exponents: e^(-x) is computed as 1 / e^x. We can safely make x positive since it\n            // fits in the signed 256 bit range (as it is larger than MIN_NATURAL_EXPONENT).\n            // Fixed point division requires multiplying by ONE_18.\n            return (WAD * WAD) / LogExpMath.exp(-1n * x);\n        }\n\n        // First, we use the fact that e^(x+y) = e^x * e^y to decompose x into a sum of powers of two, which we call x_n,\n        // where x_n == 2^(7 - n), and e^x_n = a_n has been precomputed. We choose the first x_n, x0, to equal 2^7\n        // because all larger powers are larger than MAX_NATURAL_EXPONENT, and therefore not present in the\n        // decomposition.\n        // At the end of MathSol process we will have the product of all e^x_n = a_n that apply, and the remainder of MathSol\n        // decomposition, which will be lower than the smallest x_n.\n        // exp(x) = k_0 * a_0 * k_1 * a_1 * ... + k_n * a_n * exp(remainder), where each k_n equals either 0 or 1.\n        // We mutate x by subtracting x_n, making it the remainder of the decomposition.\n\n        // The first two a_n (e^(2^7) and e^(2^6)) are too large if stored as 18 decimal numbers, and could cause\n        // intermediate overflows. Instead we store them as plain integers, with 0 decimals.\n        // Additionally, x0 + x1 is larger than MAX_NATURAL_EXPONENT, which means they will not both be present in the\n        // decomposition.\n\n        // For each x_n, we test if that term is present in the decomposition (if x is larger than it), and if so deduct\n        // it and compute the accumulated product.\n\n        let firstAN: bigint;\n        if (x >= LogExpMath.x0) {\n            x -= LogExpMath.x0;\n            firstAN = LogExpMath.a0;\n        } else if (x >= LogExpMath.x1) {\n            x -= LogExpMath.x1;\n            firstAN = LogExpMath.a1;\n        } else {\n            firstAN = 1n;\n        }\n\n        // We now transform x into a 20 decimal fixed point number, to have enhanced precision when computing the\n        // smaller terms.\n        x *= 100n;\n\n        // `product` is the accumulated product of all a_n (except a0 and a1), which starts at 20 decimal fixed point\n        // one. Recall that fixed point multiplication requires dividing by ONE_20.\n        let product = HUNDRED_WAD;\n\n        if (x >= LogExpMath.x2) {\n            x -= LogExpMath.x2;\n            product = (product * LogExpMath.a2) / HUNDRED_WAD;\n        }\n        if (x >= LogExpMath.x3) {\n            x -= LogExpMath.x3;\n            product = (product * LogExpMath.a3) / HUNDRED_WAD;\n        }\n        if (x >= LogExpMath.x4) {\n            x -= LogExpMath.x4;\n            product = (product * LogExpMath.a4) / HUNDRED_WAD;\n        }\n        if (x >= LogExpMath.x5) {\n            x -= LogExpMath.x5;\n            product = (product * LogExpMath.a5) / HUNDRED_WAD;\n        }\n        if (x >= LogExpMath.x6) {\n            x -= LogExpMath.x6;\n            product = (product * LogExpMath.a6) / HUNDRED_WAD;\n        }\n        if (x >= LogExpMath.x7) {\n            x -= LogExpMath.x7;\n            product = (product * LogExpMath.a7) / HUNDRED_WAD;\n        }\n        if (x >= LogExpMath.x8) {\n            x -= LogExpMath.x8;\n            product = (product * LogExpMath.a8) / HUNDRED_WAD;\n        }\n        if (x >= LogExpMath.x9) {\n            x -= LogExpMath.x9;\n            product = (product * LogExpMath.a9) / HUNDRED_WAD;\n        }\n\n        // x10 and x11 are unnecessary here since we have high enough precision already.\n\n        // Now we need to compute e^x, where x is small (in particular, it is smaller than x9). We use the Taylor series\n        // expansion for e^x: 1 + x + (x^2 / 2!) + (x^3 / 3!) + ... + (x^n / n!).\n\n        let seriesSum = HUNDRED_WAD; // The initial one in the sum, with 20 decimal places.\n        let term: bigint; // Each term in the sum, where the nth term is (x^n / n!).\n\n        // The first term is simply x.\n        term = x;\n        seriesSum += term;\n\n        // Each term (x^n / n!) equals the previous one times x, divided by n. Since x is a fixed point number,\n        // multiplying by it requires dividing by HUNDRED_WAD, but dividing by the non-fixed point n values does not.\n\n        term = (term * x) / HUNDRED_WAD / 2n;\n        seriesSum += term;\n\n        term = (term * x) / HUNDRED_WAD / 3n;\n        seriesSum += term;\n\n        term = (term * x) / HUNDRED_WAD / 4n;\n        seriesSum += term;\n\n        term = (term * x) / HUNDRED_WAD / 5n;\n        seriesSum += term;\n\n        term = (term * x) / HUNDRED_WAD / 6n;\n        seriesSum += term;\n\n        term = (term * x) / HUNDRED_WAD / 7n;\n        seriesSum += term;\n\n        term = (term * x) / HUNDRED_WAD / 8n;\n        seriesSum += term;\n\n        term = (term * x) / HUNDRED_WAD / 9n;\n        seriesSum += term;\n\n        term = (term * x) / HUNDRED_WAD / 10n;\n        seriesSum += term;\n\n        term = (term * x) / HUNDRED_WAD / 11n;\n        seriesSum += term;\n\n        term = (term * x) / HUNDRED_WAD / 12n;\n        seriesSum += term;\n\n        // 12 Taylor terms are sufficient for 18 decimal precision.\n\n        // We now have the first a_n (with no decimals), and the product of all other a_n present, and the Taylor\n        // approximation of the exponentiation of the remainder (both with 20 decimals). All that remains is to multiply\n        // all three (one 20 decimal fixed point multiplication, dividing by HUNDRED_WAD, and one integer multiplication),\n        // and then drop two digits to return an 18 decimal value.\n\n        return (((product * seriesSum) / HUNDRED_WAD) * firstAN) / 100n;\n    }\n\n    static _ln_36(x_: bigint): bigint {\n        let x = x_;\n        // Since ln(1) = 0, a value of x close to one will yield a very small result, which makes using 36 digits\n        // worthwhile.\n\n        // First, we transform x to a 36 digit fixed point value.\n        x *= WAD;\n\n        // We will use the following Taylor expansion, which converges very rapidly. Let z = (x - 1) / (x + 1).\n        // ln(x) = 2 * (z + z^3 / 3 + z^5 / 5 + z^7 / 7 + ... + z^(2 * n + 1) / (2 * n + 1))\n\n        // Recall that 36 digit fixed point division requires multiplying by ONE_36, and multiplication requires\n        // division by ONE_36.\n        const z = ((x - RAY) * RAY) / (x + RAY);\n        const z_squared = (z * z) / RAY;\n\n        // num is the numerator of the series: the z^(2 * n + 1) term\n        let num = z;\n\n        // seriesSum holds the accumulated sum of each term in the series, starting with the initial z\n        let seriesSum = num;\n\n        // In each step, the numerator is multiplied by z^2\n        num = (num * z_squared) / RAY;\n        seriesSum += num / 3n;\n\n        num = (num * z_squared) / RAY;\n        seriesSum += num / 5n;\n\n        num = (num * z_squared) / RAY;\n        seriesSum += num / 7n;\n\n        num = (num * z_squared) / RAY;\n        seriesSum += num / 9n;\n\n        num = (num * z_squared) / RAY;\n        seriesSum += num / 11n;\n\n        num = (num * z_squared) / RAY;\n        seriesSum += num / 13n;\n\n        num = (num * z_squared) / RAY;\n        seriesSum += num / 15n;\n\n        // 8 Taylor terms are sufficient for 36 decimal precision.\n\n        // All that remains is multiplying by 2 (non fixed point).\n        return seriesSum * 2n;\n    }\n\n    /**\n     * @dev Internal natural logarithm (ln(a)) with signed 18 decimal fixed point argument.\n     */\n    static _ln(a_: bigint): bigint {\n        let a = a_;\n        if (a < WAD) {\n            // Since ln(a^k) = k * ln(a), we can compute ln(a) as ln(a) = ln((1/a)^(-1)) = - ln((1/a)). If a is less\n            // than one, 1/a will be greater than one, and MathSol if statement will not be entered in the recursive call.\n            // Fixed point division requires multiplying by MathSol.ONE_18.\n            return -1n * LogExpMath._ln((WAD * WAD) / a);\n        }\n\n        // First, we use the fact that ln^(a * b) = ln(a) + ln(b) to decompose ln(a) into a sum of powers of two, which\n        // we call x_n, where x_n == 2^(7 - n), which are the natural logarithm of precomputed quantities a_n (that is,\n        // ln(a_n) = x_n). We choose the first x_n, x0, to equal 2^7 because the exponential of all larger powers cannot\n        // be represented as 18 fixed point decimal numbers in 256 bits, and are therefore larger than a.\n        // At the end of MathSol process we will have the sum of all x_n = ln(a_n) that apply, and the remainder of MathSol\n        // decomposition, which will be lower than the smallest a_n.\n        // ln(a) = k_0 * x_0 + k_1 * x_1 + ... + k_n * x_n + ln(remainder), where each k_n equals either 0 or 1.\n        // We mutate a by subtracting a_n, making it the remainder of the decomposition.\n\n        // For reasons related to how `exp` works, the first two a_n (e^(2^7) and e^(2^6)) are not stored as fixed point\n        // numbers with 18 decimals, but instead as plain integers with 0 decimals, so we need to multiply them by\n        // MathSol.ONE_18 to convert them to fixed point.\n        // For each a_n, we test if that term is present in the decomposition (if a is larger than it), and if so divide\n        // by it and compute the accumulated sum.\n\n        let sum = 0n;\n        if (a >= LogExpMath.a0 * WAD) {\n            a /= LogExpMath.a0; // Integer, not fixed point division\n            sum += LogExpMath.x0;\n        }\n\n        if (a >= LogExpMath.a1 * WAD) {\n            a /= LogExpMath.a1; // Integer, not fixed point division\n            sum += LogExpMath.x1;\n        }\n\n        // All other a_n and x_n are stored as 20 digit fixed point numbers, so we convert the sum and a to MathSol format.\n        sum *= 100n;\n        a *= 100n;\n\n        // Because further a_n are  20 digit fixed point numbers, we multiply by ONE_20 when dividing by them.\n\n        if (a >= LogExpMath.a2) {\n            a = (a * HUNDRED_WAD) / LogExpMath.a2;\n            sum += LogExpMath.x2;\n        }\n\n        if (a >= LogExpMath.a3) {\n            a = (a * HUNDRED_WAD) / LogExpMath.a3;\n            sum += LogExpMath.x3;\n        }\n\n        if (a >= LogExpMath.a4) {\n            a = (a * HUNDRED_WAD) / LogExpMath.a4;\n            sum += LogExpMath.x4;\n        }\n\n        if (a >= LogExpMath.a5) {\n            a = (a * HUNDRED_WAD) / LogExpMath.a5;\n            sum += LogExpMath.x5;\n        }\n\n        if (a >= LogExpMath.a6) {\n            a = (a * HUNDRED_WAD) / LogExpMath.a6;\n            sum += LogExpMath.x6;\n        }\n\n        if (a >= LogExpMath.a7) {\n            a = (a * HUNDRED_WAD) / LogExpMath.a7;\n            sum += LogExpMath.x7;\n        }\n\n        if (a >= LogExpMath.a8) {\n            a = (a * HUNDRED_WAD) / LogExpMath.a8;\n            sum += LogExpMath.x8;\n        }\n\n        if (a >= LogExpMath.a9) {\n            a = (a * HUNDRED_WAD) / LogExpMath.a9;\n            sum += LogExpMath.x9;\n        }\n\n        if (a >= LogExpMath.a10) {\n            a = (a * HUNDRED_WAD) / LogExpMath.a10;\n            sum += LogExpMath.x10;\n        }\n\n        if (a >= LogExpMath.a11) {\n            a = (a * HUNDRED_WAD) / LogExpMath.a11;\n            sum += LogExpMath.x11;\n        }\n\n        // a is now a small number (smaller than a_11, which roughly equals 1.06). This means we can use a Taylor series\n        // that converges rapidly for values of `a` close to one - the same one used in ln_36.\n        // Let z = (a - 1) / (a + 1).\n        // ln(a) = 2 * (z + z^3 / 3 + z^5 / 5 + z^7 / 7 + ... + z^(2 * n + 1) / (2 * n + 1))\n\n        // Recall that 20 digit fixed point division requires multiplying by ONE_20, and multiplication requires\n        // division by ONE_20.\n        const z = ((a - HUNDRED_WAD) * HUNDRED_WAD) / (a + HUNDRED_WAD);\n        const z_squared = (z * z) / HUNDRED_WAD;\n\n        // num is the numerator of the series: the z^(2 * n + 1) term\n        let num = z;\n\n        // seriesSum holds the accumulated sum of each term in the series, starting with the initial z\n        let seriesSum = num;\n\n        // In each step, the numerator is multiplied by z^2\n        num = (num * z_squared) / HUNDRED_WAD;\n        seriesSum += num / 3n;\n\n        num = (num * z_squared) / HUNDRED_WAD;\n        seriesSum += num / 5n;\n\n        num = (num * z_squared) / HUNDRED_WAD;\n        seriesSum += num / 7n;\n\n        num = (num * z_squared) / HUNDRED_WAD;\n        seriesSum += num / 9n;\n\n        num = (num * z_squared) / HUNDRED_WAD;\n        seriesSum += num / 11n;\n\n        // 6 Taylor terms are sufficient for 36 decimal precision.\n\n        // Finally, we multiply by 2 (non fixed point) to compute ln(remainder)\n        seriesSum *= 2n;\n\n        // We now have the sum of all x_n present, and the Taylor approximation of the logarithm of the remainder (both\n        // with 20 decimals). All that remains is to sum these two, and then drop two digits to return a 18 decimal\n        // value.\n\n        return (sum + seriesSum) / 100n;\n    }\n}\n","import { Token } from '../entities/token';\nimport { TokenAmount, BigintIsh } from '../entities/tokenAmount';\nimport { Address, SwapKind } from '../types';\n\nexport function checkInputs(\n    tokenIn: Token,\n    tokenOut: Token,\n    swapKind: SwapKind,\n    swapAmount: BigintIsh | TokenAmount,\n): TokenAmount {\n    let amount: TokenAmount;\n\n    if (swapAmount instanceof TokenAmount) {\n        amount = swapAmount;\n    } else {\n        amount = TokenAmount.fromRawAmount(\n            swapKind === SwapKind.GivenIn ? tokenIn : tokenOut,\n            swapAmount,\n        );\n    }\n\n    if (\n        tokenIn.chainId !== tokenOut.chainId ||\n        tokenIn.chainId !== amount.token.chainId\n    ) {\n        throw new Error('ChainId mismatch for inputs');\n    }\n\n    if (\n        (swapKind === SwapKind.GivenIn && !tokenIn.isEqual(amount.token)) ||\n        (swapKind === SwapKind.GivenOut && !tokenOut.isEqual(amount.token))\n    ) {\n        throw new Error('Swap amount token does not match input token');\n    }\n\n    return amount;\n}\n\nexport function isSameAddress(address1: Address, address2: Address) {\n    return address1.toLowerCase() === address2.toLowerCase();\n}\n\nexport function removeIndex<T>(array: T[], index: number): T[] {\n    return index === -1\n        ? array\n        : [...array.slice(0, index), ...array.slice(index + 1)];\n}\n\nexport function insertIndex<T>(array: T[], index: number, value: T): T[] {\n    return index === -1\n        ? array\n        : [...array.slice(0, index), value, ...array.slice(index)];\n}\n","import { Address } from '../types';\n\n/**\n * Extracts a pool's address from its poolId\n * @param poolId - a bytes32 string of the pool's ID\n * @returns the pool's address\n */\nexport const getPoolAddress = (poolId: string): Address => {\n    if (poolId.length !== 66) throw new Error('Invalid poolId length');\n    return poolId.slice(0, 42).toLowerCase() as Address;\n};\n\nexport function poolIsLinearPool(poolType: string) {\n    return poolType.includes('Linear');\n}\n\nexport function poolHasVirtualSupply(poolType: string) {\n    return poolType === 'PhantomStable' || poolIsLinearPool(poolType);\n}\n\nexport function poolHasActualSupply(poolType: string) {\n    return poolType === 'ComposableStable';\n}\n\nexport function poolHasPercentFee(poolType: string) {\n    return poolType === 'Element';\n}\n","import { Address } from 'viem';\n\ninterface ObjectWithAddress {\n    address: Address;\n}\n// Sorts any array of objects by an 'address' param\nexport function sortByAddress<T extends ObjectWithAddress>(\n    objectWithAddressArray: T[],\n): T[] {\n    return objectWithAddressArray.sort((a, b) =>\n        a.address.toLowerCase().localeCompare(b.address.toLowerCase()),\n    );\n}\n","import { BalancerApiClient } from '../../client';\nimport {\n    NestedPoolState,\n    NestedPoolV2,\n    NestedPoolV3,\n    PoolTokenWithUnderlying,\n} from '../../../../../entities';\nimport { Address, Hex } from '../../../../../types';\nimport { mapPoolType } from '@/utils/poolTypeMapper';\nimport { API_CHAIN_NAMES, isSameAddress } from '@/utils';\n\nexport type PoolGetPool = {\n    id: Hex;\n    protocolVersion: 1 | 2 | 3;\n    address: Address;\n    type: string;\n    poolTokens: Token[];\n};\n\nexport type UnderlyingToken = {\n    address: Address;\n    decimals: number;\n};\n\nexport type Token = {\n    index: number;\n    address: Address;\n    decimals: number;\n    symbol: string;\n    name: string;\n    underlyingToken: UnderlyingToken | null;\n    nestedPool: {\n        id: Hex;\n        address: Address;\n        type: string;\n        tokens: Token[];\n    } | null;\n};\n\nexport class NestedPools {\n    readonly nestedPoolStateQuery = `#graphql\n  query GetPool($id: String!, $chain: GqlChain!) {\n    poolGetPool(id: $id, chain: $chain) {\n      id\n      protocolVersion\n      address\n      type\n      poolTokens {\n        index\n        address\n        decimals\n        symbol\n        name\n        nestedPool {\n          id\n          address\n          type\n          tokens {\n            index\n            address\n            decimals\n            underlyingToken {\n              address\n              decimals\n            }\n          }\n        }\n        underlyingToken {\n          address\n          decimals\n        }\n      }\n    }\n  }\n`;\n\n    constructor(private readonly balancerApiClient: BalancerApiClient) {}\n\n    fetchNestedPoolState = async (id: string): Promise<NestedPoolState> => {\n        const {\n            data: { poolGetPool },\n        } = await this.balancerApiClient.fetch({\n            query: this.nestedPoolStateQuery,\n            variables: {\n                id: id.toLowerCase(),\n                // the API requires chain names to be sent as uppercase strings\n                chain: API_CHAIN_NAMES[this.balancerApiClient.chainId],\n            },\n        });\n\n        const nestedPoolState = this.mapPoolToNestedPoolState(\n            poolGetPool as PoolGetPool,\n        );\n\n        return nestedPoolState;\n    };\n\n    mapPoolToNestedPoolState = (pool: PoolGetPool): NestedPoolState => {\n        return pool.protocolVersion === 2\n            ? mapPoolToNestedPoolStateV2(pool)\n            : mapPoolToNestedPoolStateV3(pool);\n    };\n}\n\nexport function mapPoolToNestedPoolStateV3(pool: PoolGetPool): NestedPoolState {\n    const pools: NestedPoolV3[] = [\n        {\n            id: pool.id,\n            address: pool.address,\n            type: mapPoolType(pool.type),\n            level: 1,\n            tokens: pool.poolTokens.map((t) => {\n                const minimalToken: PoolTokenWithUnderlying = {\n                    address: t.address,\n                    decimals: t.decimals,\n                    index: t.index,\n                    symbol: t.symbol,\n                    name: t.name,\n                    underlyingToken:\n                        t.underlyingToken === null\n                            ? null\n                            : { ...t.underlyingToken, index: t.index },\n                };\n                return minimalToken;\n            }),\n        },\n    ];\n\n    pool.poolTokens.forEach((token) => {\n        // Token represents nested pools only if they have a nestedPool property\n        // Filter out phantomBpt\n        if (\n            !token.nestedPool ||\n            isSameAddress(pool.address, token.nestedPool.address)\n        )\n            return;\n\n        // map API result to NestedPool\n        pools.push({\n            id: token.nestedPool.id,\n            address: token.nestedPool.address,\n            level: 0,\n            type: mapPoolType(token.nestedPool.type),\n            tokens: token.nestedPool.tokens.map((t) => {\n                const minimalToken: PoolTokenWithUnderlying = {\n                    address: t.address,\n                    decimals: t.decimals,\n                    index: t.index,\n                    underlyingToken:\n                        t.underlyingToken === null\n                            ? null\n                            : { ...t.underlyingToken, index: t.index },\n                };\n                return minimalToken;\n            }),\n        });\n    });\n\n    const poolTokens = pool.poolTokens;\n\n    const mainTokens = poolTokens.flatMap((token) => {\n        if (token.nestedPool) {\n            // If it's a nested pool, process all tokens in the pool\n            return token.nestedPool.tokens.map(getMainToken);\n        }\n        // Otherwise just get the main token\n        return [getMainToken(token)];\n    });\n\n    return {\n        protocolVersion: pool.protocolVersion,\n        pools,\n        mainTokens,\n    };\n}\n\nfunction getMainToken(token: Token): {\n    address: Address;\n    decimals: number;\n    index: number;\n} {\n    // If token has an underlying token, use that\n    if (token.underlyingToken) {\n        return {\n            index: token.index,\n            address: token.underlyingToken.address,\n            decimals: token.underlyingToken.decimals,\n        };\n    }\n\n    // If no underlying token or nested pool, use the token itself\n    if (!token.nestedPool) {\n        return {\n            index: token.index,\n            address: token.address,\n            decimals: token.decimals,\n        };\n    }\n\n    // If there's a nested pool, process all its tokens\n    const nestedTokens = token.nestedPool.tokens.map(getMainToken);\n    return nestedTokens[0]; // Return the first token as this is part of an array anyway\n}\n\nexport function mapPoolToNestedPoolStateV2(pool: PoolGetPool): NestedPoolState {\n    const pools: NestedPoolV2[] = [\n        {\n            id: pool.id,\n            address: pool.address,\n            type: mapPoolType(pool.type),\n            level: 1,\n            tokens: pool.poolTokens.map((t) => {\n                const minimalToken: PoolTokenWithUnderlying = {\n                    address: t.address,\n                    decimals: t.decimals,\n                    index: t.index,\n                    underlyingToken:\n                        t.underlyingToken === null\n                            ? null\n                            : { ...t.underlyingToken, index: t.index },\n                };\n                return minimalToken;\n            }),\n        },\n    ];\n\n    pool.poolTokens.forEach((token) => {\n        // Token represents nested pools only if they have a nestedPool property\n        // Filter out phantomBpt\n        if (\n            !token.nestedPool ||\n            isSameAddress(pool.address, token.nestedPool.address)\n        )\n            return;\n\n        // map API result to NestedPool\n        pools.push({\n            id: token.nestedPool.id,\n            address: token.nestedPool.address,\n            level: 0,\n            type: mapPoolType(token.nestedPool.type),\n            tokens: token.nestedPool.tokens.map((t) => {\n                const minimalToken: PoolTokenWithUnderlying = {\n                    address: t.address,\n                    decimals: t.decimals,\n                    index: t.index,\n                    underlyingToken:\n                        t.underlyingToken === null\n                            ? null\n                            : { ...t.underlyingToken, index: t.index },\n                };\n                return minimalToken;\n            }),\n        });\n    });\n\n    // mainTokens are pool tokens filtering out nested pools and phantomBPTs\n    const mainTokens = pools\n        .flatMap((p) => p.tokens)\n        .filter((t) => !pools.find((p) => p.address === t.address));\n\n    return {\n        protocolVersion: 2,\n        pools,\n        mainTokens,\n    };\n}\n","import {\n    PoolState,\n    PoolStateWithBalancesAndDynamicData,\n} from '../../../../../entities';\nimport { API_CHAIN_NAMES } from '../../../../../utils/constants';\nimport { mapPoolType } from '../../../../../utils/poolTypeMapper';\nimport { BalancerApiClient } from '../../client';\n\nexport class Pools {\n    readonly poolStateQuery = `#graphql\n    query poolGetPool($id: String!, $chain: GqlChain!) {\n      poolGetPool(id: $id, chain:$chain) {\n        id\n        address\n        type\n        protocolVersion\n        poolTokens {\n          index\n          address\n          decimals\n          symbol\n          name\n        }\n      }\n    }`;\n\n    readonly poolStateWithRawTokensQuery = `#graphql\n    query GetPool($id: String!, $chain: GqlChain!) {\n      poolGetPool(id:$id, chain:$chain) {\n        id\n        address\n        type\n        protocolVersion\n        poolTokens {\n          index\n          address\n          decimals\n          balance\n          symbol\n          name\n        }\n        dynamicData {\n          totalShares\n          volume24h\n          fees24h\n          aprItems {\n            apr\n            id\n          }\n        }\n      }\n    }`;\n\n    constructor(private readonly balancerApiClient: BalancerApiClient) {}\n\n    async fetchPoolState(id: string): Promise<PoolState> {\n        const { data } = await this.balancerApiClient.fetch({\n            query: this.poolStateQuery,\n            variables: {\n                id: id.toLowerCase(),\n                // the API requires chain names to be sent as uppercase strings\n                chain: API_CHAIN_NAMES[this.balancerApiClient.chainId],\n            },\n        });\n        const poolGetPool: PoolState = {\n            ...data.poolGetPool,\n            tokens: data.poolGetPool.poolTokens,\n            type: mapPoolType(data.poolGetPool.type),\n        };\n        return poolGetPool;\n    }\n\n    async fetchPoolStateWithBalances(\n        id: string,\n    ): Promise<PoolStateWithBalancesAndDynamicData> {\n        const { data } = await this.balancerApiClient.fetch({\n            query: this.poolStateWithRawTokensQuery,\n            variables: {\n                id: id.toLowerCase(),\n                chain: API_CHAIN_NAMES[this.balancerApiClient.chainId],\n            },\n        });\n        const poolStateWithBalances: PoolStateWithBalancesAndDynamicData = {\n            ...data.poolGetPool,\n            tokens: data.poolGetPool.poolTokens,\n            type: mapPoolType(data.poolGetPool.type),\n            totalShares: data.poolGetPool.dynamicData.totalShares,\n            volume24h: data.poolGetPool.dynamicData.volume24h,\n            fees24h: data.poolGetPool.dynamicData.fees24h,\n            aprItems: data.poolGetPool.dynamicData.aprItems,\n        };\n        return poolStateWithBalances;\n    }\n}\n","import { TokenAmount } from \"@/entities\";\nimport { Path } from \"@/entities/swap/paths/types\";\nimport { SwapKind } from \"@/types\";\nimport { API_CHAIN_NAMES, ChainId } from \"@/utils\";\nimport { Address } from \"viem\";\n\nimport { BalancerApiClient } from \"../../client\";\n\nexport type SorInput = {\n    chainId: ChainId;\n    tokenIn: Address;\n    tokenOut: Address;\n    swapKind: SwapKind;\n    swapAmount: TokenAmount; // API expects input in human readable form\n    useProtocolVersion?: 2 | 3; // If not specified API will return best\n};\n\nexport type SorSwapResult = {\n    paths: Path[];\n    routes: SorRoute[];\n    priceImpact: {\n        error: string | null;\n        priceImpact: string;\n    };\n    /**\n     * Total swap fee in percentage\n     */\n    totalSwapFee: number;\n};\n\n// FIXME: these types should exist within the GQL schema\n// NOTE: there exists a priceImpact query and typings for this but these are tightly coupled to addLiquidity operations\nexport type SorPriceImpact = {\n    error: string | null;\n    priceImpact: string;\n};\n\nexport type SorHop = {\n    poolId: string;\n    tokenIn: string;\n    tokenInAmount: string;\n    tokenOut: string;\n    tokenOutAmount: string;\n    pool: {\n        symbol: string;\n    };\n};\n\nexport type SorRoute = {\n    share: string;\n    tokenInAmount: string;\n    tokenOut: string;\n    tokenOutAmount: string;\n    hops: SorHop[];\n};\n\nexport class SorSwapPaths {\n    readonly sorSwapPathQuery = `#graphql\n  query SorSwapPaths($chain: GqlChain!, $swapType: GqlSorSwapType!, $swapAmount: AmountHumanReadable!, $tokenIn: String!, $tokenOut: String!) {\n    sorGetSwapPaths(\n      swapAmount: $swapAmount\n      chain: $chain\n      swapType: $swapType\n      tokenIn: $tokenIn\n      tokenOut: $tokenOut\n    ) {\n      tokenInAmount\n      tokenOutAmount\n      returnAmount\n      priceImpact {\n        error\n        priceImpact\n      }\n      totalSwapFee\n      swapAmount\n      paths {\n        inputAmountRaw\n        outputAmountRaw\n        pools\n        protocolVersion\n        tokens {\n          address\n          decimals\n        }\n      }\n      routes {\n        share\n        tokenInAmount\n        tokenOut\n        tokenOutAmount\n        hops {\n          poolId\n          tokenIn\n          tokenInAmount\n          tokenOut\n          tokenOutAmount\n          pool {\n            symbol\n          }\n        }\n      }\n    }\n  }\n`;\n    readonly sorSwapPathQueryWithVersion = `#graphql\n  query SorSwapPaths($chain: GqlChain!, $swapType: GqlSorSwapType!, $swapAmount: AmountHumanReadable!, $tokenIn: String!, $tokenOut: String!, $useProtocolVersion: Int!) {\n    sorGetSwapPaths(\n      swapAmount: $swapAmount\n      chain: $chain\n      swapType: $swapType\n      tokenIn: $tokenIn\n      tokenOut: $tokenOut\n      useProtocolVersion: $useProtocolVersion\n    ) {\n      tokenInAmount\n      tokenOutAmount\n      returnAmount\n      priceImpact {\n        error\n        priceImpact\n      }\n      totalSwapFee\n      swapAmount\n      paths {\n        inputAmountRaw\n        outputAmountRaw\n        pools\n        protocolVersion\n        tokens {\n          address\n          decimals\n        }\n      }\n      routes {\n        share\n        tokenInAmount\n        tokenOut\n        tokenOutAmount\n        hops {\n          poolId\n          tokenIn\n          tokenInAmount\n          tokenOut\n          tokenOutAmount\n          pool {\n            symbol\n          }\n        }\n      }\n    }\n  }\n`;\n\n    constructor(private readonly balancerApiClient: BalancerApiClient) {}\n\n    async fetchSorSwapPaths(sorInput: SorInput): Promise<SorSwapResult> {\n        const variables = {\n            chain: this.mapGqlChain(sorInput.chainId),\n            swapAmount: sorInput.swapAmount.toSignificant(\n                sorInput.swapAmount.token.decimals,\n            ), // Must use human scale\n            swapType:\n                sorInput.swapKind === SwapKind.GivenIn\n                    ? \"EXACT_IN\"\n                    : \"EXACT_OUT\",\n            tokenIn: sorInput.tokenIn,\n            tokenOut: sorInput.tokenOut,\n        };\n        const { data } = await this.balancerApiClient.fetch({\n            query: sorInput.useProtocolVersion\n                ? this.sorSwapPathQueryWithVersion\n                : this.sorSwapPathQuery,\n            variables: sorInput.useProtocolVersion\n                ? {\n                      ...variables,\n                      useProtocolVersion: sorInput.useProtocolVersion,\n                  }\n                : variables,\n        });\n        const paths: Path[] = data.sorGetSwapPaths.paths;\n        const priceImpact: SorPriceImpact = data.sorGetSwapPaths.priceImpact;\n        const routes: SorRoute[] = data.sorGetSwapPaths.routes;\n        const totalSwapFee = Number(data.sorGetSwapPaths.totalSwapFee);\n        return { paths, priceImpact, routes, totalSwapFee };\n    }\n\n    private mapGqlChain(chainId: ChainId): string {\n        if (chainId in API_CHAIN_NAMES) {\n            return API_CHAIN_NAMES[chainId];\n        } else throw Error(`Unsupported API chain: ${chainId}`);\n    }\n}\n","import { BalancerApiClient } from '../../client';\nimport { API_CHAIN_NAMES } from '../../../../../utils/constants';\nimport { BufferState } from '@/entities';\nimport { Address } from 'viem';\n\nexport class Buffers {\n    readonly bufferStateQuery = `\n      query GetBufferState($wrappedTokenAddress: String!, $chain: GqlChain!) {\n        tokenGetTokens(\n        chains: [$chain],\n          where: {tokensIn: [$wrappedTokenAddress]}\n        ) {\n          address\n          decimals\n          isErc4626\n          underlyingTokenAddress\n        }\n      }\n    `;\n\n    constructor(private readonly balancerApiClient: BalancerApiClient) {}\n\n    async fetchBufferState(wrappedTokenAddress: string): Promise<BufferState> {\n        const { data } = await this.balancerApiClient.fetch({\n            query: this.bufferStateQuery,\n            variables: {\n                wrappedTokenAddress: wrappedTokenAddress.toLowerCase(),\n                // the API requires chain names to be sent as uppercase strings\n                chain: API_CHAIN_NAMES[this.balancerApiClient.chainId],\n            },\n        });\n        const wrappedToken = data.tokenGetTokens[0] as {\n            address: Address;\n            decimals: number;\n            isErc4626: boolean;\n            underlyingTokenAddress: Address;\n        };\n        if (!wrappedToken.isErc4626) {\n            throw new Error(\n                `Wrapped token address provided is not an ERC4626: ${wrappedTokenAddress}`,\n            );\n        }\n        const bufferState: BufferState = {\n            wrappedToken: {\n                address: wrappedToken.address,\n                decimals: wrappedToken.decimals,\n            },\n            underlyingToken: {\n                address: wrappedToken.underlyingTokenAddress,\n                decimals: wrappedToken.decimals,\n            },\n        };\n        return bufferState;\n    }\n}\n","import { ChainId } from '../../../utils';\nimport { BalancerApiClient } from './client';\nimport { NestedPools } from './modules/nested-pool-state';\nimport { Pools } from './modules/pool-state';\nimport { SorSwapPaths } from './modules/sorSwapPaths';\nimport { Buffers } from './modules/buffer-state';\n\nexport {\n    SorInput as GetQuoteInput,\n    SorHop,\n    SorRoute,\n    SorSwapResult,\n} from './modules/sorSwapPaths';\nexport {\n    mapPoolToNestedPoolStateV2,\n    mapPoolToNestedPoolStateV3,\n    PoolGetPool,\n} from './modules/nested-pool-state';\n\nexport class BalancerApi {\n    balancerApiClient: BalancerApiClient;\n    pools: Pools;\n    nestedPools: NestedPools;\n    sorSwapPaths: SorSwapPaths;\n    buffers: Buffers;\n\n    constructor(balancerApiUrl: string, chainId: ChainId) {\n        this.balancerApiClient = new BalancerApiClient(balancerApiUrl, chainId);\n        this.pools = new Pools(this.balancerApiClient);\n        this.nestedPools = new NestedPools(this.balancerApiClient);\n        this.sorSwapPaths = new SorSwapPaths(this.balancerApiClient);\n        this.buffers = new Buffers(this.balancerApiClient);\n    }\n}\n","import {\n    Address,\n    Hex,\n    PublicClient,\n    createPublicClient,\n    getContract,\n    http,\n} from 'viem';\nimport { CHAINS } from '../../utils';\nimport { PoolState } from '../../entities';\nimport {\n    getPoolTokensV2,\n    getPoolTokensV3,\n    getTokenDecimals,\n} from '../../utils/tokens';\n\nexport class InitPoolDataProvider {\n    private readonly client: PublicClient;\n\n    private readonly simplePoolAbi = [\n        {\n            inputs: [],\n            name: 'getPoolId',\n            outputs: [\n                {\n                    internalType: 'bytes32',\n                    name: '',\n                    type: 'bytes32',\n                },\n            ],\n            stateMutability: 'view',\n            type: 'function',\n        },\n    ];\n\n    constructor(\n        private readonly chainId: number,\n        private readonly rpcUrl: string,\n    ) {\n        this.client = createPublicClient({\n            transport: http(this.rpcUrl, { timeout: 60_000 }),\n            chain: CHAINS[this.chainId],\n        });\n    }\n\n    public async getInitPoolData(\n        poolAddress: Address,\n        poolType: string,\n        protocolVersion: 2 | 3,\n    ): Promise<PoolState> {\n        if (protocolVersion === 2) {\n            return this.getInitPoolDataV2(poolAddress, poolType);\n        }\n        return this.getInitPoolDataV3(poolAddress, poolType);\n    }\n\n    private async getInitPoolDataV2(\n        poolAddress: Address,\n        poolType: string,\n    ): Promise<PoolState> {\n        const poolContract = getContract({\n            abi: this.simplePoolAbi,\n            address: poolAddress,\n            client: this.client,\n        });\n\n        const poolId = (await poolContract.read.getPoolId()) as Hex;\n        const poolTokensFromVault = await getPoolTokensV2(poolId, this.client);\n        const poolTokens = await Promise.all(\n            poolTokensFromVault[0].map(async (address, index) => {\n                const decimals = await getTokenDecimals(address, this.client);\n                return {\n                    address: address.toLowerCase() as Address,\n                    index,\n                    decimals,\n                };\n            }),\n        );\n        return {\n            id: poolId,\n            address: poolAddress.toLowerCase() as Address,\n            type: poolType,\n            tokens: poolTokens,\n            protocolVersion: 2,\n        };\n    }\n\n    private async getInitPoolDataV3(\n        poolAddress: Address,\n        poolType: string,\n    ): Promise<PoolState> {\n        const poolTokensFromVault: Address[] = await getPoolTokensV3(\n            poolAddress,\n            this.client,\n        );\n\n        const poolTokens = await Promise.all(\n            poolTokensFromVault.map(async (address, index) => {\n                const decimals = await getTokenDecimals(address, this.client);\n                return {\n                    address: address.toLowerCase() as Address,\n                    index,\n                    decimals,\n                };\n            }),\n        );\n        return {\n            id: poolAddress,\n            address: poolAddress.toLowerCase() as Address,\n            type: poolType,\n            tokens: poolTokens,\n            protocolVersion: 3,\n        };\n    }\n}\n","import { Address, Client, Hex, PublicClient, getContract } from 'viem';\nimport { vaultV2Abi, vaultExtensionAbi_V3 } from '../abi';\nimport { VAULT, VAULT_V3 } from './constants';\n\nexport async function getTokenDecimals(\n    tokenAddress: Address,\n    client: Client,\n): Promise<number> {\n    try {\n        const abi = [\n            {\n                inputs: [],\n                name: 'decimals',\n                outputs: [\n                    {\n                        internalType: 'uint8',\n                        name: '',\n                        type: 'uint8',\n                    },\n                ],\n                stateMutability: 'view',\n                type: 'function',\n            },\n        ];\n\n        const tokenContract = getContract({\n            abi,\n            address: tokenAddress,\n            client,\n        });\n        const decimals: number =\n            (await tokenContract.read.decimals()) as number;\n        return decimals;\n    } catch (e) {\n        console.warn(e);\n        throw new Error(\n            `Error: Unable to get Token Decimals from token: ${tokenAddress}`,\n        );\n    }\n}\n\nexport async function getPoolTokensV2(\n    poolId: Hex,\n    client: PublicClient,\n): Promise<[Address[], bigint[], bigint]> {\n    try {\n        const chainId = await client.getChainId();\n        const vaultV2 = getContract({\n            abi: vaultV2Abi,\n            address: VAULT[chainId],\n            client,\n        });\n        const poolTokensFromVault = (await vaultV2.read.getPoolTokens([\n            poolId,\n        ])) as [Address[], bigint[], bigint];\n        return poolTokensFromVault;\n    } catch (e) {\n        console.warn(e);\n        throw new Error(\n            `Error: Unable to get pool tokens using this pool id: ${poolId}`,\n        );\n    }\n}\n\nexport async function getPoolTokensV3(\n    poolAddress: Address,\n    client: PublicClient,\n): Promise<Address[]> {\n    try {\n        const chainId = await client.getChainId();\n        const vaultV3 = getContract({\n            abi: vaultExtensionAbi_V3,\n            address: VAULT_V3[chainId],\n            client: client,\n        });\n        return (await vaultV3.read.getPoolTokens([poolAddress])) as Address[];\n    } catch (e) {\n        console.warn(e);\n        throw new Error(\n            `Error: Unable to get pool tokens using this pool address: ${poolAddress}`,\n        );\n    }\n}\n","import {\n    Address,\n    PublicClient,\n    createPublicClient,\n    http,\n    parseAbi,\n} from 'viem';\nimport { PoolState } from '@/entities';\nimport { CHAINS, VAULT_V3 } from '@/utils';\nimport { vaultExtensionAbi_V3 } from '@/abi';\n\nexport class Pools {\n    client: PublicClient;\n    constructor(\n        public rpcUrl: string,\n        public chainId: number,\n    ) {\n        this.client = createPublicClient({\n            transport: http(this.rpcUrl),\n            chain: CHAINS[this.chainId],\n        });\n    }\n\n    async fetchPoolState(id: Address, poolType: string): Promise<PoolState> {\n        // First call fetches pool tokens from vault\n        const poolTokens = await this.client.readContract({\n            address: VAULT_V3[this.chainId],\n            abi: vaultExtensionAbi_V3,\n            functionName: 'getPoolTokens',\n            args: [id],\n        });\n\n        // Multicall to fetch token decimals\n        const decimalCalls = poolTokens.map((t) => {\n            return {\n                address: t as Address,\n                abi: parseAbi([\n                    'function decimals() external view returns (uint8)',\n                ]),\n                functionName: 'decimals',\n            } as const;\n        });\n\n        const decimals = await this.client.multicall({\n            contracts: decimalCalls,\n            allowFailure: false,\n        });\n\n        const poolState: PoolState = {\n            id,\n            address: id,\n            type: poolType,\n            protocolVersion: 3,\n            tokens: poolTokens.map((t, i) => {\n                return {\n                    index: i,\n                    address: t,\n                    decimals: decimals[i],\n                };\n            }),\n        };\n\n        return poolState;\n    }\n}\n\nexport class OnChainProvider {\n    pools: Pools;\n    constructor(rpcUrl: string, chainId: number) {\n        this.pools = new Pools(rpcUrl, chainId);\n    }\n}\n","import { encodeAbiParameters } from 'viem';\nimport { Address } from '../../types';\nimport { AddLiquidityKind } from '../addLiquidity/types';\nimport {\n    AddLiquidityAmounts,\n    InitPoolAmountsComposableStable,\n    RemoveLiquidityAmounts,\n} from '../types';\nimport { RemoveLiquidityKind } from '../removeLiquidity/types';\nimport {\n    addLiquiditySingleTokenShouldHaveTokenInIndexError,\n    removeLiquiditySingleTokenExactInShouldHaveTokenOutIndexError,\n} from '@/utils/errors';\nimport { encodeRemoveLiquidityRecovery } from './base';\n\nexport enum ComposableStablePoolJoinKind {\n    INIT = 0,\n    EXACT_TOKENS_IN_FOR_BPT_OUT = 1,\n    TOKEN_IN_FOR_EXACT_BPT_OUT = 2,\n    ALL_TOKENS_IN_FOR_EXACT_BPT_OUT = 3,\n}\n\nexport enum ComposableStablePoolExitKind {\n    EXACT_BPT_IN_FOR_ONE_TOKEN_OUT = 0,\n    BPT_IN_FOR_EXACT_TOKENS_OUT = 1,\n    EXACT_BPT_IN_FOR_ALL_TOKENS_OUT = 2,\n}\n\nexport class ComposableStableEncoder {\n    /**\n     * Cannot be constructed.\n     */\n    private constructor() {\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n    }\n\n    /**\n     * Encodes the User Data for initializing a WeightedPool\n     * @param amounts Amounts of tokens to be added to the pool\n     * @returns\n     */\n    static encodeInitPoolUserData(amounts: InitPoolAmountsComposableStable) {\n        return ComposableStableEncoder.initPool(amounts.amountsIn);\n    }\n\n    /**\n     * Encodes the User Data for adding liquidity to a ComposableStablePool\n     * @param kind Kind of the Add Liquidity operation: Init, Unbalanced, SingleToken, Proportional\n     * @param amounts Amounts of tokens to be added to the pool\n     * @returns\n     */\n    static encodeAddLiquidityUserData(\n        kind: AddLiquidityKind,\n        amounts: AddLiquidityAmounts & { maxAmountsInWithoutBpt: bigint[] },\n    ): Address {\n        switch (kind) {\n            case AddLiquidityKind.Unbalanced:\n                return ComposableStableEncoder.addLiquidityUnbalanced(\n                    amounts.maxAmountsInWithoutBpt,\n                    amounts.minimumBpt,\n                );\n            case AddLiquidityKind.SingleToken: {\n                // just a sanity check as this is already checked in InputValidator\n                if (amounts.tokenInIndex === undefined) {\n                    throw addLiquiditySingleTokenShouldHaveTokenInIndexError;\n                }\n                return ComposableStableEncoder.addLiquiditySingleToken(\n                    amounts.minimumBpt,\n                    amounts.tokenInIndex,\n                );\n            }\n            case AddLiquidityKind.Proportional: {\n                return ComposableStableEncoder.addLiquidityProportional(\n                    amounts.minimumBpt,\n                );\n            }\n        }\n    }\n\n    /**\n     * Encodes the User Data for removing liquidity to a ComposableStablePool\n     * @param kind Kind of the Remove Liquidity operation: Unbalanced, SingleTokenExactIn, Proportional\n     * @param amounts Amounts of tokens to be removed from the pool\n     * @returns\n     */\n    static encodeRemoveLiquidityUserData(\n        kind: RemoveLiquidityKind,\n        amounts: RemoveLiquidityAmounts,\n    ): Address {\n        switch (kind) {\n            case RemoveLiquidityKind.Unbalanced:\n            case RemoveLiquidityKind.SingleTokenExactOut:\n                return ComposableStableEncoder.removeLiquidityUnbalanced(\n                    amounts.minAmountsOut,\n                    amounts.maxBptAmountIn,\n                );\n            case RemoveLiquidityKind.SingleTokenExactIn:\n                if (amounts.tokenOutIndex === undefined)\n                    throw removeLiquiditySingleTokenExactInShouldHaveTokenOutIndexError;\n\n                return ComposableStableEncoder.removeLiquiditySingleTokenExactIn(\n                    amounts.maxBptAmountIn,\n                    amounts.tokenOutIndex,\n                );\n            case RemoveLiquidityKind.Proportional:\n                return ComposableStableEncoder.removeLiquidityProportional(\n                    amounts.maxBptAmountIn,\n                );\n            case RemoveLiquidityKind.Recovery:\n                return encodeRemoveLiquidityRecovery(amounts.maxBptAmountIn);\n        }\n    }\n\n    /**\n     * Encodes the userData parameter for providing the initial liquidity to a ComposableStablePool\n     * @param initialBalances - the amounts of tokens to send to the pool to form the initial balances\n     */\n    static initPool = (amountsIn: bigint[]): Address =>\n        encodeAbiParameters(\n            [{ type: 'uint256' }, { type: 'uint256[]' }],\n            [BigInt(ComposableStablePoolJoinKind.INIT), amountsIn],\n        );\n\n    /**\n     * Encodes the userData parameter for adding liquidity to a ComposableStablePool with exact token inputs\n     * @param amountsIn - the amounts each of token to deposit in the pool as liquidity\n     * @param minimumBPT - the minimum acceptable BPT to receive in return for deposited tokens\n     */\n    static addLiquidityUnbalanced = (\n        amountsIn: bigint[],\n        minimumBPT: bigint,\n    ): Address =>\n        encodeAbiParameters(\n            [{ type: 'uint256' }, { type: 'uint256[]' }, { type: 'uint256' }],\n            [\n                BigInt(\n                    ComposableStablePoolJoinKind.EXACT_TOKENS_IN_FOR_BPT_OUT,\n                ),\n                amountsIn,\n                minimumBPT,\n            ],\n        );\n\n    /**\n     * Encodes the userData parameter for adding liquidity to a ComposableStablePool with a single token to receive an exact amount of BPT\n     * @param bptAmountOut - the amount of BPT to be minted\n     * @param tokenIndex - the index of the token to be provided as liquidity. This index should consider tokens array without BPT.\n     */\n    static addLiquiditySingleToken = (\n        bptAmountOut: bigint,\n        tokenIndex: number,\n    ): Address => {\n        return encodeAbiParameters(\n            [{ type: 'uint256' }, { type: 'uint256' }, { type: 'uint256' }],\n            [\n                BigInt(ComposableStablePoolJoinKind.TOKEN_IN_FOR_EXACT_BPT_OUT),\n                bptAmountOut,\n                BigInt(tokenIndex),\n            ],\n        );\n    };\n\n    /**\n     * Encodes the userData parameter for adding liquidity to a ComposableStablePool proportionally to receive an exact amount of BPT\n     * @param bptAmountOut - the amount of BPT to be minted\n     */\n    static addLiquidityProportional = (bptAmountOut: bigint): Address => {\n        return encodeAbiParameters(\n            [{ type: 'uint256' }, { type: 'uint256' }],\n            [\n                BigInt(\n                    ComposableStablePoolJoinKind.ALL_TOKENS_IN_FOR_EXACT_BPT_OUT,\n                ),\n                bptAmountOut,\n            ],\n        );\n    };\n\n    /**\n     * Encodes the userData parameter for removing liquidity from a ComposableStablePool by removing tokens in return for an exact amount of BPT\n     * @param bptAmountIn - the amount of BPT to be burned\n     * @param tokenIndex - the index of the token to be removed from the pool\n     */\n    static removeLiquiditySingleTokenExactIn = (\n        bptAmountIn: bigint,\n        tokenIndex: number,\n    ): Address => {\n        return encodeAbiParameters(\n            [{ type: 'uint256' }, { type: 'uint256' }, { type: 'uint256' }],\n            [\n                BigInt(\n                    ComposableStablePoolExitKind.EXACT_BPT_IN_FOR_ONE_TOKEN_OUT,\n                ),\n                bptAmountIn,\n                BigInt(tokenIndex),\n            ],\n        );\n    };\n\n    /**\n     * Encodes the userData parameter for removing liquidity from a ComposableStablePool by removing tokens in return for an exact amount of BPT\n     * @param bptAmountIn - the amount of BPT to be burned\n     */\n    static removeLiquidityProportional = (bptAmountIn: bigint): Address => {\n        return encodeAbiParameters(\n            [{ type: 'uint256' }, { type: 'uint256' }],\n            [\n                BigInt(\n                    ComposableStablePoolExitKind.EXACT_BPT_IN_FOR_ALL_TOKENS_OUT,\n                ),\n                bptAmountIn,\n            ],\n        );\n    };\n\n    /**\n     * Encodes the userData parameter for removing liquidity from a ComposableStablePool by removing exact amounts of tokens\n     * @param amountsOut - the amounts of each token to be withdrawn from the pool\n     * @param maxBPTAmountIn - the minimum acceptable BPT to burn in return for withdrawn tokens\n     */\n    static removeLiquidityUnbalanced = (\n        amountsOut: bigint[],\n        maxBPTAmountIn: bigint,\n    ): Address =>\n        encodeAbiParameters(\n            [{ type: 'uint256' }, { type: 'uint256[]' }, { type: 'uint256' }],\n            [\n                BigInt(\n                    ComposableStablePoolExitKind.BPT_IN_FOR_EXACT_TOKENS_OUT,\n                ),\n                amountsOut,\n                maxBPTAmountIn,\n            ],\n        );\n}\n","import { TokenAmount } from '../tokenAmount';\nimport { Slippage } from '../slippage';\nimport { PoolState } from '../types';\nimport { Address, Hex, InputAmount } from '../../types';\nimport {\n    AddLiquidityV2BuildCallInput,\n    AddLiquidityV2QueryOutput,\n} from './addLiquidityV2/types';\nimport { Permit2 } from '../permit2Helper';\nimport { parseAddLiquidityArgs } from '../utils';\n\nexport enum AddLiquidityKind {\n    Unbalanced = 'Unbalanced',\n    SingleToken = 'SingleToken',\n    Proportional = 'Proportional',\n}\n\n// This will be extended for each pools specific input requirements\nexport type AddLiquidityBaseInput = {\n    chainId: number;\n    rpcUrl: string;\n    sender?: Address;\n    userData?: Hex;\n};\n\nexport type AddLiquidityUnbalancedInput = AddLiquidityBaseInput & {\n    amountsIn: InputAmount[];\n    kind: AddLiquidityKind.Unbalanced;\n};\n\nexport type AddLiquiditySingleTokenInput = AddLiquidityBaseInput & {\n    bptOut: InputAmount;\n    tokenIn: Address;\n    kind: AddLiquidityKind.SingleToken;\n};\n\nexport type AddLiquidityProportionalInput = AddLiquidityBaseInput & {\n    referenceAmount: InputAmount;\n    kind: AddLiquidityKind.Proportional;\n};\n\nexport type AddLiquidityInput =\n    | AddLiquidityUnbalancedInput\n    | AddLiquiditySingleTokenInput\n    | AddLiquidityProportionalInput;\n\nexport type AddLiquidityBaseQueryOutput = {\n    poolType: string;\n    poolId: Hex;\n    addLiquidityKind: AddLiquidityKind;\n    bptOut: TokenAmount;\n    amountsIn: TokenAmount[];\n    chainId: number;\n    tokenInIndex?: number;\n    protocolVersion: 1 | 2 | 3;\n    to: Address;\n};\n\nexport type AddLiquidityQueryOutput =\n    | AddLiquidityBaseQueryOutput\n    | AddLiquidityV2QueryOutput;\n\nexport type AddLiquidityBaseBuildCallInput = {\n    slippage: Slippage;\n    wethIsEth?: boolean;\n} & AddLiquidityBaseQueryOutput;\n\nexport type AddLiquidityBuildCallInput =\n    | AddLiquidityBaseBuildCallInput\n    | AddLiquidityV2BuildCallInput;\n\nexport interface AddLiquidityBase {\n    query(\n        input: AddLiquidityInput,\n        poolState: PoolState,\n    ): Promise<AddLiquidityQueryOutput>;\n    buildCall(input: AddLiquidityBuildCallInput): AddLiquidityBuildCallOutput;\n    buildCallWithPermit2(\n        input: AddLiquidityBuildCallInput,\n        permit2: Permit2,\n    ): AddLiquidityBuildCallOutput;\n}\n\nexport type AddLiquidityBuildCallOutput = {\n    callData: Hex;\n    to: Address;\n    args: ReturnType<typeof parseAddLiquidityArgs>['args'];\n    value: bigint;\n    minBptOut: TokenAmount;\n    maxAmountsIn: TokenAmount[];\n};\n\n// NOTE: this is to prevent an issue where we want to return args for liquidity build output, but args differ for V3 Boosted\nexport type AddLiquidityBoostedV3BuildCallOutput = {\n    callData: Hex;\n    to: Address;\n    args: readonly [Hex, bigint[], bigint, boolean, Hex];\n    value: bigint;\n    minBptOut: TokenAmount;\n    maxAmountsIn: TokenAmount[];\n};\n\nexport type AddLiquidityConfig = {\n    customAddLiquidityTypes: Record<string, AddLiquidityBase>;\n};\n\n// type exposed because FE team uses it for batching add liquidity and stake operations\nexport type JoinPoolRequest = {\n    assets: Address[];\n    maxAmountsIn: readonly bigint[];\n    userData: Hex;\n    fromInternalBalance: boolean;\n};\n","import { Address, InputAmount } from '../../types';\nimport { Permit } from '../permitHelper';\nimport { Slippage } from '../slippage';\nimport { TokenAmount } from '../tokenAmount';\nimport { PoolState } from '../types';\nimport { parseRemoveLiquidityArgs } from '../utils/parseRemoveLiquidityArgs';\nimport {\n    RemoveLiquidityV2BuildCallInput,\n    RemoveLiquidityV2QueryOutput,\n} from './removeLiquidityV2/types';\nimport { RemoveLiquidityBoostedBuildCallInput } from '../removeLiquidityBoosted/types';\nimport { Hex } from 'viem';\n\nexport enum RemoveLiquidityKind {\n    Unbalanced = 'Unbalanced', // exact out\n    SingleTokenExactOut = 'SingleTokenExactOut', // exact out (single token out)\n    SingleTokenExactIn = 'SingleTokenExactIn', // exact in (single token out)\n    Proportional = 'Proportional', // exact in (all tokens out)\n    Recovery = 'Recovery', // exact in (all tokens out) - Pool in recovery mode\n}\n\n// This will be extended for each pools specific output requirements\nexport type RemoveLiquidityBaseInput = {\n    chainId: number;\n    rpcUrl: string;\n    sender?: Address;\n    userData?: Hex;\n};\n\nexport type RemoveLiquidityUnbalancedInput = RemoveLiquidityBaseInput & {\n    amountsOut: InputAmount[];\n    kind: RemoveLiquidityKind.Unbalanced;\n};\n\nexport type RemoveLiquiditySingleTokenExactOutInput =\n    RemoveLiquidityBaseInput & {\n        amountOut: InputAmount;\n        kind: RemoveLiquidityKind.SingleTokenExactOut;\n    };\n\nexport type RemoveLiquiditySingleTokenExactInInput =\n    RemoveLiquidityBaseInput & {\n        bptIn: InputAmount;\n        tokenOut: Address;\n        kind: RemoveLiquidityKind.SingleTokenExactIn;\n    };\n\nexport type RemoveLiquidityProportionalInput = RemoveLiquidityBaseInput & {\n    bptIn: InputAmount;\n    kind: RemoveLiquidityKind.Proportional;\n};\n\nexport type RemoveLiquidityRecoveryInput = RemoveLiquidityBaseInput & {\n    bptIn: InputAmount;\n    kind: RemoveLiquidityKind.Recovery;\n};\n\nexport type RemoveLiquidityInput =\n    | RemoveLiquidityUnbalancedInput\n    | RemoveLiquiditySingleTokenExactOutInput\n    | RemoveLiquiditySingleTokenExactInInput\n    | RemoveLiquidityProportionalInput\n    | RemoveLiquidityRecoveryInput;\n\n// Returned from a remove liquidity query\nexport type RemoveLiquidityBaseQueryOutput = {\n    poolType: string;\n    poolId: Address;\n    removeLiquidityKind: RemoveLiquidityKind;\n    bptIn: TokenAmount;\n    amountsOut: TokenAmount[];\n    tokenOutIndex?: number;\n    protocolVersion: 1 | 2 | 3;\n    chainId: number;\n    to: Address;\n};\n\nexport type RemoveLiquidityQueryOutput =\n    | RemoveLiquidityBaseQueryOutput\n    | RemoveLiquidityV2QueryOutput;\n\nexport type RemoveLiquidityBaseBuildCallInput = {\n    slippage: Slippage;\n    wethIsEth?: boolean;\n} & RemoveLiquidityBaseQueryOutput;\n\nexport type RemoveLiquidityBuildCallInput =\n    | RemoveLiquidityBaseBuildCallInput\n    | RemoveLiquidityV2BuildCallInput\n    | RemoveLiquidityBoostedBuildCallInput;\n\nexport type RemoveLiquidityBuildCallOutput = {\n    callData: Address;\n    to: Address;\n    value: bigint;\n    maxBptIn: TokenAmount;\n    minAmountsOut: TokenAmount[];\n    args?: ReturnType<typeof parseRemoveLiquidityArgs>['args'];\n};\n\nexport interface RemoveLiquidityBase {\n    query(\n        input: RemoveLiquidityInput,\n        poolState: PoolState,\n    ): Promise<RemoveLiquidityQueryOutput>;\n    buildCall(\n        input: RemoveLiquidityBuildCallInput,\n    ): RemoveLiquidityBuildCallOutput;\n    buildCallWithPermit(\n        input: RemoveLiquidityBuildCallInput,\n        permit: Permit,\n    ): RemoveLiquidityBuildCallOutput;\n}\n\nexport type RemoveLiquidityConfig = {\n    customRemoveLiquidityTypes: Record<string, RemoveLiquidityBase>;\n};\n\n// type exposed because FE team uses it for batching unstake and remove liquidity operations\nexport type ExitPoolRequest = {\n    assets: Address[];\n    minAmountsOut: bigint[];\n    userData: Address;\n    toInternalBalance: boolean;\n};\n","import { encodeAbiParameters } from 'viem';\n\nconst RECOVERY_REMOVE_LIQUIDITY_CODE = 255n;\n\nexport const encodeRemoveLiquidityRecovery = (bptAmountIn) => {\n    return encodeAbiParameters(\n        [{ type: 'uint256' }, { type: 'uint256' }],\n        [RECOVERY_REMOVE_LIQUIDITY_CODE, bptAmountIn],\n    );\n};\n","export const cowAmmPoolAbi = [\n    {\n        type: 'constructor',\n        inputs: [],\n        stateMutability: 'nonpayable',\n    },\n    {\n        type: 'function',\n        name: 'BONE',\n        inputs: [],\n        outputs: [\n            {\n                name: '',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n    },\n    {\n        type: 'function',\n        name: 'BPOW_PRECISION',\n        inputs: [],\n        outputs: [\n            {\n                name: '',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n    },\n    {\n        type: 'function',\n        name: 'EXIT_FEE',\n        inputs: [],\n        outputs: [\n            {\n                name: '',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n    },\n    {\n        type: 'function',\n        name: 'INIT_POOL_SUPPLY',\n        inputs: [],\n        outputs: [\n            {\n                name: '',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n    },\n    {\n        type: 'function',\n        name: 'MAX_BOUND_TOKENS',\n        inputs: [],\n        outputs: [\n            {\n                name: '',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n    },\n    {\n        type: 'function',\n        name: 'MAX_BPOW_BASE',\n        inputs: [],\n        outputs: [\n            {\n                name: '',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n    },\n    {\n        type: 'function',\n        name: 'MAX_FEE',\n        inputs: [],\n        outputs: [\n            {\n                name: '',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n    },\n    {\n        type: 'function',\n        name: 'MAX_IN_RATIO',\n        inputs: [],\n        outputs: [\n            {\n                name: '',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n    },\n    {\n        type: 'function',\n        name: 'MAX_OUT_RATIO',\n        inputs: [],\n        outputs: [\n            {\n                name: '',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n    },\n    {\n        type: 'function',\n        name: 'MAX_TOTAL_WEIGHT',\n        inputs: [],\n        outputs: [\n            {\n                name: '',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n    },\n    {\n        type: 'function',\n        name: 'MAX_WEIGHT',\n        inputs: [],\n        outputs: [\n            {\n                name: '',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n    },\n    {\n        type: 'function',\n        name: 'MIN_BALANCE',\n        inputs: [],\n        outputs: [\n            {\n                name: '',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n    },\n    {\n        type: 'function',\n        name: 'MIN_BOUND_TOKENS',\n        inputs: [],\n        outputs: [\n            {\n                name: '',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n    },\n    {\n        type: 'function',\n        name: 'MIN_BPOW_BASE',\n        inputs: [],\n        outputs: [\n            {\n                name: '',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n    },\n    {\n        type: 'function',\n        name: 'MIN_FEE',\n        inputs: [],\n        outputs: [\n            {\n                name: '',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n    },\n    {\n        type: 'function',\n        name: 'MIN_WEIGHT',\n        inputs: [],\n        outputs: [\n            {\n                name: '',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n    },\n    {\n        type: 'function',\n        name: 'allowance',\n        inputs: [\n            {\n                name: 'src',\n                type: 'address',\n                internalType: 'address',\n            },\n            {\n                name: 'dst',\n                type: 'address',\n                internalType: 'address',\n            },\n        ],\n        outputs: [\n            {\n                name: '',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n    },\n    {\n        type: 'function',\n        name: 'approve',\n        inputs: [\n            {\n                name: 'dst',\n                type: 'address',\n                internalType: 'address',\n            },\n            {\n                name: 'amt',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n        ],\n        outputs: [\n            {\n                name: '',\n                type: 'bool',\n                internalType: 'bool',\n            },\n        ],\n        stateMutability: 'nonpayable',\n    },\n    {\n        type: 'function',\n        name: 'balanceOf',\n        inputs: [\n            {\n                name: 'whom',\n                type: 'address',\n                internalType: 'address',\n            },\n        ],\n        outputs: [\n            {\n                name: '',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n    },\n    {\n        type: 'function',\n        name: 'bind',\n        inputs: [\n            {\n                name: 'token',\n                type: 'address',\n                internalType: 'address',\n            },\n            {\n                name: 'balance',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n            {\n                name: 'denorm',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n        ],\n        outputs: [],\n        stateMutability: 'nonpayable',\n    },\n    {\n        type: 'function',\n        name: 'calcInGivenOut',\n        inputs: [\n            {\n                name: 'tokenBalanceIn',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n            {\n                name: 'tokenWeightIn',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n            {\n                name: 'tokenBalanceOut',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n            {\n                name: 'tokenWeightOut',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n            {\n                name: 'tokenAmountOut',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n            {\n                name: 'swapFee',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n        ],\n        outputs: [\n            {\n                name: 'tokenAmountIn',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n        ],\n        stateMutability: 'pure',\n    },\n    {\n        type: 'function',\n        name: 'calcOutGivenIn',\n        inputs: [\n            {\n                name: 'tokenBalanceIn',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n            {\n                name: 'tokenWeightIn',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n            {\n                name: 'tokenBalanceOut',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n            {\n                name: 'tokenWeightOut',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n            {\n                name: 'tokenAmountIn',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n            {\n                name: 'swapFee',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n        ],\n        outputs: [\n            {\n                name: 'tokenAmountOut',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n        ],\n        stateMutability: 'pure',\n    },\n    {\n        type: 'function',\n        name: 'calcPoolInGivenSingleOut',\n        inputs: [\n            {\n                name: 'tokenBalanceOut',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n            {\n                name: 'tokenWeightOut',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n            {\n                name: 'poolSupply',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n            {\n                name: 'totalWeight',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n            {\n                name: 'tokenAmountOut',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n            {\n                name: 'swapFee',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n        ],\n        outputs: [\n            {\n                name: 'poolAmountIn',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n        ],\n        stateMutability: 'pure',\n    },\n    {\n        type: 'function',\n        name: 'calcPoolOutGivenSingleIn',\n        inputs: [\n            {\n                name: 'tokenBalanceIn',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n            {\n                name: 'tokenWeightIn',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n            {\n                name: 'poolSupply',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n            {\n                name: 'totalWeight',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n            {\n                name: 'tokenAmountIn',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n            {\n                name: 'swapFee',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n        ],\n        outputs: [\n            {\n                name: 'poolAmountOut',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n        ],\n        stateMutability: 'pure',\n    },\n    {\n        type: 'function',\n        name: 'calcSingleInGivenPoolOut',\n        inputs: [\n            {\n                name: 'tokenBalanceIn',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n            {\n                name: 'tokenWeightIn',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n            {\n                name: 'poolSupply',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n            {\n                name: 'totalWeight',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n            {\n                name: 'poolAmountOut',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n            {\n                name: 'swapFee',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n        ],\n        outputs: [\n            {\n                name: 'tokenAmountIn',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n        ],\n        stateMutability: 'pure',\n    },\n    {\n        type: 'function',\n        name: 'calcSingleOutGivenPoolIn',\n        inputs: [\n            {\n                name: 'tokenBalanceOut',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n            {\n                name: 'tokenWeightOut',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n            {\n                name: 'poolSupply',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n            {\n                name: 'totalWeight',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n            {\n                name: 'poolAmountIn',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n            {\n                name: 'swapFee',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n        ],\n        outputs: [\n            {\n                name: 'tokenAmountOut',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n        ],\n        stateMutability: 'pure',\n    },\n    {\n        type: 'function',\n        name: 'calcSpotPrice',\n        inputs: [\n            {\n                name: 'tokenBalanceIn',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n            {\n                name: 'tokenWeightIn',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n            {\n                name: 'tokenBalanceOut',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n            {\n                name: 'tokenWeightOut',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n            {\n                name: 'swapFee',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n        ],\n        outputs: [\n            {\n                name: 'spotPrice',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n        ],\n        stateMutability: 'pure',\n    },\n    {\n        type: 'function',\n        name: 'decimals',\n        inputs: [],\n        outputs: [\n            {\n                name: '',\n                type: 'uint8',\n                internalType: 'uint8',\n            },\n        ],\n        stateMutability: 'view',\n    },\n    {\n        type: 'function',\n        name: 'decreaseApproval',\n        inputs: [\n            {\n                name: 'dst',\n                type: 'address',\n                internalType: 'address',\n            },\n            {\n                name: 'amt',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n        ],\n        outputs: [\n            {\n                name: '',\n                type: 'bool',\n                internalType: 'bool',\n            },\n        ],\n        stateMutability: 'nonpayable',\n    },\n    {\n        type: 'function',\n        name: 'exitPool',\n        inputs: [\n            {\n                name: 'poolAmountIn',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n            {\n                name: 'minAmountsOut',\n                type: 'uint256[]',\n                internalType: 'uint256[]',\n            },\n        ],\n        outputs: [],\n        stateMutability: 'nonpayable',\n    },\n    {\n        type: 'function',\n        name: 'exitswapExternAmountOut',\n        inputs: [\n            {\n                name: 'tokenOut',\n                type: 'address',\n                internalType: 'address',\n            },\n            {\n                name: 'tokenAmountOut',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n            {\n                name: 'maxPoolAmountIn',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n        ],\n        outputs: [\n            {\n                name: 'poolAmountIn',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n        ],\n        stateMutability: 'nonpayable',\n    },\n    {\n        type: 'function',\n        name: 'exitswapPoolAmountIn',\n        inputs: [\n            {\n                name: 'tokenOut',\n                type: 'address',\n                internalType: 'address',\n            },\n            {\n                name: 'poolAmountIn',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n            {\n                name: 'minAmountOut',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n        ],\n        outputs: [\n            {\n                name: 'tokenAmountOut',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n        ],\n        stateMutability: 'nonpayable',\n    },\n    {\n        type: 'function',\n        name: 'finalize',\n        inputs: [],\n        outputs: [],\n        stateMutability: 'nonpayable',\n    },\n    {\n        type: 'function',\n        name: 'getBalance',\n        inputs: [\n            {\n                name: 'token',\n                type: 'address',\n                internalType: 'address',\n            },\n        ],\n        outputs: [\n            {\n                name: '',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n    },\n    {\n        type: 'function',\n        name: 'getColor',\n        inputs: [],\n        outputs: [\n            {\n                name: '',\n                type: 'bytes32',\n                internalType: 'bytes32',\n            },\n        ],\n        stateMutability: 'pure',\n    },\n    {\n        type: 'function',\n        name: 'getController',\n        inputs: [],\n        outputs: [\n            {\n                name: '',\n                type: 'address',\n                internalType: 'address',\n            },\n        ],\n        stateMutability: 'view',\n    },\n    {\n        type: 'function',\n        name: 'getCurrentTokens',\n        inputs: [],\n        outputs: [\n            {\n                name: 'tokens',\n                type: 'address[]',\n                internalType: 'address[]',\n            },\n        ],\n        stateMutability: 'view',\n    },\n    {\n        type: 'function',\n        name: 'getDenormalizedWeight',\n        inputs: [\n            {\n                name: 'token',\n                type: 'address',\n                internalType: 'address',\n            },\n        ],\n        outputs: [\n            {\n                name: '',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n    },\n    {\n        type: 'function',\n        name: 'getFinalTokens',\n        inputs: [],\n        outputs: [\n            {\n                name: 'tokens',\n                type: 'address[]',\n                internalType: 'address[]',\n            },\n        ],\n        stateMutability: 'view',\n    },\n    {\n        type: 'function',\n        name: 'getNormalizedWeight',\n        inputs: [\n            {\n                name: 'token',\n                type: 'address',\n                internalType: 'address',\n            },\n        ],\n        outputs: [\n            {\n                name: '',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n    },\n    {\n        type: 'function',\n        name: 'getNumTokens',\n        inputs: [],\n        outputs: [\n            {\n                name: '',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n    },\n    {\n        type: 'function',\n        name: 'getSpotPrice',\n        inputs: [\n            {\n                name: 'tokenIn',\n                type: 'address',\n                internalType: 'address',\n            },\n            {\n                name: 'tokenOut',\n                type: 'address',\n                internalType: 'address',\n            },\n        ],\n        outputs: [\n            {\n                name: 'spotPrice',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n    },\n    {\n        type: 'function',\n        name: 'getSpotPriceSansFee',\n        inputs: [\n            {\n                name: 'tokenIn',\n                type: 'address',\n                internalType: 'address',\n            },\n            {\n                name: 'tokenOut',\n                type: 'address',\n                internalType: 'address',\n            },\n        ],\n        outputs: [\n            {\n                name: 'spotPrice',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n    },\n    {\n        type: 'function',\n        name: 'getSwapFee',\n        inputs: [],\n        outputs: [\n            {\n                name: '',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n    },\n    {\n        type: 'function',\n        name: 'getTotalDenormalizedWeight',\n        inputs: [],\n        outputs: [\n            {\n                name: '',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n    },\n    {\n        type: 'function',\n        name: 'increaseApproval',\n        inputs: [\n            {\n                name: 'dst',\n                type: 'address',\n                internalType: 'address',\n            },\n            {\n                name: 'amt',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n        ],\n        outputs: [\n            {\n                name: '',\n                type: 'bool',\n                internalType: 'bool',\n            },\n        ],\n        stateMutability: 'nonpayable',\n    },\n    {\n        type: 'function',\n        name: 'isBound',\n        inputs: [\n            {\n                name: 't',\n                type: 'address',\n                internalType: 'address',\n            },\n        ],\n        outputs: [\n            {\n                name: '',\n                type: 'bool',\n                internalType: 'bool',\n            },\n        ],\n        stateMutability: 'view',\n    },\n    {\n        type: 'function',\n        name: 'isFinalized',\n        inputs: [],\n        outputs: [\n            {\n                name: '',\n                type: 'bool',\n                internalType: 'bool',\n            },\n        ],\n        stateMutability: 'view',\n    },\n    {\n        type: 'function',\n        name: 'joinPool',\n        inputs: [\n            {\n                name: 'poolAmountOut',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n            {\n                name: 'maxAmountsIn',\n                type: 'uint256[]',\n                internalType: 'uint256[]',\n            },\n        ],\n        outputs: [],\n        stateMutability: 'nonpayable',\n    },\n    {\n        type: 'function',\n        name: 'joinswapExternAmountIn',\n        inputs: [\n            {\n                name: 'tokenIn',\n                type: 'address',\n                internalType: 'address',\n            },\n            {\n                name: 'tokenAmountIn',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n            {\n                name: 'minPoolAmountOut',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n        ],\n        outputs: [\n            {\n                name: 'poolAmountOut',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n        ],\n        stateMutability: 'nonpayable',\n    },\n    {\n        type: 'function',\n        name: 'joinswapPoolAmountOut',\n        inputs: [\n            {\n                name: 'tokenIn',\n                type: 'address',\n                internalType: 'address',\n            },\n            {\n                name: 'poolAmountOut',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n            {\n                name: 'maxAmountIn',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n        ],\n        outputs: [\n            {\n                name: 'tokenAmountIn',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n        ],\n        stateMutability: 'nonpayable',\n    },\n    {\n        type: 'function',\n        name: 'name',\n        inputs: [],\n        outputs: [\n            {\n                name: '',\n                type: 'string',\n                internalType: 'string',\n            },\n        ],\n        stateMutability: 'view',\n    },\n    {\n        type: 'function',\n        name: 'setController',\n        inputs: [\n            {\n                name: 'manager',\n                type: 'address',\n                internalType: 'address',\n            },\n        ],\n        outputs: [],\n        stateMutability: 'nonpayable',\n    },\n    {\n        type: 'function',\n        name: 'setSwapFee',\n        inputs: [\n            {\n                name: 'swapFee',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n        ],\n        outputs: [],\n        stateMutability: 'nonpayable',\n    },\n    {\n        type: 'function',\n        name: 'swapExactAmountIn',\n        inputs: [\n            {\n                name: 'tokenIn',\n                type: 'address',\n                internalType: 'address',\n            },\n            {\n                name: 'tokenAmountIn',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n            {\n                name: 'tokenOut',\n                type: 'address',\n                internalType: 'address',\n            },\n            {\n                name: 'minAmountOut',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n            {\n                name: 'maxPrice',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n        ],\n        outputs: [\n            {\n                name: 'tokenAmountOut',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n            {\n                name: 'spotPriceAfter',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n        ],\n        stateMutability: 'nonpayable',\n    },\n    {\n        type: 'function',\n        name: 'swapExactAmountOut',\n        inputs: [\n            {\n                name: 'tokenIn',\n                type: 'address',\n                internalType: 'address',\n            },\n            {\n                name: 'maxAmountIn',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n            {\n                name: 'tokenOut',\n                type: 'address',\n                internalType: 'address',\n            },\n            {\n                name: 'tokenAmountOut',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n            {\n                name: 'maxPrice',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n        ],\n        outputs: [\n            {\n                name: 'tokenAmountIn',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n            {\n                name: 'spotPriceAfter',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n        ],\n        stateMutability: 'nonpayable',\n    },\n    {\n        type: 'function',\n        name: 'symbol',\n        inputs: [],\n        outputs: [\n            {\n                name: '',\n                type: 'string',\n                internalType: 'string',\n            },\n        ],\n        stateMutability: 'view',\n    },\n    {\n        type: 'function',\n        name: 'totalSupply',\n        inputs: [],\n        outputs: [\n            {\n                name: '',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n        ],\n        stateMutability: 'view',\n    },\n    {\n        type: 'function',\n        name: 'transfer',\n        inputs: [\n            {\n                name: 'dst',\n                type: 'address',\n                internalType: 'address',\n            },\n            {\n                name: 'amt',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n        ],\n        outputs: [\n            {\n                name: '',\n                type: 'bool',\n                internalType: 'bool',\n            },\n        ],\n        stateMutability: 'nonpayable',\n    },\n    {\n        type: 'function',\n        name: 'transferFrom',\n        inputs: [\n            {\n                name: 'src',\n                type: 'address',\n                internalType: 'address',\n            },\n            {\n                name: 'dst',\n                type: 'address',\n                internalType: 'address',\n            },\n            {\n                name: 'amt',\n                type: 'uint256',\n                internalType: 'uint256',\n            },\n        ],\n        outputs: [\n            {\n                name: '',\n                type: 'bool',\n                internalType: 'bool',\n            },\n        ],\n        stateMutability: 'nonpayable',\n    },\n    {\n        type: 'function',\n        name: 'unbind',\n        inputs: [\n            {\n                name: 'token',\n                type: 'address',\n                internalType: 'address',\n            },\n        ],\n        outputs: [],\n        stateMutability: 'nonpayable',\n    },\n    {\n        type: 'event',\n        name: 'Approval',\n        inputs: [\n            {\n                name: 'owner',\n                type: 'address',\n                indexed: true,\n                internalType: 'address',\n            },\n            {\n                name: 'spender',\n                type: 'address',\n                indexed: true,\n                internalType: 'address',\n            },\n            {\n                name: 'value',\n                type: 'uint256',\n                indexed: false,\n                internalType: 'uint256',\n            },\n        ],\n        anonymous: false,\n    },\n    {\n        type: 'event',\n        name: 'LOG_CALL',\n        inputs: [\n            {\n                name: 'sig',\n                type: 'bytes4',\n                indexed: true,\n                internalType: 'bytes4',\n            },\n            {\n                name: 'caller',\n                type: 'address',\n                indexed: true,\n                internalType: 'address',\n            },\n            {\n                name: 'data',\n                type: 'bytes',\n                indexed: false,\n                internalType: 'bytes',\n            },\n        ],\n        anonymous: true,\n    },\n    {\n        type: 'event',\n        name: 'LOG_EXIT',\n        inputs: [\n            {\n                name: 'caller',\n                type: 'address',\n                indexed: true,\n                internalType: 'address',\n            },\n            {\n                name: 'tokenOut',\n                type: 'address',\n                indexed: true,\n                internalType: 'address',\n            },\n            {\n                name: 'tokenAmountOut',\n                type: 'uint256',\n                indexed: false,\n                internalType: 'uint256',\n            },\n        ],\n        anonymous: false,\n    },\n    {\n        type: 'event',\n        name: 'LOG_JOIN',\n        inputs: [\n            {\n                name: 'caller',\n                type: 'address',\n                indexed: true,\n                internalType: 'address',\n            },\n            {\n                name: 'tokenIn',\n                type: 'address',\n                indexed: true,\n                internalType: 'address',\n            },\n            {\n                name: 'tokenAmountIn',\n                type: 'uint256',\n                indexed: false,\n                internalType: 'uint256',\n            },\n        ],\n        anonymous: false,\n    },\n    {\n        type: 'event',\n        name: 'LOG_SWAP',\n        inputs: [\n            {\n                name: 'caller',\n                type: 'address',\n                indexed: true,\n                internalType: 'address',\n            },\n            {\n                name: 'tokenIn',\n                type: 'address',\n                indexed: true,\n                internalType: 'address',\n            },\n            {\n                name: 'tokenOut',\n                type: 'address',\n                indexed: true,\n                internalType: 'address',\n            },\n            {\n                name: 'tokenAmountIn',\n                type: 'uint256',\n                indexed: false,\n                internalType: 'uint256',\n            },\n            {\n                name: 'tokenAmountOut',\n                type: 'uint256',\n                indexed: false,\n                internalType: 'uint256',\n            },\n        ],\n        anonymous: false,\n    },\n    {\n        type: 'event',\n        name: 'Transfer',\n        inputs: [\n            {\n                name: 'from',\n                type: 'address',\n                indexed: true,\n                internalType: 'address',\n            },\n            {\n                name: 'to',\n                type: 'address',\n                indexed: true,\n                internalType: 'address',\n            },\n            {\n                name: 'value',\n                type: 'uint256',\n                indexed: false,\n                internalType: 'uint256',\n            },\n        ],\n        anonymous: false,\n    },\n] as const;\n","import { cowAmmPoolAbi } from '@/abi/cowAmmPool';\nimport { HumanAmount } from '@/data';\nimport { Address, InputAmount } from '@/types';\nimport { CHAINS, WAD } from '@/utils';\nimport {\n    createPublicClient,\n    formatEther,\n    formatUnits,\n    http,\n    parseUnits,\n} from 'viem';\n\nimport { PoolState, PoolStateWithBalances } from '../types';\nimport { getSortedTokens } from './getSortedTokens';\n\ntype MulticallContract = {\n    address: Address;\n    abi: any;\n    functionName: string;\n    args?: any;\n};\n\nexport const getPoolStateWithBalancesCowAmm = async (\n    poolState: PoolState,\n    chainId: number,\n    rpcUrl: string,\n): Promise<PoolStateWithBalances> => {\n    const totalSupplyContract = {\n        address: poolState.address,\n        abi: cowAmmPoolAbi,\n        functionName: 'totalSupply',\n    };\n    const sortedTokens = getSortedTokens(poolState.tokens, chainId);\n    const getBalanceContracts = sortedTokens.map((token) => ({\n        address: poolState.address,\n        abi: cowAmmPoolAbi,\n        functionName: 'getBalance',\n        args: [token.address],\n    }));\n\n    const publicClient = createPublicClient({\n        transport: http(rpcUrl),\n        chain: CHAINS[chainId],\n    });\n    const outputs = await publicClient.multicall({\n        contracts: [\n            totalSupplyContract,\n            ...getBalanceContracts,\n        ] as MulticallContract[],\n    });\n\n    if (outputs.some((output) => output.status === 'failure')) {\n        throw new Error(\n            'Error: Unable to get pool state with balances for CowAmm pool.',\n        );\n    }\n\n    const totalShares = outputs[0].result as bigint;\n    const balances = outputs.slice(1).map((output) => output.result as bigint);\n\n    const poolStateWithBalances: PoolStateWithBalances = {\n        ...poolState,\n        tokens: sortedTokens.map((token, i) => ({\n            address: token.address,\n            decimals: token.decimals,\n            index: i,\n            balance: formatUnits(balances[i], token.decimals) as HumanAmount,\n        })),\n        totalShares: formatEther(totalShares) as HumanAmount,\n    };\n    return poolStateWithBalances;\n};\n\n/**\n * For a given pool and reference token amount, calculate all token amounts proportional to their balances within the pool.\n *\n * Note: when using this helper to build an AddLiquidityProportional input,\n * please mind that referenceAmount should be relative to the token that the user\n * has the lowest balance compared to the pool's proportions. Otherwise the transaction\n * may require more balance than the user has.\n * @param pool\n * @param referenceAmount\n * @returns Proportional amounts\n */\nexport function calculateProportionalAmountsCowAmm(\n    pool: {\n        address: Address;\n        totalShares: HumanAmount;\n        tokens: { address: Address; balance: HumanAmount; decimals: number }[];\n    },\n    referenceAmount: InputAmount,\n): {\n    tokenAmounts: InputAmount[];\n    bptAmount: InputAmount;\n} {\n    const tokensWithBpt = [\n        ...pool.tokens,\n        {\n            address: pool.address,\n            balance: pool.totalShares,\n            decimals: 18,\n        },\n    ];\n    const bptIndex = tokensWithBpt.length - 1;\n\n    // validate that input amount is relative to a token in the pool or its BPT\n    const referenceTokenIndex = tokensWithBpt.findIndex(\n        (t) =>\n            t.address.toLowerCase() === referenceAmount.address.toLowerCase(),\n    );\n    if (referenceTokenIndex === -1) {\n        throw new Error(\n            'Reference amount must be relative to a token in the pool or its BPT',\n        );\n    }\n\n    // scale up balances from HumanAmount to RawAmount\n    const balances = tokensWithBpt.map((t) =>\n        parseUnits(t.balance, t.decimals),\n    );\n\n    // calculate proportional amounts\n    const referenceTokenBalance = balances[referenceTokenIndex];\n\n    let ratio: bigint;\n    let proportionalAmounts: bigint[];\n    if (referenceTokenIndex === bptIndex) {\n        ratio = bdiv(referenceAmount.rawAmount, referenceTokenBalance);\n        proportionalAmounts = balances.map((b) => bmul(b, ratio));\n    } else {\n        ratio = bdivDown(referenceAmount.rawAmount, referenceTokenBalance);\n        proportionalAmounts = balances.map((b) => bmulDown(b, ratio));\n    }\n\n    const amounts = tokensWithBpt.map(({ address, decimals }, index) => ({\n        address,\n        decimals,\n        rawAmount: proportionalAmounts[index],\n    }));\n\n    const bptAmount = amounts.pop() as InputAmount;\n\n    return {\n        tokenAmounts: amounts,\n        bptAmount,\n    };\n}\n\n// from cow-amm solidity implementation [bmul](https://github.com/balancer/cow-amm/blob/04c915d1ef6150b5334f4b69c7af7ddd59e050e2/src/contracts/BNum.sol#L91)\nfunction bmul(a: bigint, b: bigint): bigint {\n    const c0 = a * b;\n    if (a !== BigInt(0) && c0 / a !== b) {\n        throw new Error('BNum_MulOverflow');\n    }\n\n    // NOTE: using >> 1 instead of / 2\n    const c1 = c0 + (WAD >> 1n);\n    if (c1 < c0) {\n        throw new Error('BNum_MulOverflow');\n    }\n\n    const c2 = c1 / WAD;\n    return c2;\n}\n\nfunction bmulDown(a: bigint, b: bigint): bigint {\n    const c0 = a * b;\n    const c1 = c0 - (b >> 1n);\n    const c2 = c1 / WAD;\n    return c2;\n}\n\n// from cow-amm solidity implementation [bdiv](https://github.com/balancer/cow-amm/blob/04c915d1ef6150b5334f4b69c7af7ddd59e050e2/src/contracts/BNum.sol#L107)\nfunction bdiv(a: bigint, b: bigint): bigint {\n    if (b === 0n) {\n        throw new Error('BNum_DivZero');\n    }\n\n    const c0 = a * WAD;\n    if (a !== 0n && c0 / a !== WAD) {\n        throw new Error('BNum_DivInternal'); // bmul overflow\n    }\n\n    // NOTE: using >> 1 instead of / 2\n    const c1 = c0 + (b >> 1n);\n    if (c1 < c0) {\n        throw new Error('BNum_DivInternal'); // badd require\n    }\n\n    const c2 = c1 / b;\n    return c2;\n}\n\nfunction bdivDown(a: bigint, b: bigint): bigint {\n    if (b === 0n) {\n        throw new Error('BNum_DivZero');\n    }\n\n    const c0 = a * WAD;\n    const c1 = c0 - (WAD >> 1n);\n    return c1 / b;\n}\n","import { MinimalToken } from '../../data/types';\nimport { Token } from '../token';\n\nexport function getSortedTokens(\n    tokens: MinimalToken[],\n    chainId: number,\n): Token[] {\n    return tokens\n        .sort((a, b) => a.index - b.index)\n        .map((t) => new Token(chainId, t.address, t.decimals));\n}\n","import { createPublicClient, http } from 'viem';\nimport { Address } from '../../types';\nimport { BALANCER_QUERIES, CHAINS } from '../../utils';\nimport { balancerQueriesAbi } from '../../abi';\nimport { JoinPoolRequest } from '../addLiquidity/types';\n\nexport async function doAddLiquidityQuery(\n    rpcUrl: string,\n    chainId: number,\n    args: readonly [Address, Address, Address, JoinPoolRequest],\n): Promise<{\n    bptOut: bigint;\n    amountsIn: readonly bigint[];\n}> {\n    const client = createPublicClient({\n        transport: http(rpcUrl),\n        chain: CHAINS[chainId],\n    });\n\n    const {\n        result: [bptOut, amountsIn],\n    } = await client.simulateContract({\n        address: BALANCER_QUERIES[chainId],\n        abi: balancerQueriesAbi,\n        functionName: 'queryJoin',\n        args,\n    });\n    return {\n        bptOut,\n        amountsIn,\n    };\n}\n","import { InputAmount } from '../../types';\nimport { Token } from '../token';\n\n/**\n * Get amounts from array of TokenAmounts returning default if not a value for tokens.\n * @param tokens\n * @param amounts\n * @param defaultAmount\n * @returns\n */\nexport function getAmounts(\n    tokens: Token[],\n    amounts: InputAmount[],\n    defaultAmount = 0n,\n): bigint[] {\n    return tokens.map(\n        (t) =>\n            amounts.find((a) => t.isSameAddress(a.address))?.rawAmount ??\n            defaultAmount,\n    );\n}\n","import {\n    Address,\n    createPublicClient,\n    formatEther,\n    formatUnits,\n    http,\n} from 'viem';\nimport { PoolType } from '@/types';\nimport { HumanAmount } from '@/data';\nimport { CHAINS, VAULT } from '@/utils';\nimport { PoolState, PoolStateWithBalances } from '../types';\nimport { getSortedTokens } from './getSortedTokens';\nimport { vaultV2Abi } from '@/abi';\n\nexport const getPoolStateWithBalancesV2 = async (\n    poolState: PoolState,\n    chainId: number,\n    rpcUrl: string,\n): Promise<PoolStateWithBalances> => {\n    const totalSupplyContract = getTotalSupplyContractV2(poolState);\n    const getBalanceContracts = {\n        address: VAULT[chainId],\n        abi: vaultV2Abi,\n        functionName: 'getPoolTokens' as const,\n        args: [poolState.id] as const,\n    };\n\n    const publicClient = createPublicClient({\n        transport: http(rpcUrl),\n        chain: CHAINS[chainId],\n    });\n    const outputs = await publicClient.multicall({\n        contracts: [totalSupplyContract, getBalanceContracts],\n    });\n\n    if (outputs.some((output) => output.status === 'failure')) {\n        console.log(\n            'Multicall error/s getting pool state with balances for v2 pool',\n            {\n                errors: outputs\n                    .filter((o) => o.status === 'failure')\n                    .map((o) => o.error),\n                chainId,\n                poolId: poolState.id,\n            },\n        );\n        throw new Error(\n            'Error: Unable to get pool state with balances for v2 pool.',\n        );\n    }\n\n    const totalShares = outputs[0].result as bigint;\n    const [_, balances] = outputs[1].result as [Address[], bigint[], bigint];\n\n    const sortedTokens = getSortedTokens(poolState.tokens, chainId);\n\n    const poolStateWithBalances: PoolStateWithBalances = {\n        ...poolState,\n        tokens: sortedTokens.map((token, i) => ({\n            address: token.address,\n            decimals: token.decimals,\n            index: i,\n            balance: formatUnits(balances[i], token.decimals) as HumanAmount,\n        })),\n        totalShares: formatEther(totalShares) as HumanAmount,\n    };\n    return poolStateWithBalances;\n};\n\n// Private\n\nconst getTotalSupplyContractV2 = (poolState: PoolState) => {\n    if (poolState.type === PoolType.ComposableStable) {\n        return {\n            address: poolState.address,\n            abi: [\n                {\n                    inputs: [],\n                    name: 'getActualSupply',\n                    outputs: [\n                        {\n                            internalType: 'uint256',\n                            name: '',\n                            type: 'uint256',\n                        },\n                    ],\n                    stateMutability: 'view',\n                    type: 'function',\n                },\n            ],\n            functionName: 'getActualSupply',\n        };\n    }\n\n    return {\n        address: poolState.address,\n        abi: [\n            {\n                inputs: [],\n                name: 'totalSupply',\n                outputs: [\n                    {\n                        internalType: 'uint256',\n                        name: '',\n                        type: 'uint256',\n                    },\n                ],\n                stateMutability: 'view',\n                type: 'function',\n            },\n        ],\n        functionName: 'totalSupply',\n    };\n};\n","import {\n    createPublicClient,\n    erc4626Abi,\n    formatEther,\n    formatUnits,\n    http,\n    PublicClient,\n} from 'viem';\n\nimport { HumanAmount } from '@/data';\nimport { CHAINS, VAULT_V3 } from '@/utils';\n\nimport { getSortedTokens } from './getSortedTokens';\nimport {\n    PoolState,\n    PoolStateWithBalances,\n    PoolStateWithUnderlyingBalances,\n    PoolStateWithUnderlyings,\n    PoolTokenWithUnderlying,\n} from '../types';\nimport { vaultExtensionAbi_V3 } from '@/abi';\nimport { TokenAmount } from '../tokenAmount';\n\nexport const getPoolStateWithBalancesV3 = async (\n    poolState: PoolState,\n    chainId: number,\n    rpcUrl: string,\n): Promise<PoolStateWithBalances> => {\n    const publicClient = createPublicClient({\n        transport: http(rpcUrl),\n        chain: CHAINS[chainId],\n    });\n\n    // get on-chain pool token balances and total shares\n    const { tokenAmounts, totalShares } = await getTokenAmountsAndTotalShares(\n        chainId,\n        poolState,\n        publicClient,\n    );\n\n    // build PoolStateWithBalances object with queried on-chain balances\n    const poolStateWithBalances: PoolStateWithBalances = {\n        ...poolState,\n        tokens: tokenAmounts.map((tokenAmount, i) => ({\n            address: tokenAmount.token.address,\n            decimals: tokenAmount.token.decimals,\n            index: i,\n            balance: formatUnits(\n                tokenAmount.amount,\n                tokenAmount.token.decimals,\n            ) as HumanAmount,\n        })),\n        totalShares: formatEther(totalShares) as HumanAmount,\n    };\n    return poolStateWithBalances;\n};\n\nexport const getBoostedPoolStateWithBalancesV3 = async (\n    poolState: PoolStateWithUnderlyings,\n    chainId: number,\n    rpcUrl: string,\n): Promise<PoolStateWithUnderlyingBalances> => {\n    const publicClient = createPublicClient({\n        transport: http(rpcUrl),\n        chain: CHAINS[chainId],\n    });\n\n    // get on-chain pool token balances and total shares\n    const { tokenAmounts, totalShares } = await getTokenAmountsAndTotalShares(\n        chainId,\n        poolState,\n        publicClient,\n    );\n\n    const sortedTokens = [...poolState.tokens].sort(\n        (a, b) => a.index - b.index,\n    );\n\n    // get on-chain balances for each respective underlying pool token (by querying erc4626 previewRedeem function)\n    const underlyingBalances = await getUnderlyingBalances(\n        sortedTokens,\n        tokenAmounts,\n        publicClient,\n    );\n\n    // build PoolStateWithUnderlyingBalances object with queried on-chain balances\n    const poolStateWithUnderlyingBalances: PoolStateWithUnderlyingBalances = {\n        ...poolState,\n        tokens: sortedTokens.map((token, i) => ({\n            ...token,\n            balance: formatUnits(\n                tokenAmounts[i].amount,\n                token.decimals,\n            ) as HumanAmount,\n            underlyingToken:\n                token.underlyingToken === null\n                    ? null\n                    : {\n                          ...token.underlyingToken,\n                          balance: formatUnits(\n                              underlyingBalances.shift() as bigint,\n                              token.underlyingToken.decimals,\n                          ) as HumanAmount,\n                      },\n        })),\n        totalShares: formatEther(totalShares) as HumanAmount,\n    };\n    return poolStateWithUnderlyingBalances;\n};\n\nconst getUnderlyingBalances = async (\n    sortedTokens: PoolTokenWithUnderlying[],\n    tokenAmounts: TokenAmount[],\n    publicClient: PublicClient,\n) => {\n    const underlyingTokens = sortedTokens\n        .map((token, index) => ({ token, index }))\n        .filter(({ token }) => token.underlyingToken !== null);\n\n    const getUnderlyingBalancesContracts = underlyingTokens.map(\n        ({ token, index }) => ({\n            address: token.address,\n            abi: erc4626Abi,\n            functionName: 'previewRedeem' as const,\n            args: [tokenAmounts[index].amount] as const,\n        }),\n    );\n\n    // execute multicall to get on-chain balances for each underlying token\n    const underlyingBalanceOutputs = await publicClient.multicall({\n        contracts: [...getUnderlyingBalancesContracts],\n    });\n\n    if (\n        underlyingBalanceOutputs.some((output) => output.status === 'failure')\n    ) {\n        // throw error if any of the underlying balance calls failed\n        throw new Error(\n            'Error: Unable to get underlying balances for v3 pool.',\n        );\n    }\n\n    // extract underlying balances from multicall outputs\n    const underlyingBalances = underlyingBalanceOutputs.map(\n        (output) => output.result as bigint,\n    );\n\n    return underlyingBalances;\n};\n\nconst getTokenAmountsAndTotalShares = async (\n    chainId: number,\n    poolState: PoolState,\n    publicClient: PublicClient,\n) => {\n    // create contract calls to get total supply and balances for each pool token\n    const totalSupplyContract = {\n        address: VAULT_V3[chainId],\n        abi: vaultExtensionAbi_V3,\n        functionName: 'totalSupply' as const,\n        args: [poolState.address] as const,\n    };\n    const getBalanceContracts = {\n        address: VAULT_V3[chainId],\n        abi: vaultExtensionAbi_V3,\n        functionName: 'getCurrentLiveBalances' as const,\n        args: [poolState.address] as const,\n    };\n\n    // execute multicall to get total supply and balances for each pool token\n    const outputs = await publicClient.multicall({\n        contracts: [totalSupplyContract, getBalanceContracts],\n    });\n\n    // throw error if any of the calls failed\n    if (outputs.some((output) => output.status === 'failure')) {\n        throw new Error(\n            'Error: Unable to get pool state with balances for v3 pool.',\n        );\n    }\n\n    // extract total supply and balances from multicall outputs\n    const totalShares = outputs[0].result as bigint;\n    const balancesScale18 = outputs[1].result as bigint[];\n    const poolTokens = getSortedTokens(poolState.tokens, chainId);\n    const tokenAmounts = poolTokens.map((token, i) =>\n        TokenAmount.fromScale18Amount(token, balancesScale18[i]),\n    );\n\n    return { tokenAmounts, totalShares };\n};\n","import { NATIVE_ASSETS } from '@/utils';\nimport { TokenAmount } from '../tokenAmount';\nimport { Slippage } from '../slippage';\n\nexport const getValue = (\n    amountsIn: TokenAmount[],\n    wethIsEth: boolean,\n    slippage?: Slippage,\n): bigint => {\n    let value = 0n;\n    if (wethIsEth) {\n        value =\n            amountsIn.find((a) =>\n                a.token.isUnderlyingEqual(NATIVE_ASSETS[a.token.chainId]),\n            )?.amount ?? 0n;\n    }\n    if (slippage) {\n        return slippage.applyTo(value);\n    }\n    return value;\n};\n","import { Token } from '../token';\nimport { NATIVE_ASSETS, ZERO_ADDRESS } from '../../utils';\n\nexport function replaceWrapped(tokens: Token[], chainId: number): Token[] {\n    return tokens.map((token) => {\n        if (token.isUnderlyingEqual(NATIVE_ASSETS[chainId])) {\n            return new Token(chainId, ZERO_ADDRESS, 18);\n        }\n        return token;\n    });\n}\n","import { Address, Hex } from '../../types';\nimport { Token } from '../token';\nimport { replaceWrapped } from './replaceWrapped';\n\nexport function parseAddLiquidityArgs({\n    wethIsEth,\n    chainId,\n    sortedTokens,\n    poolId,\n    sender,\n    recipient,\n    maxAmountsIn,\n    userData,\n    fromInternalBalance,\n}: {\n    chainId?: number;\n    wethIsEth?: boolean;\n    sortedTokens: Token[];\n    poolId: Hex;\n    sender: Address;\n    recipient: Address;\n    maxAmountsIn: readonly bigint[];\n    userData: Hex;\n    fromInternalBalance?: boolean;\n}) {\n    // replace wrapped token with native asset if needed\n    const tokensIn =\n        chainId && wethIsEth\n            ? replaceWrapped([...sortedTokens], chainId)\n            : [...sortedTokens];\n\n    const joinPoolRequest = {\n        assets: tokensIn.map((t) => t.address), // with BPT\n        maxAmountsIn, // with BPT\n        userData, // wihtout BPT\n        fromInternalBalance: !!fromInternalBalance,\n    };\n\n    return {\n        args: [poolId, sender, recipient, joinPoolRequest] as const,\n        tokensIn,\n    };\n}\n","import { Address } from 'viem';\nimport { Token } from '../token';\nimport { InitializeArgs } from '../initPool';\nimport { DEFAULT_USERDATA } from '@/utils';\n\nexport function parseInitializeArgs({\n    exactAmountsIn,\n    minBptAmountOut,\n    wethIsEth,\n    poolAddress,\n    sortedTokens,\n}: {\n    exactAmountsIn: bigint[];\n    minBptAmountOut: bigint;\n    wethIsEth?: boolean;\n    chainId: number;\n    poolAddress: Address;\n    sortedTokens: Token[];\n}): { args: InitializeArgs } {\n    return {\n        args: [\n            poolAddress,\n            sortedTokens.map(({ address }) => address),\n            exactAmountsIn,\n            minBptAmountOut,\n            wethIsEth ?? false,\n            DEFAULT_USERDATA,\n        ],\n    };\n}\n","import { Address, parseUnits } from 'viem';\nimport { InputAmount } from '@/types';\nimport { HumanAmount } from '@/data';\nimport { isSameAddress, MathSol } from '@/utils';\nimport { AddLiquidityProportionalInput } from '../addLiquidity/types';\nimport { PoolState, PoolStateWithUnderlyings } from '../types';\nimport { getPoolStateWithBalancesV2 } from './getPoolStateWithBalancesV2';\nimport {\n    getBoostedPoolStateWithBalancesV3,\n    getPoolStateWithBalancesV3,\n} from './getPoolStateWithBalancesV3';\nimport { AddLiquidityBoostedProportionalInput } from '../addLiquidityBoosted/types';\n\n/**\n * For a given pool and reference token amount, calculate all token amounts proportional to their balances within the pool.\n *\n * @param pool\n * @param referenceAmount\n * @returns Proportional amounts rounded down based on smart contract implementation for calculateProportionalAmountsOut.\n */\nexport function calculateProportionalAmounts(\n    pool: {\n        address: Address;\n        totalShares: HumanAmount;\n        tokens: { address: Address; balance: HumanAmount; decimals: number }[];\n    },\n    referenceAmount: InputAmount,\n): {\n    tokenAmounts: InputAmount[];\n    bptAmount: InputAmount;\n} {\n    // ensure that bpt is taken into account even with pools that do not contain its BPT as a token\n    const tokensWithoutBpt = pool.tokens.filter(\n        (t) => !pool.address.toLowerCase().includes(t.address.toLowerCase()),\n    );\n    const tokensWithBpt = [\n        ...tokensWithoutBpt,\n        {\n            address: pool.address,\n            balance: pool.totalShares,\n            decimals: 18,\n        },\n    ];\n\n    // validate that input amount is relative to a token in the pool or its BPT\n    const referenceTokenIndex = tokensWithBpt.findIndex(\n        (t) =>\n            t.address.toLowerCase() === referenceAmount.address.toLowerCase(),\n    );\n    if (referenceTokenIndex === -1) {\n        throw new Error(\n            'Reference amount must be relative to a token in the pool or its BPT',\n        );\n    }\n\n    // scale up balances from HumanAmount to RawAmount\n    const balances = tokensWithBpt.map((t) =>\n        parseUnits(t.balance, t.decimals),\n    );\n\n    // calculate proportional amounts\n    const referenceTokenBalance = balances[referenceTokenIndex];\n    const ratio = MathSol.divDownFixed(\n        referenceAmount.rawAmount,\n        referenceTokenBalance,\n    );\n    const proportionalAmounts = balances.map((b) =>\n        MathSol.mulDownFixed(b, ratio),\n    );\n\n    const amounts = tokensWithBpt.map(({ address, decimals }, index) => ({\n        address,\n        decimals,\n        rawAmount: proportionalAmounts[index],\n    }));\n\n    const bptAmount = amounts.pop() as InputAmount;\n\n    return {\n        tokenAmounts: amounts,\n        bptAmount,\n    };\n}\n\n/**\n * Calculate the BPT amount for a given reference amount in a pool (rounded down).\n *\n * Note: this is used in the AddLiquidityProportional query scenario, where a non-bpt refenceAmount is provided and\n * the SDK needs to infer the corresponding bptOut. Rounding down favors leaving some dust behind instead of returning an amount\n * slightly higher than the referenceAmount provided, in order to prevent a revert in the add liquidity proportional transaction.\n * @param input\n * @param poolState\n * @returns\n */\nexport const getBptAmountFromReferenceAmount = async (\n    input: AddLiquidityProportionalInput,\n    poolState: PoolState,\n): Promise<InputAmount> => {\n    let bptAmount: InputAmount;\n    if (input.referenceAmount.address === poolState.address) {\n        bptAmount = input.referenceAmount;\n    } else {\n        switch (poolState.protocolVersion) {\n            case 1:\n                throw new Error('CowAmm pools should use CowAmm helpers');\n            case 2: {\n                const poolStateWithBalances = await getPoolStateWithBalancesV2(\n                    poolState,\n                    input.chainId,\n                    input.rpcUrl,\n                );\n                ({ bptAmount } = calculateProportionalAmounts(\n                    poolStateWithBalances,\n                    input.referenceAmount,\n                ));\n                break;\n            }\n            case 3: {\n                const poolStateWithBalances = await getPoolStateWithBalancesV3(\n                    poolState,\n                    input.chainId,\n                    input.rpcUrl,\n                );\n                ({ bptAmount } = calculateProportionalAmounts(\n                    poolStateWithBalances,\n                    input.referenceAmount,\n                ));\n                break;\n            }\n        }\n    }\n    return bptAmount;\n};\n\n/**\n * Calculate the BPT amount for a given reference amount in a boosted pool (rounded down).\n *\n * @param input\n * @param poolState\n * @returns\n */\nexport const getBptAmountFromReferenceAmountBoosted = async (\n    input: AddLiquidityBoostedProportionalInput,\n    poolStateWithUnderlyings: PoolStateWithUnderlyings,\n): Promise<InputAmount> => {\n    let bptAmount: InputAmount;\n    if (\n        isSameAddress(\n            input.referenceAmount.address,\n            poolStateWithUnderlyings.address,\n        )\n    ) {\n        bptAmount = input.referenceAmount;\n    } else {\n        const poolStateWithUnderlyingBalances =\n            await getBoostedPoolStateWithBalancesV3(\n                poolStateWithUnderlyings,\n                input.chainId,\n                input.rpcUrl,\n            );\n\n        // use underlying tokens as tokens if they exist (in case of a partial boosted pool)\n        const poolStateWithBalances = {\n            ...poolStateWithUnderlyingBalances,\n            tokens: poolStateWithUnderlyingBalances.tokens.map(\n                (t) => t.underlyingToken ?? t,\n            ),\n        };\n\n        ({ bptAmount } = calculateProportionalAmounts(\n            poolStateWithBalances,\n            input.referenceAmount,\n        ));\n    }\n    return bptAmount;\n};\n","import { Address } from 'viem';\nimport { isSameAddress } from '@/utils';\nimport { PoolTokenWithUnderlying } from '../types';\nimport { MinimalToken } from '@/data';\n\nfunction isPoolTokenWithUnderlying(\n    token: PoolTokenWithUnderlying | MinimalToken,\n): token is PoolTokenWithUnderlying {\n    return 'underlyingToken' in token;\n}\n\n/**\n * Check if token is either a pool token or underlying pool token.\n * @param tokens\n * @param token\n * @returns\n */\nexport function isPoolToken(\n    tokens: PoolTokenWithUnderlying[] | MinimalToken[],\n    token: Address,\n): { isPoolToken: boolean; isUnderlyingToken: boolean } {\n    let isPoolToken = false;\n    let isUnderlyingToken = false;\n\n    tokens.some((t) => {\n        const isToken = isSameAddress(t.address, token);\n        const isUnderlying =\n            isPoolTokenWithUnderlying(t) &&\n            t.underlyingToken?.address &&\n            isSameAddress(t.underlyingToken.address, token);\n\n        if (isToken || isUnderlying) {\n            isPoolToken = true;\n            isUnderlyingToken = !!isUnderlying;\n            return true;\n        }\n\n        return false;\n    });\n\n    return { isPoolToken, isUnderlyingToken };\n}\n","import { NestedPoolState } from '../types';\nimport { isPoolToken } from './isPoolToken';\n\nexport function validateNestedPoolState(\n    nestedPoolState: NestedPoolState,\n): boolean {\n    /*\n    General rules:\n      * Can only add/remove liquidity with the main tokens\n      * Main tokens only supported to a max of 1 level of nesting\n      * Can still pure add liquidity with > 1 level \n      * A main token can't be a token in > 1 pool\n\n    We can only do minimal validation without introducing complexity/data overhead that the API should be handling. \n    e.g. We can't validate pool state without constructing it which would require more complexity and data.\n    So we assume pool state is correct. \n    */\n    // pools may not be in order so find highest level which will be top pool\n    const topLevel = Math.max(...nestedPoolState.pools.map((p) => p.level));\n\n    nestedPoolState.mainTokens.forEach((t) => {\n        // Can join with main token or underlying token\n        const poolsWithToken = nestedPoolState.pools.filter((p) => {\n            const poolToken = isPoolToken(p.tokens, t.address);\n            return poolToken.isPoolToken;\n        });\n\n        if (poolsWithToken.length < 1)\n            throw new Error(\n                'NestedPoolState, main token must exist as a token of a pool',\n            );\n\n        if (poolsWithToken.length > 1)\n            throw new Error(\n                `NestedPoolState, main token can't be token of more than 1 pool`,\n            );\n\n        if (poolsWithToken[0]) {\n            if (topLevel - poolsWithToken[0].level > 1)\n                throw new Error(\n                    'NestedPoolState, main token only supported to a max of 1 level of nesting',\n                );\n        }\n    });\n    return true;\n}\n","import { vaultV2Abi } from '@/abi';\nimport {\n    AddLiquidityBase,\n    AddLiquidityBuildCallOutput,\n    AddLiquidityInput,\n} from '@/entities/addLiquidity/types';\nimport { ComposableStableEncoder } from '@/entities/encoders/composableStable';\nimport { Token } from '@/entities/token';\nimport { TokenAmount } from '@/entities/tokenAmount';\nimport { PoolState } from '@/entities/types';\nimport {\n    doAddLiquidityQuery,\n    getSortedTokens,\n    parseAddLiquidityArgs,\n} from '@/entities/utils';\nimport {\n    VAULT,\n    ZERO_ADDRESS,\n    buildCallWithPermit2ProtocolVersionError,\n} from '@/utils';\nimport { encodeFunctionData } from 'viem';\n\nimport { getValue } from '../../../utils/getValue';\nimport { getAmountsCall, getAmountsQuery } from '../../helpers';\nimport {\n    AddLiquidityV2ComposableStableBuildCallInput,\n    AddLiquidityV2ComposableStableQueryOutput,\n} from './types';\n\nexport class AddLiquidityComposableStable implements AddLiquidityBase {\n    public async query(\n        input: AddLiquidityInput,\n        poolState: PoolState,\n    ): Promise<AddLiquidityV2ComposableStableQueryOutput> {\n        const sortedTokens = getSortedTokens(poolState.tokens, input.chainId);\n        const bptIndex = sortedTokens.findIndex(\n            (t) => t.address === poolState.address,\n        );\n\n        const amounts = await getAmountsQuery(input, poolState, bptIndex);\n\n        const userData = ComposableStableEncoder.encodeAddLiquidityUserData(\n            input.kind,\n            amounts,\n        );\n\n        const { args, tokensIn } = parseAddLiquidityArgs({\n            chainId: input.chainId,\n            sortedTokens,\n            poolId: poolState.id,\n            sender: ZERO_ADDRESS,\n            recipient: ZERO_ADDRESS,\n            maxAmountsIn: amounts.maxAmountsIn,\n            userData,\n            fromInternalBalance: false, // This isn't required for the query\n        });\n\n        const queryOutput = await doAddLiquidityQuery(\n            input.rpcUrl,\n            input.chainId,\n            args,\n        );\n\n        const bpt = new Token(input.chainId, poolState.address, 18);\n        const bptOut = TokenAmount.fromRawAmount(bpt, queryOutput.bptOut);\n\n        const amountsIn = queryOutput.amountsIn.map((a, i) =>\n            TokenAmount.fromRawAmount(tokensIn[i], a),\n        );\n\n        return {\n            to: VAULT[input.chainId],\n            poolType: poolState.type,\n            addLiquidityKind: input.kind,\n            poolId: poolState.id,\n            bptOut,\n            amountsIn,\n            tokenInIndex: amounts.tokenInIndex,\n            chainId: input.chainId,\n            protocolVersion: 2,\n            bptIndex,\n        };\n    }\n\n    public buildCall(\n        input: AddLiquidityV2ComposableStableBuildCallInput,\n    ): AddLiquidityBuildCallOutput {\n        const amounts = getAmountsCall(input, input.bptIndex);\n\n        const userData = ComposableStableEncoder.encodeAddLiquidityUserData(\n            input.addLiquidityKind,\n            amounts,\n        );\n\n        const { args } = parseAddLiquidityArgs({\n            ...input,\n            sortedTokens: input.amountsIn.map((a) => a.token),\n            maxAmountsIn: amounts.maxAmountsIn,\n            userData,\n            fromInternalBalance: !!input.fromInternalBalance,\n            wethIsEth: !!input.wethIsEth,\n        });\n\n        const callData = encodeFunctionData({\n            abi: vaultV2Abi,\n            functionName: 'joinPool',\n            args,\n        });\n\n        return {\n            callData,\n            args,\n            to: VAULT[input.chainId],\n            value: getValue(input.amountsIn, !!input.wethIsEth, input.slippage),\n            minBptOut: TokenAmount.fromRawAmount(\n                input.bptOut.token,\n                amounts.minimumBpt,\n            ),\n            maxAmountsIn: input.amountsIn.map((a, i) =>\n                TokenAmount.fromRawAmount(a.token, amounts.maxAmountsIn[i]),\n            ),\n        };\n    }\n\n    public buildCallWithPermit2(): AddLiquidityBuildCallOutput {\n        throw buildCallWithPermit2ProtocolVersionError;\n    }\n}\n","import { MAX_UINT256, removeIndex } from '@/utils';\nimport { AddLiquidityAmounts, PoolState } from '../types';\nimport {\n    getAmounts,\n    getBptAmountFromReferenceAmount,\n    getSortedTokens,\n} from '../utils';\nimport {\n    AddLiquidityBaseBuildCallInput,\n    AddLiquidityInput,\n    AddLiquidityKind,\n} from './types';\n\nexport const getAmountsQuery = async (\n    input: AddLiquidityInput,\n    poolState: PoolState,\n    bptIndex = -1,\n): Promise<AddLiquidityAmounts> => {\n    const poolTokens = getSortedTokens(poolState.tokens, input.chainId);\n    switch (input.kind) {\n        case AddLiquidityKind.Unbalanced: {\n            const maxAmountsIn = getAmounts(poolTokens, input.amountsIn);\n            return {\n                minimumBpt: 0n,\n                maxAmountsIn,\n                tokenInIndex: undefined,\n                maxAmountsInWithoutBpt: removeIndex(maxAmountsIn, bptIndex),\n            };\n        }\n        case AddLiquidityKind.SingleToken: {\n            const tokenInIndex = poolTokens\n                .filter((_, index) => index !== bptIndex) // Need to remove Bpt\n                .findIndex((t) => t.isSameAddress(input.tokenIn));\n            if (tokenInIndex === -1)\n                throw Error(\"Can't find index of SingleToken\");\n            const maxAmountsIn = Array(poolTokens.length).fill(0n);\n            maxAmountsIn[tokenInIndex] = MAX_UINT256;\n            return {\n                minimumBpt: input.bptOut.rawAmount,\n                maxAmountsIn,\n                tokenInIndex,\n                maxAmountsInWithoutBpt: removeIndex(maxAmountsIn, bptIndex),\n            };\n        }\n        case AddLiquidityKind.Proportional: {\n            const maxAmountsIn = Array(poolTokens.length).fill(MAX_UINT256);\n            const bptAmount = await getBptAmountFromReferenceAmount(\n                input,\n                poolState,\n            );\n            return {\n                minimumBpt: bptAmount.rawAmount,\n                maxAmountsIn,\n                tokenInIndex: undefined,\n                maxAmountsInWithoutBpt: removeIndex(maxAmountsIn, bptIndex),\n            };\n        }\n    }\n};\n\nexport const getAmountsCall = (\n    input: AddLiquidityBaseBuildCallInput,\n    bptIndex = -1,\n): AddLiquidityAmounts => {\n    switch (input.addLiquidityKind) {\n        case AddLiquidityKind.Unbalanced: {\n            const minimumBpt = input.slippage.applyTo(input.bptOut.amount, -1);\n            const maxAmountsIn = input.amountsIn.map((a) => a.amount);\n            return {\n                minimumBpt,\n                maxAmountsIn,\n                tokenInIndex: input.tokenInIndex,\n                maxAmountsInWithoutBpt: removeIndex(maxAmountsIn, bptIndex),\n            };\n        }\n        case AddLiquidityKind.SingleToken:\n        case AddLiquidityKind.Proportional: {\n            const maxAmountsIn = input.amountsIn.map((a) =>\n                input.slippage.applyTo(a.amount),\n            );\n            return {\n                minimumBpt: input.bptOut.amount,\n                maxAmountsIn,\n                tokenInIndex: input.tokenInIndex,\n                maxAmountsInWithoutBpt: removeIndex(maxAmountsIn, bptIndex),\n            };\n        }\n    }\n};\n","import { encodeAbiParameters } from 'viem';\nimport { Hex } from '../../types';\nimport { AddLiquidityKind } from '../addLiquidity/types';\nimport {\n    AddLiquidityAmounts,\n    InitPoolAmounts,\n    RemoveLiquidityAmounts,\n} from '../types';\nimport { RemoveLiquidityKind } from '../removeLiquidity/types';\nimport {\n    addLiquiditySingleTokenShouldHaveTokenInIndexError,\n    removeLiquiditySingleTokenExactInShouldHaveTokenOutIndexError,\n} from '@/utils/errors';\nimport { encodeRemoveLiquidityRecovery } from './base';\n\nexport enum StablePoolJoinKind {\n    INIT = 0,\n    EXACT_TOKENS_IN_FOR_BPT_OUT = 1,\n    TOKEN_IN_FOR_EXACT_BPT_OUT = 2,\n}\n\nexport enum StablePoolExitKind {\n    EXACT_BPT_IN_FOR_ONE_TOKEN_OUT = 0,\n    EXACT_BPT_IN_FOR_TOKENS_OUT = 1,\n    BPT_IN_FOR_EXACT_TOKENS_OUT = 2,\n}\n\nexport class StableEncoder {\n    /**\n     * Cannot be constructed.\n     */\n    private constructor() {\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n    }\n\n    /**\n     * Encodes the User Data for initializing a StablePool\n     * @param amounts Amounts of tokens to be added to the pool\n     * @returns\n     */\n    static encodeInitPoolUserData(amounts: InitPoolAmounts) {\n        return StableEncoder.initPool(amounts.maxAmountsIn);\n    }\n\n    /**\n     * Encodes the User Data for adding liquidity to a StablePool\n     * @param kind Kind of the Add Liquidity operation: Init, Unbalanced, SingleToken, Proportional\n     * @param amounts Amounts of tokens to be added to the pool\n     * @returns\n     */\n    static encodeAddLiquidityUserData = (\n        kind: AddLiquidityKind,\n        amounts: AddLiquidityAmounts,\n    ): Hex => {\n        switch (kind) {\n            case AddLiquidityKind.Unbalanced:\n                return StableEncoder.addLiquidityUnbalanced(\n                    amounts.maxAmountsIn,\n                    amounts.minimumBpt,\n                );\n            case AddLiquidityKind.SingleToken: {\n                // just a sanity check as this is already checked in InputValidator\n                if (amounts.tokenInIndex === undefined) {\n                    throw addLiquiditySingleTokenShouldHaveTokenInIndexError;\n                }\n                return StableEncoder.addLiquiditySingleToken(\n                    amounts.minimumBpt,\n                    amounts.tokenInIndex,\n                );\n            }\n            default:\n                throw new Error(`AddLiquidityKind not supported: ${kind}`);\n        }\n    };\n\n    /**\n     * Encodes the User Data for removing liquidity from a StablePool\n     * @param kind Kind of the Remove Liquidity operation: Unbalanced, SingleToken, Proportional\n     * @param amounts Amounts of tokens to be removed from the pool\n     * @returns\n     */\n    static encodeRemoveLiquidityUserData = (\n        kind: RemoveLiquidityKind,\n        amounts: RemoveLiquidityAmounts,\n    ): Hex => {\n        switch (kind) {\n            case RemoveLiquidityKind.Unbalanced:\n            case RemoveLiquidityKind.SingleTokenExactOut:\n                return StableEncoder.removeLiquidityUnbalanced(\n                    amounts.minAmountsOut,\n                    amounts.maxBptAmountIn,\n                );\n            case RemoveLiquidityKind.SingleTokenExactIn:\n                if (amounts.tokenOutIndex === undefined)\n                    throw removeLiquiditySingleTokenExactInShouldHaveTokenOutIndexError;\n\n                return StableEncoder.removeLiquiditySingleTokenExactIn(\n                    amounts.maxBptAmountIn,\n                    amounts.tokenOutIndex,\n                );\n            case RemoveLiquidityKind.Proportional:\n                return StableEncoder.removeLiquidityProportional(\n                    amounts.maxBptAmountIn,\n                );\n            case RemoveLiquidityKind.Recovery:\n                return encodeRemoveLiquidityRecovery(amounts.maxBptAmountIn);\n        }\n    };\n\n    /**\n     * Encodes the userData parameter for providing the initial liquidity to a StablePool\n     * @param initialBalances - the amounts of tokens to send to the pool to form the initial balances\n     */\n    static initPool = (amountsIn: bigint[]): Hex =>\n        encodeAbiParameters(\n            [{ type: 'uint256' }, { type: 'uint256[]' }],\n            [BigInt(StablePoolJoinKind.INIT), amountsIn],\n        );\n\n    /**\n     * Encodes the userData parameter for adding liquidity to a StablePool with exact token inputs\n     * @param amountsIn - the amounts each of token to deposit in the pool as liquidity\n     * @param minimumBPT - the minimum acceptable BPT to receive in return for deposited tokens\n     */\n    static addLiquidityUnbalanced = (\n        amountsIn: bigint[],\n        minimumBPT: bigint,\n    ): Hex =>\n        encodeAbiParameters(\n            [{ type: 'uint256' }, { type: 'uint256[]' }, { type: 'uint256' }],\n            [\n                BigInt(StablePoolJoinKind.EXACT_TOKENS_IN_FOR_BPT_OUT),\n                amountsIn,\n                minimumBPT,\n            ],\n        );\n\n    /**\n     * Encodes the userData parameter for adding liquidity to a StablePool with a single token to receive an exact amount of BPT\n     * @param bptAmountOut - the amount of BPT to be minted\n     * @param tokenIndex - the index of the token to be provided as liquidity\n     */\n    static addLiquiditySingleToken = (\n        bptAmountOut: bigint,\n        tokenIndex: number,\n    ): Hex => {\n        // if tokenIndex is provided, it's assumed to be an allTokensIn\n        return encodeAbiParameters(\n            [{ type: 'uint256' }, { type: 'uint256' }, { type: 'uint256' }],\n            [\n                BigInt(StablePoolJoinKind.TOKEN_IN_FOR_EXACT_BPT_OUT),\n                bptAmountOut,\n                BigInt(tokenIndex),\n            ],\n        );\n    };\n\n    /**\n     * Encodes the userData parameter for removing liquidity from a StablePool by removing tokens in return for an exact amount of BPT\n     * @param bptAmountIn - the amount of BPT to be burned\n     * @param tokenIndex - the index of the token to removed from the pool\n     */\n    static removeLiquiditySingleTokenExactIn = (\n        bptAmountIn: bigint,\n        tokenIndex: number,\n    ): Hex => {\n        return encodeAbiParameters(\n            [{ type: 'uint256' }, { type: 'uint256' }, { type: 'uint256' }],\n            [\n                BigInt(StablePoolExitKind.EXACT_BPT_IN_FOR_ONE_TOKEN_OUT),\n                bptAmountIn,\n                BigInt(tokenIndex),\n            ],\n        );\n    };\n\n    /**\n     * Encodes the userData parameter for removing liquidity from a StablePool by removing tokens in return for an exact amount of BPT\n     * @param bptAmountIn - the amount of BPT to be burned\n     */\n    static removeLiquidityProportional = (bptAmountIn: bigint): Hex => {\n        return encodeAbiParameters(\n            [{ type: 'uint256' }, { type: 'uint256' }],\n            [\n                BigInt(StablePoolExitKind.EXACT_BPT_IN_FOR_TOKENS_OUT),\n                bptAmountIn,\n            ],\n        );\n    };\n\n    /**\n     * Encodes the userData parameter for removing liquidity from a StablePool by removing exact amounts of tokens\n     * @param amountsOut - the amounts of each token to be withdrawn from the pool\n     * @param maxBPTAmountIn - the minimum acceptable BPT to burn in return for withdrawn tokens\n     */\n    static removeLiquidityUnbalanced = (\n        amountsOut: bigint[],\n        maxBPTAmountIn: bigint,\n    ): Hex =>\n        encodeAbiParameters(\n            [{ type: 'uint256' }, { type: 'uint256[]' }, { type: 'uint256' }],\n            [\n                BigInt(StablePoolExitKind.BPT_IN_FOR_EXACT_TOKENS_OUT),\n                amountsOut,\n                maxBPTAmountIn,\n            ],\n        );\n}\n","import { vaultV2Abi } from '@/abi';\nimport {\n    AddLiquidityBase,\n    AddLiquidityBaseQueryOutput,\n    AddLiquidityBuildCallOutput,\n    AddLiquidityInput,\n} from '@/entities/addLiquidity/types';\nimport { StableEncoder } from '@/entities/encoders/stable';\nimport { Token } from '@/entities/token';\nimport { TokenAmount } from '@/entities/tokenAmount';\nimport { PoolState } from '@/entities/types';\nimport {\n    doAddLiquidityQuery,\n    getSortedTokens,\n    parseAddLiquidityArgs,\n} from '@/entities/utils';\nimport { getValue } from '@/entities/utils/getValue';\nimport {\n    VAULT,\n    ZERO_ADDRESS,\n    buildCallWithPermit2ProtocolVersionError,\n} from '@/utils';\nimport { encodeFunctionData } from 'viem';\n\nimport { getAmountsCall, getAmountsQuery } from '../../helpers';\nimport { AddLiquidityV2BaseBuildCallInput } from '../types';\n\nexport class AddLiquidityStable implements AddLiquidityBase {\n    public async query(\n        input: AddLiquidityInput,\n        poolState: PoolState,\n    ): Promise<AddLiquidityBaseQueryOutput> {\n        const sortedTokens = getSortedTokens(poolState.tokens, input.chainId);\n        const amounts = await getAmountsQuery(input, poolState);\n\n        const userData = StableEncoder.encodeAddLiquidityUserData(\n            input.kind,\n            amounts,\n        );\n\n        const { args, tokensIn } = parseAddLiquidityArgs({\n            chainId: input.chainId,\n            sortedTokens,\n            poolId: poolState.id,\n            sender: ZERO_ADDRESS,\n            recipient: ZERO_ADDRESS,\n            maxAmountsIn: amounts.maxAmountsIn,\n            userData,\n        });\n\n        const queryOutput = await doAddLiquidityQuery(\n            input.rpcUrl,\n            input.chainId,\n            args,\n        );\n\n        const bpt = new Token(input.chainId, poolState.address, 18);\n        const bptOut = TokenAmount.fromRawAmount(bpt, queryOutput.bptOut);\n\n        const amountsIn = queryOutput.amountsIn.map((a, i) =>\n            TokenAmount.fromRawAmount(tokensIn[i], a),\n        );\n\n        return {\n            to: VAULT[input.chainId],\n            poolType: poolState.type,\n            addLiquidityKind: input.kind,\n            poolId: poolState.id,\n            bptOut,\n            amountsIn,\n            chainId: input.chainId,\n            tokenInIndex: amounts.tokenInIndex,\n            protocolVersion: poolState.protocolVersion,\n        };\n    }\n\n    public buildCall(\n        input: AddLiquidityV2BaseBuildCallInput,\n    ): AddLiquidityBuildCallOutput {\n        const amounts = getAmountsCall(input);\n\n        const userData = StableEncoder.encodeAddLiquidityUserData(\n            input.addLiquidityKind,\n            amounts,\n        );\n\n        const { args } = parseAddLiquidityArgs({\n            ...input,\n            sortedTokens: input.amountsIn.map((a) => a.token),\n            maxAmountsIn: amounts.maxAmountsIn,\n            userData,\n            fromInternalBalance: input.fromInternalBalance,\n            wethIsEth: !!input.wethIsEth,\n        });\n\n        const callData = encodeFunctionData({\n            abi: vaultV2Abi,\n            functionName: 'joinPool',\n            args,\n        });\n\n        return {\n            callData,\n            args,\n            to: VAULT[input.chainId],\n            value: getValue(input.amountsIn, !!input.wethIsEth, input.slippage),\n            minBptOut: TokenAmount.fromRawAmount(\n                input.bptOut.token,\n                amounts.minimumBpt,\n            ),\n            maxAmountsIn: input.amountsIn.map((a, i) =>\n                TokenAmount.fromRawAmount(a.token, amounts.maxAmountsIn[i]),\n            ),\n        };\n    }\n\n    public buildCallWithPermit2(): AddLiquidityBuildCallOutput {\n        throw buildCallWithPermit2ProtocolVersionError;\n    }\n}\n","import { encodeFunctionData } from 'viem';\nimport { Token } from '@/entities/token';\nimport { TokenAmount } from '@/entities/tokenAmount';\nimport { WeightedEncoder } from '@/entities/encoders/weighted';\nimport {\n    buildCallWithPermit2ProtocolVersionError,\n    VAULT,\n    ZERO_ADDRESS,\n} from '@/utils';\nimport { vaultV2Abi } from '@/abi';\nimport {\n    AddLiquidityBase,\n    AddLiquidityBuildCallOutput,\n    AddLiquidityInput,\n} from '@/entities/addLiquidity/types';\nimport { PoolState } from '@/entities/types';\nimport {\n    doAddLiquidityQuery,\n    getSortedTokens,\n    parseAddLiquidityArgs,\n} from '@/entities/utils';\nimport { getAmountsCall, getAmountsQuery } from '../../helpers';\nimport { getValue } from '../../../utils/getValue';\nimport {\n    AddLiquidityV2BaseBuildCallInput,\n    AddLiquidityV2BaseQueryOutput,\n} from '../types';\n\nexport class AddLiquidityWeighted implements AddLiquidityBase {\n    public async query(\n        input: AddLiquidityInput,\n        poolState: PoolState,\n    ): Promise<AddLiquidityV2BaseQueryOutput> {\n        const sortedTokens = getSortedTokens(poolState.tokens, input.chainId);\n        const amounts = await getAmountsQuery(input, poolState);\n\n        const userData = WeightedEncoder.encodeAddLiquidityUserData(\n            input.kind,\n            amounts,\n        );\n\n        const { args, tokensIn } = parseAddLiquidityArgs({\n            chainId: input.chainId,\n            sortedTokens,\n            poolId: poolState.id,\n            sender: ZERO_ADDRESS,\n            recipient: ZERO_ADDRESS,\n            maxAmountsIn: amounts.maxAmountsIn,\n            userData,\n        });\n\n        const queryOutput = await doAddLiquidityQuery(\n            input.rpcUrl,\n            input.chainId,\n            args,\n        );\n\n        const bpt = new Token(input.chainId, poolState.address, 18);\n        const bptOut = TokenAmount.fromRawAmount(bpt, queryOutput.bptOut);\n\n        const amountsIn = queryOutput.amountsIn.map((a, i) =>\n            TokenAmount.fromRawAmount(tokensIn[i], a),\n        );\n\n        return {\n            to: VAULT[input.chainId],\n            poolType: poolState.type,\n            addLiquidityKind: input.kind,\n            poolId: poolState.id,\n            bptOut,\n            amountsIn,\n            chainId: input.chainId,\n            tokenInIndex: amounts.tokenInIndex,\n            protocolVersion: 2,\n        };\n    }\n\n    public buildCall(\n        input: AddLiquidityV2BaseBuildCallInput,\n    ): AddLiquidityBuildCallOutput {\n        const amounts = getAmountsCall(input);\n\n        const userData = WeightedEncoder.encodeAddLiquidityUserData(\n            input.addLiquidityKind,\n            amounts,\n        );\n\n        const { args } = parseAddLiquidityArgs({\n            ...input,\n            sortedTokens: input.amountsIn.map((a) => a.token),\n            maxAmountsIn: amounts.maxAmountsIn,\n            userData,\n            fromInternalBalance: !!input.fromInternalBalance,\n            wethIsEth: !!input.wethIsEth,\n        });\n\n        const callData = encodeFunctionData({\n            abi: vaultV2Abi,\n            functionName: 'joinPool',\n            args,\n        });\n\n        return {\n            callData,\n            args,\n            to: VAULT[input.chainId],\n            value: getValue(input.amountsIn, !!input.wethIsEth, input.slippage),\n            minBptOut: TokenAmount.fromRawAmount(\n                input.bptOut.token,\n                amounts.minimumBpt,\n            ),\n            maxAmountsIn: input.amountsIn.map((a, i) =>\n                TokenAmount.fromRawAmount(a.token, amounts.maxAmountsIn[i]),\n            ),\n        };\n    }\n\n    public buildCallWithPermit2(): AddLiquidityBuildCallOutput {\n        throw buildCallWithPermit2ProtocolVersionError;\n    }\n}\n","import { encodeAbiParameters } from 'viem';\nimport { Hex } from '../../types';\nimport { AddLiquidityKind } from '../addLiquidity/types';\nimport {\n    AddLiquidityAmounts,\n    InitPoolAmounts,\n    RemoveLiquidityAmounts,\n} from '../types';\nimport { RemoveLiquidityKind } from '../removeLiquidity/types';\nimport {\n    addLiquiditySingleTokenShouldHaveTokenInIndexError,\n    removeLiquiditySingleTokenExactInShouldHaveTokenOutIndexError,\n} from '@/utils/errors';\nimport { encodeRemoveLiquidityRecovery } from './base';\n\nexport enum WeightedPoolJoinKind {\n    INIT = 0,\n    EXACT_TOKENS_IN_FOR_BPT_OUT = 1,\n    TOKEN_IN_FOR_EXACT_BPT_OUT = 2,\n    ALL_TOKENS_IN_FOR_EXACT_BPT_OUT = 3,\n}\n\nexport enum WeightedPoolExitKind {\n    EXACT_BPT_IN_FOR_ONE_TOKEN_OUT = 0,\n    EXACT_BPT_IN_FOR_TOKENS_OUT = 1,\n    BPT_IN_FOR_EXACT_TOKENS_OUT = 2,\n    MANAGEMENT_FEE_TOKENS_OUT = 3,\n}\n\nexport class WeightedEncoder {\n    /**\n     * Cannot be constructed.\n     */\n    private constructor() {\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n    }\n\n    /**\n     * Encodes the User Data for initializing a WeightedPool\n     * @param amounts Amounts of tokens to be added to the pool\n     * @returns\n     */\n    static encodeInitPoolUserData(amounts: InitPoolAmounts) {\n        return WeightedEncoder.initPool(amounts.maxAmountsIn);\n    }\n\n    /**\n     * Encodes the User Data for adding liquidity to a WeightedPool\n     * @param kind Kind of the Add Liquidity operation: Init, Unbalanced, SingleToken, Proportional\n     * @param amounts Amounts of tokens to be added to the pool\n     * @returns\n     */\n    static encodeAddLiquidityUserData = (\n        kind: AddLiquidityKind,\n        amounts: AddLiquidityAmounts,\n    ): Hex => {\n        switch (kind) {\n            case AddLiquidityKind.Unbalanced:\n                return WeightedEncoder.addLiquidityUnbalanced(\n                    amounts.maxAmountsIn,\n                    amounts.minimumBpt,\n                );\n            case AddLiquidityKind.SingleToken: {\n                // just a sanity check as this is already checked in InputValidator\n                if (amounts.tokenInIndex === undefined) {\n                    throw addLiquiditySingleTokenShouldHaveTokenInIndexError;\n                }\n                return WeightedEncoder.addLiquiditySingleToken(\n                    amounts.minimumBpt,\n                    amounts.tokenInIndex,\n                );\n            }\n            case AddLiquidityKind.Proportional: {\n                return WeightedEncoder.addLiquidityProportional(\n                    amounts.minimumBpt,\n                );\n            }\n        }\n    };\n\n    /**\n     * Encodes the User Data for removing liquidity from a WeightedPool\n     * @param kind Kind of the Remove Liquidity operation: Unbalanced, SingleToken, Proportional\n     * @param amounts Amounts of tokens to be removed from the pool\n     * @returns\n     */\n    static encodeRemoveLiquidityUserData = (\n        kind: RemoveLiquidityKind,\n        amounts: RemoveLiquidityAmounts,\n    ): Hex => {\n        switch (kind) {\n            case RemoveLiquidityKind.Unbalanced:\n            case RemoveLiquidityKind.SingleTokenExactOut:\n                return WeightedEncoder.removeLiquidityUnbalanced(\n                    amounts.minAmountsOut,\n                    amounts.maxBptAmountIn,\n                );\n            case RemoveLiquidityKind.SingleTokenExactIn:\n                if (amounts.tokenOutIndex === undefined)\n                    throw removeLiquiditySingleTokenExactInShouldHaveTokenOutIndexError;\n\n                return WeightedEncoder.removeLiquiditySingleTokenExactIn(\n                    amounts.maxBptAmountIn,\n                    amounts.tokenOutIndex,\n                );\n            case RemoveLiquidityKind.Proportional:\n                return WeightedEncoder.removeLiquidityProportional(\n                    amounts.maxBptAmountIn,\n                );\n            case RemoveLiquidityKind.Recovery:\n                return encodeRemoveLiquidityRecovery(amounts.maxBptAmountIn);\n        }\n    };\n\n    /**\n     * Encodes the userData parameter for providing the initial liquidity to a WeightedPool\n     * @param initialBalances - the amounts of tokens to send to the pool to form the initial balances\n     */\n    static initPool = (amountsIn: bigint[]): Hex =>\n        encodeAbiParameters(\n            [{ type: 'uint256' }, { type: 'uint256[]' }],\n            [BigInt(WeightedPoolJoinKind.INIT), amountsIn],\n        );\n\n    /**\n     * Encodes the userData parameter for adding liquidity to a WeightedPool with exact token inputs\n     * @param amountsIn - the amounts each of token to deposit in the pool as liquidity\n     * @param minimumBPT - the minimum acceptable BPT to receive in return for deposited tokens\n     */\n    static addLiquidityUnbalanced = (\n        amountsIn: bigint[],\n        minimumBPT: bigint,\n    ): Hex =>\n        encodeAbiParameters(\n            [{ type: 'uint256' }, { type: 'uint256[]' }, { type: 'uint256' }],\n            [\n                BigInt(WeightedPoolJoinKind.EXACT_TOKENS_IN_FOR_BPT_OUT),\n                amountsIn,\n                minimumBPT,\n            ],\n        );\n\n    /**\n     * Encodes the userData parameter for adding liquidity to a WeightedPool with a single token to receive an exact amount of BPT\n     * @param bptAmountOut - the amount of BPT to be minted\n     * @param tokenIndex - the index of the token to be provided as liquidity\n     */\n    static addLiquiditySingleToken = (\n        bptAmountOut: bigint,\n        tokenIndex: number,\n    ): Hex => {\n        // if tokenIndex is provided, it's assumed to be an allTokensIn\n        return encodeAbiParameters(\n            [{ type: 'uint256' }, { type: 'uint256' }, { type: 'uint256' }],\n            [\n                BigInt(WeightedPoolJoinKind.TOKEN_IN_FOR_EXACT_BPT_OUT),\n                bptAmountOut,\n                BigInt(tokenIndex),\n            ],\n        );\n    };\n\n    /**\n     * Encodes the userData parameter for adding liquidity to a WeightedPool proportionally to receive an exact amount of BPT\n     * @param bptAmountOut - the amount of BPT to be minted\n     */\n    static addLiquidityProportional = (bptAmountOut: bigint): Hex => {\n        return encodeAbiParameters(\n            [{ type: 'uint256' }, { type: 'uint256' }],\n            [\n                BigInt(WeightedPoolJoinKind.ALL_TOKENS_IN_FOR_EXACT_BPT_OUT),\n                bptAmountOut,\n            ],\n        );\n    };\n\n    /**\n     * Encodes the userData parameter for removing liquidity from a WeightedPool by removing tokens in return for an exact amount of BPT\n     * @param bptAmountIn - the amount of BPT to be burned\n     * @param tokenIndex - the index of the token to removed from the pool\n     */\n    static removeLiquiditySingleTokenExactIn = (\n        bptAmountIn: bigint,\n        tokenIndex: number,\n    ): Hex => {\n        return encodeAbiParameters(\n            [{ type: 'uint256' }, { type: 'uint256' }, { type: 'uint256' }],\n            [\n                BigInt(WeightedPoolExitKind.EXACT_BPT_IN_FOR_ONE_TOKEN_OUT),\n                bptAmountIn,\n                BigInt(tokenIndex),\n            ],\n        );\n    };\n\n    /**\n     * Encodes the userData parameter for removing liquidity from a WeightedPool by removing tokens in return for an exact amount of BPT\n     * @param bptAmountIn - the amount of BPT to be burned\n     */\n    static removeLiquidityProportional = (bptAmountIn: bigint): Hex => {\n        return encodeAbiParameters(\n            [{ type: 'uint256' }, { type: 'uint256' }],\n            [\n                BigInt(WeightedPoolExitKind.EXACT_BPT_IN_FOR_TOKENS_OUT),\n                bptAmountIn,\n            ],\n        );\n    };\n\n    /**\n     * Encodes the userData parameter for removing liquidity from a WeightedPool by removing exact amounts of tokens\n     * @param amountsOut - the amounts of each token to be withdrawn from the pool\n     * @param maxBPTAmountIn - the minimum acceptable BPT to burn in return for withdrawn tokens\n     */\n    static removeLiquidityUnbalanced = (\n        amountsOut: bigint[],\n        maxBPTAmountIn: bigint,\n    ): Hex =>\n        encodeAbiParameters(\n            [{ type: 'uint256' }, { type: 'uint256[]' }, { type: 'uint256' }],\n            [\n                BigInt(WeightedPoolExitKind.BPT_IN_FOR_EXACT_TOKENS_OUT),\n                amountsOut,\n                maxBPTAmountIn,\n            ],\n        );\n}\n","import { buildCallWithPermit2ProtocolVersionError } from '@/utils';\nimport {\n    AddLiquidityBase,\n    AddLiquidityBuildCallOutput,\n    AddLiquidityConfig,\n    AddLiquidityInput,\n    AddLiquidityQueryOutput,\n    PoolState,\n} from '../..';\nimport { PoolType } from '../../../types';\nimport { AddLiquidityComposableStable } from './composableStable/addLiquidityComposableStable';\nimport { AddLiquidityStable } from './stable/addLiquidityStable';\nimport { AddLiquidityV2BuildCallInput } from './types';\nimport { AddLiquidityWeighted } from './weighted/addLiquidityWeighted';\n\nexport class AddLiquidityV2 implements AddLiquidityBase {\n    private readonly addLiquidityTypes: Record<string, AddLiquidityBase> = {};\n\n    constructor(config?: AddLiquidityConfig) {\n        const { customAddLiquidityTypes } = config || {};\n        this.addLiquidityTypes = {\n            //GYRO2, GYRO3, GYROE pool types only support Add Liquidity Proportional (3 - ALL_TOKENS_IN_FOR_BPT_OUT)\n            [PoolType.ComposableStable]: new AddLiquidityComposableStable(),\n            [PoolType.Gyro2]: new AddLiquidityWeighted(),\n            [PoolType.Gyro3]: new AddLiquidityWeighted(),\n            [PoolType.GyroE]: new AddLiquidityWeighted(),\n            [PoolType.MetaStable]: new AddLiquidityStable(),\n            [PoolType.Stable]: new AddLiquidityStable(),\n            [PoolType.Weighted]: new AddLiquidityWeighted(),\n            // custom add liquidity types take precedence over base types\n            ...customAddLiquidityTypes,\n        };\n    }\n\n    public getAddLiquidity(poolType: string): AddLiquidityBase {\n        if (!this.addLiquidityTypes[poolType]) {\n            throw new Error(`Unsupported pool type ${poolType}`);\n        }\n        return this.addLiquidityTypes[poolType];\n    }\n\n    public async query(\n        input: AddLiquidityInput,\n        poolState: PoolState,\n    ): Promise<AddLiquidityQueryOutput> {\n        return this.getAddLiquidity(poolState.type).query(input, poolState);\n    }\n\n    public buildCall(\n        input: AddLiquidityV2BuildCallInput,\n    ): AddLiquidityBuildCallOutput {\n        return this.getAddLiquidity(input.poolType).buildCall(input);\n    }\n\n    public buildCallWithPermit2(): AddLiquidityBuildCallOutput {\n        throw buildCallWithPermit2ProtocolVersionError;\n    }\n}\n","import { encodeFunctionData, zeroAddress } from 'viem';\nimport { balancerRouterAbi } from '@/abi';\nimport { Token } from '@/entities/token';\nimport { TokenAmount } from '@/entities/tokenAmount';\nimport { PoolState } from '@/entities/types';\nimport {\n    getAmounts,\n    getBptAmountFromReferenceAmount,\n    getSortedTokens,\n} from '@/entities/utils';\nimport { Hex } from '@/types';\nimport {\n    BALANCER_ROUTER,\n    addLiquiditySingleTokenShouldHaveTokenInIndexError,\n} from '@/utils';\n\nimport { getAmountsCall } from '../helpers';\nimport {\n    AddLiquidityBase,\n    AddLiquidityBaseBuildCallInput,\n    AddLiquidityBaseQueryOutput,\n    AddLiquidityBuildCallOutput,\n    AddLiquidityInput,\n    AddLiquidityKind,\n} from '../types';\nimport { doAddLiquidityUnbalancedQuery } from './doAddLiquidityUnbalancedQuery';\nimport { doAddLiquiditySingleTokenQuery } from './doAddLiquiditySingleTokenQuery';\nimport { doAddLiquidityProportionalQuery } from './doAddLiquidityProportionalQuery';\nimport { getValue } from '@/entities/utils/getValue';\nimport { Permit2 } from '@/entities/permit2Helper';\n\nexport class AddLiquidityV3 implements AddLiquidityBase {\n    async query(\n        input: AddLiquidityInput,\n        poolState: PoolState,\n    ): Promise<AddLiquidityBaseQueryOutput> {\n        const sortedTokens = getSortedTokens(poolState.tokens, input.chainId);\n        const bptToken = new Token(input.chainId, poolState.address, 18);\n\n        let bptOut: TokenAmount;\n        let amountsIn: TokenAmount[];\n        let tokenInIndex: number | undefined;\n\n        switch (input.kind) {\n            case AddLiquidityKind.Proportional: {\n                const bptAmount = await getBptAmountFromReferenceAmount(\n                    input,\n                    poolState,\n                );\n\n                // proportional join query returns exactAmountsIn for exactBptOut\n                const amountsInNumbers = await doAddLiquidityProportionalQuery(\n                    input.rpcUrl,\n                    input.chainId,\n                    input.sender ?? zeroAddress,\n                    input.userData ?? '0x',\n                    poolState.address,\n                    bptAmount.rawAmount,\n                );\n\n                amountsIn = sortedTokens.map((t, i) =>\n                    TokenAmount.fromRawAmount(t, amountsInNumbers[i]),\n                );\n\n                bptOut = TokenAmount.fromRawAmount(\n                    bptToken,\n                    bptAmount.rawAmount,\n                );\n\n                tokenInIndex = undefined;\n                break;\n            }\n            case AddLiquidityKind.Unbalanced: {\n                const maxAmountsIn = getAmounts(sortedTokens, input.amountsIn);\n                const bptAmountOut = await doAddLiquidityUnbalancedQuery(\n                    input.rpcUrl,\n                    input.chainId,\n                    input.sender ?? zeroAddress,\n                    input.userData ?? '0x',\n                    poolState.address,\n                    maxAmountsIn,\n                );\n                bptOut = TokenAmount.fromRawAmount(bptToken, bptAmountOut);\n                amountsIn = sortedTokens.map((t, i) =>\n                    TokenAmount.fromRawAmount(t, maxAmountsIn[i]),\n                );\n                tokenInIndex = undefined;\n                break;\n            }\n            case AddLiquidityKind.SingleToken: {\n                bptOut = TokenAmount.fromRawAmount(\n                    bptToken,\n                    input.bptOut.rawAmount,\n                );\n                const amountIn = await doAddLiquiditySingleTokenQuery(\n                    input.rpcUrl,\n                    input.chainId,\n                    input.sender ?? zeroAddress,\n                    input.userData ?? '0x',\n                    input.tokenIn,\n                    poolState.address,\n                    input.bptOut.rawAmount,\n                );\n                amountsIn = sortedTokens.map((t) => {\n                    if (t.isSameAddress(input.tokenIn))\n                        return TokenAmount.fromRawAmount(t, amountIn);\n\n                    return TokenAmount.fromRawAmount(t, 0n);\n                });\n                tokenInIndex = sortedTokens.findIndex((t) =>\n                    t.isSameAddress(input.tokenIn),\n                );\n                break;\n            }\n        }\n\n        const output: AddLiquidityBaseQueryOutput & { userData: Hex } = {\n            to: BALANCER_ROUTER[input.chainId],\n            poolType: poolState.type,\n            poolId: poolState.id,\n            addLiquidityKind: input.kind,\n            bptOut,\n            amountsIn,\n            tokenInIndex,\n            chainId: input.chainId,\n            protocolVersion: 3,\n            userData: input.userData ?? '0x',\n        };\n\n        return output;\n    }\n\n    buildCall(\n        input: AddLiquidityBaseBuildCallInput & { userData: Hex },\n    ): AddLiquidityBuildCallOutput {\n        const amounts = getAmountsCall(input);\n        let callData: Hex;\n        switch (input.addLiquidityKind) {\n            case AddLiquidityKind.Proportional:\n                {\n                    callData = encodeFunctionData({\n                        abi: balancerRouterAbi,\n                        functionName: 'addLiquidityProportional',\n                        args: [\n                            input.poolId,\n                            amounts.maxAmountsIn,\n                            amounts.minimumBpt,\n                            !!input.wethIsEth,\n                            input.userData,\n                        ],\n                    });\n                }\n                break;\n            case AddLiquidityKind.Unbalanced:\n                {\n                    callData = encodeFunctionData({\n                        abi: balancerRouterAbi,\n                        functionName: 'addLiquidityUnbalanced',\n                        args: [\n                            input.poolId,\n                            input.amountsIn.map((a) => a.amount),\n                            amounts.minimumBpt,\n                            !!input.wethIsEth,\n                            input.userData,\n                        ],\n                    });\n                }\n                break;\n            case AddLiquidityKind.SingleToken:\n                {\n                    // just a sanity check as this is already checked in InputValidator\n                    if (input.tokenInIndex === undefined) {\n                        throw addLiquiditySingleTokenShouldHaveTokenInIndexError;\n                    }\n                    callData = encodeFunctionData({\n                        abi: balancerRouterAbi,\n                        functionName: 'addLiquiditySingleTokenExactOut',\n                        args: [\n                            input.poolId,\n                            input.amountsIn[input.tokenInIndex].token.address,\n                            input.amountsIn[input.tokenInIndex].amount,\n                            input.bptOut.amount,\n                            !!input.wethIsEth,\n                            input.userData,\n                        ],\n                    });\n                }\n                break;\n        }\n\n        return {\n            callData,\n            to: BALANCER_ROUTER[input.chainId],\n            value: getValue(input.amountsIn, !!input.wethIsEth),\n            minBptOut: TokenAmount.fromRawAmount(\n                input.bptOut.token,\n                amounts.minimumBpt,\n            ),\n            maxAmountsIn: input.amountsIn.map((a, i) =>\n                TokenAmount.fromRawAmount(a.token, amounts.maxAmountsIn[i]),\n            ),\n        };\n    }\n\n    public buildCallWithPermit2(\n        input: AddLiquidityBaseBuildCallInput & { userData: Hex },\n        permit2: Permit2,\n    ): AddLiquidityBuildCallOutput {\n        const buildCallOutput = this.buildCall(input);\n\n        const args = [\n            [],\n            [],\n            permit2.batch,\n            permit2.signature,\n            [buildCallOutput.callData],\n        ] as const;\n\n        const callData = encodeFunctionData({\n            abi: balancerRouterAbi,\n            functionName: 'permitBatchAndCall',\n            args,\n        });\n\n        return {\n            ...buildCallOutput,\n            callData,\n        };\n    }\n}\n","import { createPublicClient, Hex, http } from 'viem';\nimport { BALANCER_ROUTER, ChainId, CHAINS } from '@/utils';\nimport {\n    balancerRouterAbi,\n    permit2Abi,\n    vaultExtensionAbi_V3,\n    vaultV3Abi,\n} from '@/abi';\nimport { Address } from '@/types';\n\nexport const doAddLiquidityUnbalancedQuery = async (\n    rpcUrl: string,\n    chainId: ChainId,\n    sender: Address,\n    userData: Hex,\n    poolAddress: Address,\n    maxAmountsIn: bigint[],\n) => {\n    const client = createPublicClient({\n        transport: http(rpcUrl),\n        chain: CHAINS[chainId],\n    });\n\n    const { result: bptAmountOut } = await client.simulateContract({\n        address: BALANCER_ROUTER[chainId],\n        abi: [\n            ...balancerRouterAbi,\n            ...vaultV3Abi,\n            ...vaultExtensionAbi_V3,\n            ...permit2Abi,\n        ],\n        functionName: 'queryAddLiquidityUnbalanced',\n        args: [poolAddress, maxAmountsIn, sender, userData],\n    });\n    return bptAmountOut;\n};\n","import { createPublicClient, Hex, http } from 'viem';\nimport { BALANCER_ROUTER, ChainId, CHAINS } from '@/utils';\nimport {\n    balancerRouterAbi,\n    permit2Abi,\n    vaultExtensionAbi_V3,\n    vaultV3Abi,\n} from '@/abi';\nimport { Address } from '@/types';\n\nexport const doAddLiquiditySingleTokenQuery = async (\n    rpcUrl: string,\n    chainId: ChainId,\n    sender: Address,\n    userData: Hex,\n    tokenIn: Address,\n    poolAddress: Address,\n    bptOut: bigint,\n): Promise<bigint> => {\n    const client = createPublicClient({\n        transport: http(rpcUrl),\n        chain: CHAINS[chainId],\n    });\n\n    const { result: amountIn } = await client.simulateContract({\n        address: BALANCER_ROUTER[chainId],\n        abi: [\n            ...balancerRouterAbi,\n            ...vaultV3Abi,\n            ...vaultExtensionAbi_V3,\n            ...permit2Abi,\n        ],\n        functionName: 'queryAddLiquiditySingleTokenExactOut',\n        args: [poolAddress, tokenIn, bptOut, sender, userData],\n    });\n    return amountIn;\n};\n","import { createPublicClient, Hex, http } from 'viem';\nimport { BALANCER_ROUTER, ChainId, CHAINS } from '@/utils';\nimport {\n    balancerRouterAbi,\n    permit2Abi,\n    vaultExtensionAbi_V3,\n    vaultV3Abi,\n} from '@/abi';\nimport { Address } from '@/types';\n\nexport const doAddLiquidityProportionalQuery = async (\n    rpcUrl: string,\n    chainId: ChainId,\n    sender: Address,\n    userData: Hex,\n    poolAddress: Address,\n    bptOut: bigint,\n): Promise<bigint[]> => {\n    const client = createPublicClient({\n        transport: http(rpcUrl),\n        chain: CHAINS[chainId],\n    });\n\n    const { result: amountsIn } = await client.simulateContract({\n        address: BALANCER_ROUTER[chainId],\n        abi: [\n            ...balancerRouterAbi,\n            ...vaultV3Abi,\n            ...vaultExtensionAbi_V3,\n            ...permit2Abi,\n        ],\n        functionName: 'queryAddLiquidityProportional',\n        args: [poolAddress, bptOut, sender, userData],\n    });\n\n    return [...amountsIn];\n};\n","import { Address } from '../../types';\n\nexport function areTokensInArray(tokens: Address[], tokenArray: Address[]) {\n    const sanitisedTokens = tokens.map((t) => t.toLowerCase() as Address);\n    const sanitisedTokenArray = tokenArray.map((t) => t.toLowerCase());\n    for (const token of sanitisedTokens) {\n        if (!sanitisedTokenArray.includes(token)) {\n            throw new Error(`Token ${token} not found in array`);\n        }\n    }\n}\n","import { AddLiquidityInput, AddLiquidityKind } from '../../addLiquidity/types';\nimport {\n    RemoveLiquidityInput,\n    RemoveLiquidityKind,\n    RemoveLiquidityRecoveryInput,\n} from '../../removeLiquidity/types';\nimport { PoolState } from '../../types';\nimport { areTokensInArray } from '../../utils/areTokensInArray';\n\nexport const validateTokensAddLiquidity = (\n    addLiquidityInput: AddLiquidityInput,\n    poolState: PoolState,\n) => {\n    switch (addLiquidityInput.kind) {\n        case AddLiquidityKind.Unbalanced:\n            areTokensInArray(\n                addLiquidityInput.amountsIn.map((a) => a.address),\n                poolState.tokens.map((t) => t.address),\n            );\n            break;\n        case AddLiquidityKind.SingleToken:\n            areTokensInArray(\n                [addLiquidityInput.tokenIn],\n                poolState.tokens.map((t) => t.address),\n            );\n            break;\n        case AddLiquidityKind.Proportional:\n            areTokensInArray(\n                [addLiquidityInput.referenceAmount.address],\n                [poolState.address, ...poolState.tokens.map((t) => t.address)], // reference amount can be any pool token or pool BPT\n            );\n            break;\n        default:\n            break;\n    }\n};\n\nexport const validateTokensRemoveLiquidity = (\n    removeLiquidityInput: RemoveLiquidityInput,\n    poolState: PoolState,\n) => {\n    switch (removeLiquidityInput.kind) {\n        case RemoveLiquidityKind.Unbalanced:\n            areTokensInArray(\n                removeLiquidityInput.amountsOut.map((a) => a.address),\n                poolState.tokens.map((t) => t.address),\n            );\n            break;\n        case RemoveLiquidityKind.SingleTokenExactOut:\n            areTokensInArray(\n                [removeLiquidityInput.amountOut.address],\n                poolState.tokens.map((t) => t.address),\n            );\n            break;\n        case RemoveLiquidityKind.SingleTokenExactIn:\n            areTokensInArray(\n                [removeLiquidityInput.tokenOut],\n                poolState.tokens.map((t) => t.address),\n            );\n            break;\n        case RemoveLiquidityKind.Proportional:\n            areTokensInArray(\n                [removeLiquidityInput.bptIn.address],\n                [poolState.address],\n            );\n            break;\n    }\n};\n\nexport const validateTokensRemoveLiquidityRecovery = (\n    removeLiquidityRecoveryInput: RemoveLiquidityRecoveryInput,\n    poolState: PoolState,\n) => {\n    areTokensInArray(\n        [removeLiquidityRecoveryInput.bptIn.address],\n        [poolState.address],\n    );\n};\n\nexport const validatePoolHasBpt = (poolState: PoolState) => {\n    const { tokens, address } = poolState;\n    const bptIndex = tokens.findIndex((t) => t.address === address);\n    if (bptIndex < 0) {\n        throw new Error(\n            'INPUT_ERROR: Pool State should have BPT token included',\n        );\n    }\n};\n\nexport const validateCreatePoolTokens = (tokens: { address: string }[]) => {\n    const tokenAddresses = tokens.map((t) => t.address);\n    if (tokenAddresses.length !== new Set(tokenAddresses).size) {\n        throw new Error('Duplicate token addresses');\n    }\n    if (tokens.length < 2) {\n        throw new Error('Minimum of 2 tokens required');\n    }\n};\n","import {\n    RemoveLiquidityInput,\n    RemoveLiquidityRecoveryInput,\n} from '@/entities/removeLiquidity/types';\nimport { CreatePoolInput } from '../createPool/types';\nimport { InitPoolInput, InitPoolInputV3 } from '../initPool/types';\nimport { PoolState } from '../types';\nimport {\n    validateCreatePoolTokens,\n    validateTokensAddLiquidity,\n    validateTokensRemoveLiquidity,\n    validateTokensRemoveLiquidityRecovery,\n} from './utils/validateTokens';\nimport { TokenType } from '@/types';\nimport { zeroAddress } from 'viem';\nimport { AddLiquidityInput } from '@/entities/addLiquidity/types';\nimport { areTokensInArray } from '@/entities/utils/areTokensInArray';\nimport { isSameAddress, NATIVE_ASSETS } from '@/utils';\n\nexport class InputValidatorBase {\n    validateInitPool(initPoolInput: InitPoolInput, poolState: PoolState): void {\n        areTokensInArray(\n            initPoolInput.amountsIn.map((a) => a.address),\n            poolState.tokens.map((t) => t.address),\n        );\n        if (poolState.protocolVersion === 3) {\n            this.validateWethIsEth(initPoolInput as InitPoolInputV3);\n        }\n    }\n\n    validateCreatePool(input: CreatePoolInput) {\n        validateCreatePoolTokens(input.tokens);\n        if (input.protocolVersion === 3) {\n            input.tokens.forEach(({ tokenType, rateProvider }) => {\n                if (\n                    tokenType !== TokenType.STANDARD &&\n                    rateProvider === zeroAddress\n                ) {\n                    throw new Error(\n                        'Only TokenType.STANDARD is allowed to have zeroAddress rateProvider',\n                    );\n                }\n            });\n        }\n    }\n\n    validateAddLiquidity(\n        addLiquidityInput: AddLiquidityInput,\n        poolState: PoolState,\n    ): void {\n        validateTokensAddLiquidity(addLiquidityInput, poolState);\n    }\n\n    validateRemoveLiquidity(\n        input: RemoveLiquidityInput,\n        poolState: PoolState,\n    ): void {\n        validateTokensRemoveLiquidity(input, poolState);\n    }\n\n    validateRemoveLiquidityRecovery(\n        input: RemoveLiquidityRecoveryInput,\n        poolState: PoolState,\n    ): void {\n        validateTokensRemoveLiquidityRecovery(input, poolState);\n    }\n\n    validateWethIsEth(initPoolInput: InitPoolInputV3) {\n        if (initPoolInput.wethIsEth) {\n            const inputContainsWrappedNativeAsset =\n                initPoolInput.amountsIn.some((a) =>\n                    isSameAddress(\n                        a.address,\n                        NATIVE_ASSETS[initPoolInput.chainId].wrapped,\n                    ),\n                );\n            if (!inputContainsWrappedNativeAsset) {\n                throw new Error(\n                    'wethIsEth requires wrapped native asset as input',\n                );\n            }\n        }\n    }\n}\n","import { AddLiquidityInput } from '../../addLiquidity/types';\nimport { CreatePoolV2ComposableStableInput } from '../../createPool/types';\nimport {\n    RemoveLiquidityInput,\n    RemoveLiquidityRecoveryInput,\n} from '../../removeLiquidity/types';\nimport { PoolState, PoolStateWithBalances } from '../../types';\nimport { InputValidatorBase } from '../inputValidatorBase';\nimport { validatePoolHasBpt } from '../utils/validateTokens';\n\nexport class InputValidatorComposableStable extends InputValidatorBase {\n    validateAddLiquidity(\n        addLiquidityInput: AddLiquidityInput,\n        poolState: PoolState,\n    ): void {\n        super.validateAddLiquidity(addLiquidityInput, poolState);\n        validatePoolHasBpt(poolState);\n    }\n\n    validateRemoveLiquidity(\n        input: RemoveLiquidityInput,\n        poolState: PoolState,\n    ): void {\n        super.validateRemoveLiquidity(input, poolState);\n        validatePoolHasBpt(poolState);\n    }\n\n    validateRemoveLiquidityRecovery(\n        input: RemoveLiquidityRecoveryInput,\n        poolStateWithBalances: PoolStateWithBalances,\n    ): void {\n        super.validateRemoveLiquidityRecovery(input, poolStateWithBalances);\n        validatePoolHasBpt(poolStateWithBalances);\n    }\n\n    validateCreatePool(input: CreatePoolV2ComposableStableInput): void {\n        super.validateCreatePool(input);\n        if (input.tokens.length > 5) {\n            throw new Error(\n                'Composable stable pools can have a maximum of 5 tokens',\n            );\n        }\n        if (input.amplificationParameter <= BigInt(0)) {\n            throw new Error('Amplification parameter must be greater than 0');\n        }\n        if (input.amplificationParameter > BigInt(5000)) {\n            throw new Error(\n                'Amplification parameter must be equal or lower than 5000',\n            );\n        }\n        return;\n    }\n}\n","import { InitPoolInput } from '@/entities/initPool';\nimport { AddLiquidityInput, AddLiquidityKind } from '../../addLiquidity/types';\nimport { CreatePoolInput } from '../../createPool/types';\nimport {\n    RemoveLiquidityInput,\n    RemoveLiquidityKind,\n} from '../../removeLiquidity/types';\nimport { PoolState } from '../../types';\nimport { InputValidatorBase } from '../inputValidatorBase';\nimport {\n    validateTokensAddLiquidity,\n    validateTokensRemoveLiquidity,\n} from '../utils/validateTokens';\nimport {\n    addLiquidityProportionalOnlyError,\n    removeLiquidityProportionalOnlyError,\n} from '@/utils';\n\nexport class InputValidatorCowAmm extends InputValidatorBase {\n    // biome-ignore lint/correctness/noUnusedVariables: <explanation>\n    validateInitPool(initPoolInput: InitPoolInput, poolState: PoolState): void {\n        throw new Error('Method not implemented.');\n    }\n\n    validateAddLiquidity(\n        addLiquidityInput: AddLiquidityInput,\n        poolState: PoolState,\n    ): void {\n        if (addLiquidityInput.kind !== AddLiquidityKind.Proportional) {\n            throw addLiquidityProportionalOnlyError(\n                addLiquidityInput.kind,\n                poolState.type,\n            );\n        }\n        validateTokensAddLiquidity(addLiquidityInput, poolState);\n    }\n\n    validateRemoveLiquidity(\n        removeLiquidityInput: RemoveLiquidityInput,\n        poolState: PoolState,\n    ): void {\n        if (removeLiquidityInput.kind !== RemoveLiquidityKind.Proportional) {\n            throw removeLiquidityProportionalOnlyError(\n                removeLiquidityInput.kind,\n                poolState.type,\n            );\n        }\n        validateTokensRemoveLiquidity(removeLiquidityInput, poolState);\n    }\n\n    validateCreatePool(input: CreatePoolInput): void {\n        console.log(input);\n        throw new Error('Method not implemented.');\n    }\n}\n","import { InitPoolInput } from '@/entities/initPool';\nimport { AddLiquidityInput, AddLiquidityKind } from '../../addLiquidity/types';\nimport { CreatePoolInput } from '../../createPool/types';\nimport {\n    RemoveLiquidityInput,\n    RemoveLiquidityKind,\n} from '../../removeLiquidity/types';\nimport { PoolState } from '../../types';\nimport { InputValidatorBase } from '../inputValidatorBase';\nimport {\n    validateTokensAddLiquidity,\n    validateTokensRemoveLiquidity,\n} from '../utils/validateTokens';\nimport {\n    addLiquidityProportionalOnlyError,\n    removeLiquidityProportionalOnlyError,\n} from '@/utils';\n\nexport class InputValidatorGyro extends InputValidatorBase {\n    // biome-ignore lint/correctness/noUnusedVariables: <explanation>\n    validateInitPool(initPoolInput: InitPoolInput, poolState: PoolState): void {\n        throw new Error('Method not implemented.');\n    }\n\n    validateAddLiquidity(\n        addLiquidityInput: AddLiquidityInput,\n        poolState: PoolState,\n    ): void {\n        if (addLiquidityInput.kind !== AddLiquidityKind.Proportional) {\n            throw addLiquidityProportionalOnlyError(\n                addLiquidityInput.kind,\n                poolState.type,\n            );\n        }\n        validateTokensAddLiquidity(addLiquidityInput, poolState);\n    }\n\n    validateRemoveLiquidity(\n        removeLiquidityInput: RemoveLiquidityInput,\n        poolState: PoolState,\n    ): void {\n        if (removeLiquidityInput.kind !== RemoveLiquidityKind.Proportional) {\n            throw removeLiquidityProportionalOnlyError(\n                removeLiquidityInput.kind,\n                poolState.type,\n            );\n        }\n        validateTokensRemoveLiquidity(removeLiquidityInput, poolState);\n    }\n\n    validateCreatePool(input: CreatePoolInput): void {\n        console.log(input);\n        throw new Error('Method not implemented.');\n    }\n}\n","import {\n    AddLiquidityInput,\n    AddLiquidityKind,\n} from '@/entities/addLiquidity/types';\nimport { PoolState } from '@/entities/types';\nimport { addLiquidityProportionalNotSupportedOnPoolTypeError } from '@/utils';\nimport { InputValidatorBase } from '../inputValidatorBase';\nimport { validateTokensAddLiquidity } from '../utils/validateTokens';\nimport { CreatePoolV3StableInput } from '@/entities/createPool';\n\nexport const MAX_AMP = 5000n;\nexport const MIN_AMP = 1n;\nexport const MAX_TOKENS = 5;\nexport class InputValidatorStable extends InputValidatorBase {\n    validateCreatePool(input: CreatePoolV3StableInput) {\n        super.validateCreatePool(input);\n\n        if (input.tokens.length > MAX_TOKENS) {\n            throw new Error(\n                `Stable pools can only have a maximum of ${MAX_TOKENS} tokens`,\n            );\n        }\n\n        if (input.amplificationParameter < MIN_AMP) {\n            throw new Error(\n                `Amplification parameter below minimum of ${MIN_AMP}`,\n            );\n        }\n        if (input.amplificationParameter > MAX_AMP) {\n            throw new Error(\n                `Amplification parameter above maximum of ${MAX_AMP}`,\n            );\n        }\n    }\n\n    validateAddLiquidity(\n        addLiquidityInput: AddLiquidityInput,\n        poolState: PoolState,\n    ): void {\n        if (\n            poolState.protocolVersion === 2 &&\n            addLiquidityInput.kind === AddLiquidityKind.Proportional\n        ) {\n            throw addLiquidityProportionalNotSupportedOnPoolTypeError(\n                poolState.type,\n            );\n        }\n        validateTokensAddLiquidity(addLiquidityInput, poolState);\n    }\n}\n","import {\n    CreatePoolV2WeightedInput,\n    CreatePoolV3WeightedInput,\n} from '../../createPool/types';\nimport { InputValidatorBase } from '../inputValidatorBase';\n\nexport class InputValidatorWeighted extends InputValidatorBase {\n    validateCreatePool(\n        input: CreatePoolV2WeightedInput | CreatePoolV3WeightedInput,\n    ) {\n        super.validateCreatePool(input);\n        if (input.tokens.length > 8) {\n            throw new Error('Weighted pools can have a maximum of 8 tokens');\n        }\n        const weightsSum = input.tokens.reduce(\n            (acc, { weight }) => acc + weight,\n            0n,\n        );\n        if (weightsSum !== BigInt(1e18)) {\n            throw new Error('Weights must sum to 1e18');\n        }\n        if (input.tokens.find(({ weight }) => weight === 0n)) {\n            throw new Error('Weight cannot be 0');\n        }\n    }\n}\n","import { PoolStateWithUnderlyings } from '@/entities/types';\nimport { InputValidatorBase } from '../inputValidatorBase';\nimport { AddLiquidityKind } from '@/entities/addLiquidity/types';\nimport { AddLiquidityBoostedInput } from '@/entities/addLiquidityBoosted/types';\n\nexport class InputValidatorBoosted extends InputValidatorBase {\n    validateAddLiquidityBoosted(\n        addLiquidityInput: AddLiquidityBoostedInput,\n        poolState: PoolStateWithUnderlyings,\n    ): void {\n        //check if poolState.protocolVersion is 3\n        if (poolState.protocolVersion !== 3) {\n            throw new Error('protocol version must be 3');\n        }\n\n        if (addLiquidityInput.kind === AddLiquidityKind.Unbalanced) {\n            // Child tokens are the lower most tokens of the pool, this will be the underlying token if it exists\n            const childTokens = poolState.tokens.map((t) => {\n                if (t.underlyingToken)\n                    return t.underlyingToken.address.toLowerCase();\n                return t.address.toLowerCase();\n            });\n            addLiquidityInput.amountsIn.forEach((a) => {\n                if (\n                    !childTokens.includes(\n                        a.address.toLowerCase() as `0x${string}`,\n                    )\n                ) {\n                    throw new Error(\n                        `Address ${a.address} is not contained in the pool's child tokens.`,\n                    );\n                }\n            });\n        }\n    }\n}\n","import { PoolType } from '../../types';\nimport { AddLiquidityInput } from '../addLiquidity/types';\nimport { CreatePoolInput } from '../createPool/types';\nimport { InitPoolInput } from '../initPool/types';\nimport {\n    RemoveLiquidityInput,\n    RemoveLiquidityRecoveryInput,\n} from '../removeLiquidity/types';\nimport { PoolState, PoolStateWithUnderlyings } from '../types';\nimport { InputValidatorComposableStable } from './composableStable/inputValidatorComposableStable';\nimport { InputValidatorCowAmm } from './cowAmm/inputValidatorCowAmm';\nimport { InputValidatorGyro } from './gyro/inputValidatorGyro';\nimport { InputValidatorStable } from './stable/inputValidatorStable';\nimport { InputValidatorBase } from './inputValidatorBase';\nimport { InputValidatorWeighted } from './weighted/inputValidatorWeighted';\nimport {\n    CHAINS,\n    ChainId,\n    buildCallWithPermit2ProtocolVersionError,\n} from '@/utils';\nimport { InputValidatorBoosted } from './boosted/inputValidatorBoosted';\nimport { AddLiquidityBoostedInput } from '../addLiquidityBoosted/types';\n\nexport class InputValidator {\n    validators: Record<string, InputValidatorBase> = {};\n\n    constructor() {\n        this.validators = {\n            [PoolType.ComposableStable]: new InputValidatorComposableStable(),\n            [PoolType.CowAmm]: new InputValidatorCowAmm(),\n            [PoolType.Gyro2]: new InputValidatorGyro(),\n            [PoolType.Gyro3]: new InputValidatorGyro(),\n            [PoolType.GyroE]: new InputValidatorGyro(),\n            [PoolType.MetaStable]: new InputValidatorStable(),\n            [PoolType.Stable]: new InputValidatorStable(),\n            [PoolType.Weighted]: new InputValidatorWeighted(),\n            [PoolType.Boosted]: new InputValidatorBoosted(),\n        };\n    }\n\n    getValidator(poolType: string): InputValidatorBase {\n        if (!this.validators[poolType]) {\n            console.warn(\n                `Pool type ${poolType} does not have a validator, using default.`,\n            );\n            return new InputValidatorBase();\n        }\n        return this.validators[poolType];\n    }\n\n    validateInitPool(initPoolInput: InitPoolInput, poolState: PoolState) {\n        this.validateChain(initPoolInput.chainId);\n        this.getValidator(poolState.type).validateInitPool(\n            initPoolInput,\n            poolState,\n        );\n    }\n\n    validateAddLiquidity(\n        addLiquidityInput: AddLiquidityInput,\n        poolState: PoolState,\n    ): void {\n        this.validateChain(addLiquidityInput.chainId);\n        this.getValidator(poolState.type).validateAddLiquidity(\n            addLiquidityInput,\n            poolState,\n        );\n    }\n\n    validateRemoveLiquidity(\n        removeLiquidityInput: RemoveLiquidityInput,\n        poolState: PoolState,\n    ): void {\n        this.validateChain(removeLiquidityInput.chainId);\n        this.getValidator(poolState.type).validateRemoveLiquidity(\n            removeLiquidityInput,\n            poolState,\n        );\n    }\n\n    validateRemoveLiquidityRecovery(\n        removeLiquidityRecoveryInput: RemoveLiquidityRecoveryInput,\n        poolState: PoolState,\n    ): void {\n        this.validateChain(removeLiquidityRecoveryInput.chainId);\n        this.getValidator(poolState.type).validateRemoveLiquidityRecovery(\n            removeLiquidityRecoveryInput,\n            poolState,\n        );\n    }\n\n    validateCreatePool(input: CreatePoolInput): void {\n        this.validateChain(input.chainId);\n        this.getValidator(input.poolType).validateCreatePool(input);\n    }\n\n    validateAddLiquidityBoosted(\n        addLiquidityInput: AddLiquidityBoostedInput,\n        poolState: PoolStateWithUnderlyings,\n    ): void {\n        if (poolState.type !== PoolType.Boosted)\n            throw new Error(\n                `validateAddLiquidityBoosted on non boosted pool: ${poolState.address}:${poolState.type}`,\n            );\n        this.validateChain(addLiquidityInput.chainId);\n        (\n            this.validators[PoolType.Boosted] as InputValidatorBoosted\n        ).validateAddLiquidityBoosted(addLiquidityInput, poolState);\n    }\n\n    private validateChain(chainId: number): void {\n        if (chainId in CHAINS) return;\n        throw new Error(`Unsupported ChainId: ${chainId}`);\n    }\n\n    static validateBuildCallWithPermit2(input: {\n        protocolVersion: number;\n    }): void {\n        if (input.protocolVersion !== 3) {\n            throw buildCallWithPermit2ProtocolVersionError;\n        }\n    }\n}\n","import { encodeFunctionData } from 'viem';\nimport { cowAmmPoolAbi } from '@/abi/cowAmmPool';\nimport { Token } from '@/entities/token';\nimport { TokenAmount } from '@/entities/tokenAmount';\nimport { PoolState } from '@/entities/types';\nimport { buildCallWithPermit2ProtocolVersionError } from '@/utils';\n\nimport { getAmountsCall } from '../helpers';\nimport {\n    AddLiquidityBase,\n    AddLiquidityBaseBuildCallInput,\n    AddLiquidityBaseQueryOutput,\n    AddLiquidityBuildCallOutput,\n    AddLiquidityKind,\n    AddLiquidityProportionalInput,\n} from '../types';\nimport {\n    calculateProportionalAmountsCowAmm,\n    getPoolStateWithBalancesCowAmm,\n} from '@/entities/utils';\n\nexport class AddLiquidityCowAmm implements AddLiquidityBase {\n    async query(\n        input: AddLiquidityProportionalInput,\n        poolState: PoolState,\n    ): Promise<AddLiquidityBaseQueryOutput> {\n        // get a single poolState on-chain that will be used to get bptAmount from referenceAmount and then to simulate an add liquidity proportional query\n        const poolStateWithBalances = await getPoolStateWithBalancesCowAmm(\n            poolState,\n            input.chainId,\n            input.rpcUrl,\n        );\n\n        // get bptAmount from referenceAmount\n        // Note: rounds down in favor of leaving some dust behind instead of taking more amountIn than the user expects\n        const { bptAmount: _bptAmount } = calculateProportionalAmountsCowAmm(\n            poolStateWithBalances,\n            input.referenceAmount,\n        );\n\n        // simulate an add liquidity proportional query by exactly replicating smart contract math\n        const { tokenAmounts, bptAmount } = calculateProportionalAmountsCowAmm(\n            poolStateWithBalances,\n            _bptAmount,\n        );\n\n        const bptOut = TokenAmount.fromRawAmount(\n            new Token(input.chainId, bptAmount.address, bptAmount.decimals),\n            bptAmount.rawAmount,\n        );\n        const amountsIn = tokenAmounts.map((amountIn) =>\n            TokenAmount.fromRawAmount(\n                new Token(input.chainId, amountIn.address, amountIn.decimals),\n                amountIn.rawAmount,\n            ),\n        );\n        const tokenInIndex = undefined;\n\n        const output: AddLiquidityBaseQueryOutput = {\n            to: poolState.id,\n            poolType: poolState.type,\n            poolId: poolState.id,\n            addLiquidityKind: input.kind,\n            bptOut,\n            amountsIn,\n            tokenInIndex,\n            chainId: input.chainId,\n            protocolVersion: 1,\n        };\n\n        return output;\n    }\n\n    buildCall(\n        input: AddLiquidityBaseBuildCallInput,\n    ): AddLiquidityBuildCallOutput {\n        if (input.addLiquidityKind !== AddLiquidityKind.Proportional) {\n            throw new Error(\n                `Error: Add Liquidity ${input.addLiquidityKind} is not supported. Cow AMM pools support Add Liquidity Proportional only.`,\n            );\n        }\n        if (input.wethIsEth) {\n            throw new Error(\n                'Cow AMM pools do not support adding liquidity with ETH.',\n            );\n        }\n\n        const amounts = getAmountsCall(input);\n        const callData = encodeFunctionData({\n            abi: cowAmmPoolAbi,\n            functionName: 'joinPool',\n            args: [amounts.minimumBpt, amounts.maxAmountsInWithoutBpt],\n        });\n\n        return {\n            callData,\n            to: input.poolId,\n            value: 0n,\n            minBptOut: TokenAmount.fromRawAmount(\n                input.bptOut.token,\n                amounts.minimumBpt,\n            ),\n            maxAmountsIn: input.amountsIn.map((a, i) =>\n                TokenAmount.fromRawAmount(a.token, amounts.maxAmountsIn[i]),\n            ),\n        };\n    }\n\n    public buildCallWithPermit2(): AddLiquidityBuildCallOutput {\n        throw buildCallWithPermit2ProtocolVersionError;\n    }\n}\n","import {\n    AddLiquidityBase,\n    AddLiquidityBuildCallOutput,\n    AddLiquidityInput,\n    AddLiquidityQueryOutput,\n    AddLiquidityBuildCallInput,\n    AddLiquidityConfig,\n    AddLiquidityProportionalInput,\n} from './types';\nimport { PoolState } from '../types';\nimport { AddLiquidityV2 } from './addLiquidityV2';\nimport { AddLiquidityV3 } from './addLiquidityV3';\nimport { InputValidator } from '../inputValidator/inputValidator';\nimport { AddLiquidityCowAmm } from './addLiquidityCowAmm';\nimport { Permit2 } from '../permit2Helper';\nimport { Hex } from 'viem';\n\nexport class AddLiquidity implements AddLiquidityBase {\n    constructor(public config?: AddLiquidityConfig) {}\n    private readonly inputValidator: InputValidator = new InputValidator();\n\n    query(\n        input: AddLiquidityInput,\n        poolState: PoolState,\n    ): Promise<AddLiquidityQueryOutput> {\n        this.inputValidator.validateAddLiquidity(input, poolState);\n        switch (poolState.protocolVersion) {\n            case 1: {\n                const addLiquidity = new AddLiquidityCowAmm();\n                return addLiquidity.query(\n                    input as AddLiquidityProportionalInput,\n                    poolState,\n                );\n            }\n            case 2: {\n                const addLiquidity = new AddLiquidityV2(this.config);\n                return addLiquidity.query(input, poolState);\n            }\n            case 3: {\n                const addLiquidity = new AddLiquidityV3();\n                return addLiquidity.query(input, poolState);\n            }\n        }\n    }\n\n    buildCall(\n        input:\n            | AddLiquidityBuildCallInput\n            | (AddLiquidityBuildCallInput & { userData: Hex }),\n    ): AddLiquidityBuildCallOutput {\n        switch (input.protocolVersion) {\n            case 1: {\n                const addLiquidity = new AddLiquidityCowAmm();\n                return addLiquidity.buildCall(input);\n            }\n            case 2: {\n                if ('sender' in input) {\n                    const addLiquidity = new AddLiquidityV2(this.config);\n                    return addLiquidity.buildCall(input);\n                }\n                break;\n            }\n            case 3: {\n                if (!('sender' in input)) {\n                    if (!('userData' in input))\n                        throw new Error(\n                            'UserData must be provided in buildCall input',\n                        );\n                    const addLiquidity = new AddLiquidityV3();\n                    return addLiquidity.buildCall(input);\n                }\n                break;\n            }\n        }\n\n        throw Error('buildCall input/version mis-match');\n    }\n\n    buildCallWithPermit2(\n        input:\n            | AddLiquidityBuildCallInput\n            | (AddLiquidityBuildCallInput & { userData: Hex }),\n        permit2: Permit2,\n    ): AddLiquidityBuildCallOutput {\n        InputValidator.validateBuildCallWithPermit2(input);\n        if (!('userData' in input))\n            throw new Error('UserData must be provided in buildCall input');\n\n        const addLiquidity = new AddLiquidityV3();\n        return addLiquidity.buildCallWithPermit2(input, permit2);\n    }\n}\n","// A user can add liquidity to a boosted pool in various forms. The following ways are\n// available:\n// 1. Unbalanced - addLiquidityUnbalancedToERC4626Pool\n// 2. Proportional - addLiquidityProportionalToERC4626Pool\nimport { encodeFunctionData, zeroAddress } from 'viem';\nimport { TokenAmount } from '@/entities/tokenAmount';\n\nimport { Permit2 } from '@/entities/permit2Helper';\n\nimport { getAmountsCall } from '../addLiquidity/helpers';\n\nimport { PoolStateWithUnderlyings } from '@/entities/types';\n\nimport {\n    getAmounts,\n    getBptAmountFromReferenceAmountBoosted,\n    getSortedTokens,\n    getValue,\n} from '@/entities/utils';\n\nimport {\n    AddLiquidityBoostedV3BuildCallOutput,\n    AddLiquidityKind,\n} from '../addLiquidity/types';\n\nimport { doAddLiquidityUnbalancedQuery } from './doAddLiquidityUnbalancedQuery';\nimport { doAddLiquidityProportionalQuery } from './doAddLiquidityPropotionalQuery';\nimport { Token } from '../token';\nimport { BALANCER_COMPOSITE_LIQUIDITY_ROUTER } from '@/utils';\nimport { balancerCompositeLiquidityRouterAbi, balancerRouterAbi } from '@/abi';\n\nimport { InputValidator } from '../inputValidator/inputValidator';\n\nimport { Hex } from '@/types';\nimport {\n    AddLiquidityBoostedBuildCallInput,\n    AddLiquidityBoostedInput,\n    AddLiquidityBoostedQueryOutput,\n} from './types';\n\nexport class AddLiquidityBoostedV3 {\n    private readonly inputValidator: InputValidator = new InputValidator();\n\n    async query(\n        input: AddLiquidityBoostedInput,\n        poolState: PoolStateWithUnderlyings,\n    ): Promise<AddLiquidityBoostedQueryOutput> {\n        this.inputValidator.validateAddLiquidityBoosted(input, {\n            ...poolState,\n            type: 'Boosted',\n        });\n\n        const bptToken = new Token(input.chainId, poolState.address, 18);\n\n        let bptOut: TokenAmount;\n        let amountsIn: TokenAmount[];\n\n        // Child tokens are the lowest most tokens. This will be underlying if it exists.\n        const childTokens = poolState.tokens.map((t) => {\n            if (t.underlyingToken) {\n                return t.underlyingToken;\n            }\n            return {\n                address: t.address,\n                decimals: t.decimals,\n                index: t.index,\n            };\n        });\n\n        switch (input.kind) {\n            case AddLiquidityKind.Unbalanced: {\n                // It is allowed not not provide the same amount of TokenAmounts as inputs\n                // as the pool has tokens, in this case, the input tokens are filled with\n                // a default value ( 0 in this case ) to assure correct amounts in as the pool has tokens.\n                const sortedTokens = getSortedTokens(\n                    childTokens,\n                    input.chainId,\n                );\n                const maxAmountsIn = getAmounts(sortedTokens, input.amountsIn);\n\n                const bptAmountOut = await doAddLiquidityUnbalancedQuery(\n                    input.rpcUrl,\n                    input.chainId,\n                    input.sender ?? zeroAddress,\n                    input.userData ?? '0x',\n                    poolState.address,\n                    maxAmountsIn,\n                );\n\n                bptOut = TokenAmount.fromRawAmount(bptToken, bptAmountOut);\n                amountsIn = sortedTokens.map((t, i) =>\n                    TokenAmount.fromRawAmount(t, maxAmountsIn[i]),\n                );\n                break;\n            }\n            case AddLiquidityKind.Proportional: {\n                const bptAmount = await getBptAmountFromReferenceAmountBoosted(\n                    input,\n                    poolState,\n                );\n\n                const exactAmountsInNumbers =\n                    await doAddLiquidityProportionalQuery(\n                        input.rpcUrl,\n                        input.chainId,\n                        input.sender ?? zeroAddress,\n                        input.userData ?? '0x',\n                        poolState.address,\n                        bptAmount.rawAmount,\n                    );\n\n                // Amounts are mapped to child tokens of the pool\n                amountsIn = childTokens.map((t, i) =>\n                    TokenAmount.fromRawAmount(\n                        new Token(input.chainId, t.address, t.decimals),\n                        exactAmountsInNumbers[i],\n                    ),\n                );\n\n                bptOut = TokenAmount.fromRawAmount(\n                    bptToken,\n                    bptAmount.rawAmount,\n                );\n                break;\n            }\n        }\n\n        const output: AddLiquidityBoostedQueryOutput = {\n            poolId: poolState.id,\n            poolType: poolState.type,\n            addLiquidityKind: input.kind,\n            bptOut,\n            amountsIn,\n            chainId: input.chainId,\n            protocolVersion: 3,\n            userData: input.userData ?? '0x',\n            to: BALANCER_COMPOSITE_LIQUIDITY_ROUTER[input.chainId],\n        };\n\n        return output;\n    }\n\n    buildCall(\n        input: AddLiquidityBoostedBuildCallInput,\n    ): AddLiquidityBoostedV3BuildCallOutput {\n        const amounts = getAmountsCall(input);\n        const wethIsEth = input.wethIsEth ?? false;\n        const args = [\n            input.poolId,\n            amounts.maxAmountsIn,\n            amounts.minimumBpt,\n            wethIsEth,\n            input.userData,\n        ] as const;\n        let callData: Hex;\n        switch (input.addLiquidityKind) {\n            case AddLiquidityKind.Unbalanced: {\n                callData = encodeFunctionData({\n                    abi: balancerCompositeLiquidityRouterAbi,\n                    functionName: 'addLiquidityUnbalancedToERC4626Pool',\n                    args,\n                });\n                break;\n            }\n            case AddLiquidityKind.Proportional: {\n                callData = encodeFunctionData({\n                    abi: balancerCompositeLiquidityRouterAbi,\n                    functionName: 'addLiquidityProportionalToERC4626Pool',\n                    args,\n                });\n                break;\n            }\n            case AddLiquidityKind.SingleToken: {\n                throw new Error('SingleToken not supported');\n            }\n        }\n\n        const value = getValue(input.amountsIn, wethIsEth);\n\n        return {\n            callData,\n            args,\n            to: BALANCER_COMPOSITE_LIQUIDITY_ROUTER[input.chainId],\n            value,\n            minBptOut: TokenAmount.fromRawAmount(\n                input.bptOut.token,\n                amounts.minimumBpt,\n            ),\n            maxAmountsIn: input.amountsIn.map((a, i) =>\n                TokenAmount.fromRawAmount(a.token, amounts.maxAmountsIn[i]),\n            ),\n        };\n    }\n\n    public buildCallWithPermit2(\n        input: AddLiquidityBoostedBuildCallInput,\n        permit2: Permit2,\n    ): AddLiquidityBoostedV3BuildCallOutput {\n        // generate same calldata as buildCall\n        const buildCallOutput = this.buildCall(input);\n\n        const args = [\n            [],\n            [],\n            permit2.batch,\n            permit2.signature,\n            [buildCallOutput.callData],\n        ] as const;\n\n        const callData = encodeFunctionData({\n            abi: balancerRouterAbi,\n            functionName: 'permitBatchAndCall',\n            args,\n        });\n\n        return {\n            ...buildCallOutput,\n            callData,\n        };\n    }\n}\n","import { createPublicClient, Hex, http } from 'viem';\n\nimport { BALANCER_COMPOSITE_LIQUIDITY_ROUTER, ChainId, CHAINS } from '@/utils';\n\nimport { Address } from '@/types';\n\nimport {\n    balancerCompositeLiquidityRouterAbi,\n    permit2Abi,\n    vaultExtensionAbi_V3,\n    vaultV3Abi,\n} from '@/abi';\n\nexport const doAddLiquidityUnbalancedQuery = async (\n    rpcUrl: string,\n    chainId: ChainId,\n    sender: Address,\n    userData: Hex,\n    poolAddress: Address,\n    exactUnderlyingAmountsIn: bigint[],\n): Promise<bigint> => {\n    const client = createPublicClient({\n        transport: http(rpcUrl),\n        chain: CHAINS[chainId],\n    });\n\n    const { result: bptAmountOut } = await client.simulateContract({\n        address: BALANCER_COMPOSITE_LIQUIDITY_ROUTER[chainId],\n        abi: [\n            ...balancerCompositeLiquidityRouterAbi,\n            ...vaultV3Abi,\n            ...vaultExtensionAbi_V3,\n            ...permit2Abi,\n        ],\n        functionName: 'queryAddLiquidityUnbalancedToERC4626Pool',\n        args: [poolAddress, exactUnderlyingAmountsIn, sender, userData],\n    });\n    return bptAmountOut;\n};\n","import { createPublicClient, Hex, http } from 'viem';\nimport { BALANCER_COMPOSITE_LIQUIDITY_ROUTER, ChainId, CHAINS } from '@/utils';\nimport { Address } from '@/types';\nimport {\n    balancerCompositeLiquidityRouterAbi,\n    permit2Abi,\n    vaultExtensionAbi_V3,\n    vaultV3Abi,\n} from '@/abi';\n\nexport const doAddLiquidityProportionalQuery = async (\n    rpcUrl: string,\n    chainId: ChainId,\n    sender: Address,\n    userData: Hex,\n    poolAddress: Address,\n    exactBptAmountOut: bigint,\n): Promise<bigint[]> => {\n    const client = createPublicClient({\n        transport: http(rpcUrl),\n        chain: CHAINS[chainId],\n    });\n\n    const { result: exactAmountsIn } = await client.simulateContract({\n        address: BALANCER_COMPOSITE_LIQUIDITY_ROUTER[chainId],\n        abi: [\n            ...balancerCompositeLiquidityRouterAbi,\n            ...vaultV3Abi,\n            ...vaultExtensionAbi_V3,\n            ...permit2Abi,\n        ],\n        functionName: 'queryAddLiquidityProportionalToERC4626Pool',\n        args: [poolAddress, exactBptAmountOut, sender, userData],\n    });\n    return [...exactAmountsIn];\n};\n","import { encodeFunctionData } from 'viem';\nimport { TokenAmount } from '@/entities/tokenAmount';\n\nimport { Permit2 } from '@/entities/permit2Helper';\n\nimport { BufferState } from '@/entities/types';\n\nimport { doAddLiquidityQuery } from './doAddLiquidityQuery';\nimport { Token } from '../token';\nimport { BALANCER_BUFFER_ROUTER } from '@/utils';\nimport { balancerBufferRouterAbi, balancerRouterAbi } from '@/abi';\n\nimport {\n    AddLiquidityBufferBuildCallInput,\n    AddLiquidityBufferBuildCallOutput,\n    AddLiquidityBufferInput,\n    AddLiquidityBufferQueryOutput,\n} from './types';\n\nexport class AddLiquidityBufferV3 {\n    async query(\n        input: AddLiquidityBufferInput,\n        bufferState: BufferState,\n    ): Promise<AddLiquidityBufferQueryOutput> {\n        const { amountUnderlyingIn, amountWrappedIn } =\n            await doAddLiquidityQuery(\n                input.rpcUrl,\n                input.chainId,\n                bufferState.wrappedToken.address,\n                input.exactSharesToIssue,\n            );\n        const underlyingToken = new Token(\n            input.chainId,\n            bufferState.underlyingToken.address,\n            bufferState.underlyingToken.decimals,\n        );\n        const underlyingAmountIn = TokenAmount.fromRawAmount(\n            underlyingToken,\n            amountUnderlyingIn,\n        );\n        const wrappedToken = new Token(\n            input.chainId,\n            bufferState.wrappedToken.address,\n            bufferState.wrappedToken.decimals,\n        );\n        const wrappedAmountIn = TokenAmount.fromRawAmount(\n            wrappedToken,\n            amountWrappedIn,\n        );\n\n        const output: AddLiquidityBufferQueryOutput = {\n            exactSharesToIssue: input.exactSharesToIssue,\n            underlyingAmountIn,\n            wrappedAmountIn,\n            chainId: input.chainId,\n            protocolVersion: 3,\n            to: BALANCER_BUFFER_ROUTER[input.chainId],\n        };\n\n        return output;\n    }\n\n    buildCall(\n        input: AddLiquidityBufferBuildCallInput,\n    ): AddLiquidityBufferBuildCallOutput {\n        const maxUnderlyingAmountIn = TokenAmount.fromRawAmount(\n            input.underlyingAmountIn.token,\n            input.slippage.applyTo(input.underlyingAmountIn.amount),\n        );\n        const maxWrappedAmountIn = TokenAmount.fromRawAmount(\n            input.wrappedAmountIn.token,\n            input.slippage.applyTo(input.wrappedAmountIn.amount),\n        );\n\n        const callData = encodeFunctionData({\n            abi: balancerBufferRouterAbi,\n            functionName: 'addLiquidityToBuffer',\n            args: [\n                input.wrappedAmountIn.token.address,\n                maxUnderlyingAmountIn.amount,\n                maxWrappedAmountIn.amount,\n                input.exactSharesToIssue,\n            ] as const,\n        });\n        return {\n            callData,\n            to: BALANCER_BUFFER_ROUTER[input.chainId],\n            value: 0n, // Default to 0 as native not supported\n            maxUnderlyingAmountIn,\n            maxWrappedAmountIn,\n            exactSharesToIssue: input.exactSharesToIssue,\n        };\n    }\n\n    public buildCallWithPermit2(\n        input: AddLiquidityBufferBuildCallInput,\n        permit2: Permit2,\n    ): AddLiquidityBufferBuildCallOutput {\n        // generate same calldata as buildCall\n        const buildCallOutput = this.buildCall(input);\n\n        const args = [\n            [],\n            [],\n            permit2.batch,\n            permit2.signature,\n            [buildCallOutput.callData],\n        ] as const;\n\n        const callData = encodeFunctionData({\n            abi: balancerRouterAbi,\n            functionName: 'permitBatchAndCall',\n            args,\n        });\n\n        return {\n            ...buildCallOutput,\n            callData,\n        };\n    }\n}\n","import { createPublicClient, http } from 'viem';\nimport { BALANCER_BUFFER_ROUTER, ChainId, CHAINS } from '@/utils';\nimport { Address } from '@/types';\nimport {\n    balancerBufferRouterAbi,\n    permit2Abi,\n    vaultExtensionAbi_V3,\n    vaultV3Abi,\n} from '@/abi';\n\nexport const doAddLiquidityQuery = async (\n    rpcUrl: string,\n    chainId: ChainId,\n    wrappedToken: Address,\n    exactSharesToIssue: bigint,\n): Promise<{ amountUnderlyingIn: bigint; amountWrappedIn: bigint }> => {\n    const client = createPublicClient({\n        transport: http(rpcUrl),\n        chain: CHAINS[chainId],\n    });\n\n    const {\n        result: [amountUnderlyingIn, amountWrappedIn],\n    } = await client.simulateContract({\n        address: BALANCER_BUFFER_ROUTER[chainId],\n        abi: [\n            ...balancerBufferRouterAbi,\n            ...vaultV3Abi,\n            ...vaultExtensionAbi_V3,\n            ...permit2Abi,\n        ],\n        functionName: 'queryAddLiquidityToBuffer',\n        args: [wrappedToken, exactSharesToIssue],\n    });\n    return { amountUnderlyingIn, amountWrappedIn };\n};\n","import { encodeFunctionData } from 'viem';\nimport { Token } from '../../token';\nimport { BALANCER_RELAYER, ZERO_ADDRESS } from '../../../utils';\nimport { Relayer } from '../../relayer';\nimport { encodeCalls } from './encodeCalls';\nimport { TokenAmount } from '../../tokenAmount';\nimport { balancerRelayerAbi } from '../../../abi';\nimport { doAddLiquidityNestedQuery } from './doAddLiquidityNestedQuery';\nimport { getQueryCallsAttributes } from './getQueryCallsAttributes';\nimport { validateBuildCallInput, validateQueryInput } from './validateInputs';\nimport { NestedPoolState } from '../../types';\nimport {\n    AddLiquidityNestedBuildCallOutput,\n    AddLiquidityNestedInput,\n} from '../types';\nimport {\n    AddLiquidityNestedCallInputV2,\n    AddLiquidityNestedQueryOutputV2,\n} from './types';\n\nexport class AddLiquidityNestedV2 {\n    async query(\n        input: AddLiquidityNestedInput,\n        nestedPoolState: NestedPoolState,\n    ): Promise<AddLiquidityNestedQueryOutputV2> {\n        const amountsIn = validateQueryInput(input, nestedPoolState);\n\n        const callsAttributes = getQueryCallsAttributes(\n            input,\n            nestedPoolState.pools,\n        );\n\n        const { encodedCalls } = encodeCalls(callsAttributes);\n\n        // append peek call to get bptOut\n        const peekCall = Relayer.encodePeekChainedReferenceValue(\n            callsAttributes[callsAttributes.length - 1].outputReference,\n        );\n        encodedCalls.push(peekCall);\n\n        const encodedMulticall = encodeFunctionData({\n            abi: balancerRelayerAbi,\n            functionName: 'vaultActionsQueryMulticall',\n            args: [encodedCalls],\n        });\n\n        const peekedValue = await doAddLiquidityNestedQuery(\n            input.chainId,\n            input.rpcUrl,\n            encodedMulticall,\n        );\n\n        const tokenOut = new Token(\n            input.chainId,\n            callsAttributes[callsAttributes.length - 1].poolAddress,\n            18,\n        );\n        const bptOut = TokenAmount.fromRawAmount(tokenOut, peekedValue);\n\n        return {\n            to: BALANCER_RELAYER[input.chainId],\n            callsAttributes,\n            amountsIn,\n            bptOut,\n            protocolVersion: 2,\n        };\n    }\n\n    buildCall(\n        input: AddLiquidityNestedCallInputV2,\n    ): AddLiquidityNestedBuildCallOutput {\n        validateBuildCallInput(input);\n        // apply slippage to bptOut\n        const minBptOut = input.slippage.applyTo(input.bptOut.amount, -1);\n\n        // update last call with minBptOut limit in place\n        input.callsAttributes[input.callsAttributes.length - 1] = {\n            ...input.callsAttributes[input.callsAttributes.length - 1],\n            minBptOut,\n        };\n\n        // update wethIsEth flag + sender and recipient placeholders\n        input.callsAttributes = input.callsAttributes.map((call) => {\n            return {\n                ...call,\n                sender:\n                    call.sender === ZERO_ADDRESS\n                        ? input.accountAddress\n                        : call.sender,\n                recipient:\n                    call.recipient === ZERO_ADDRESS\n                        ? input.accountAddress\n                        : call.recipient,\n                wethIsEth: input.wethIsEth,\n            };\n        });\n\n        const { encodedCalls, values } = encodeCalls(input.callsAttributes);\n\n        // prepend relayer approval if provided\n        if (input.relayerApprovalSignature !== undefined) {\n            encodedCalls.unshift(\n                Relayer.encodeSetRelayerApproval(\n                    BALANCER_RELAYER[input.callsAttributes[0].chainId],\n                    true,\n                    input.relayerApprovalSignature,\n                ),\n            );\n        }\n\n        const callData = encodeFunctionData({\n            abi: balancerRelayerAbi,\n            functionName: 'multicall',\n            args: [encodedCalls],\n        });\n\n        // aggregate values from all calls\n        const accumulatedValue = values.reduce((acc, value) => {\n            return acc + value;\n        }, 0n);\n\n        return {\n            callData,\n            to: BALANCER_RELAYER[input.callsAttributes[0].chainId],\n            value: accumulatedValue,\n            minBptOut,\n        };\n    }\n}\n","import {\n    concat,\n    encodeFunctionData,\n    hexToBigInt,\n    pad,\n    slice,\n    toHex,\n} from 'viem';\nimport { Address, Hex } from '../../types';\nimport { batchRelayerLibraryAbi } from '../../abi/batchRelayerLibrary';\nimport { RelayerAuthorization } from './authorization';\nimport { vaultV2Abi } from '../../abi';\nimport { MAX_UINT256, PublicWalletClient } from '../../utils';\n\nexport class Relayer {\n    static CHAINED_REFERENCE_TEMP_PREFIX = '0xba10' as Hex; // Temporary reference: it is deleted after a read.\n    static CHAINED_REFERENCE_READONLY_PREFIX = '0xba11' as Hex; // Read-only reference: it is not deleted after a read.\n\n    static toChainedReference(key: bigint, isTemporary = true): bigint {\n        const prefix = isTemporary\n            ? Relayer.CHAINED_REFERENCE_TEMP_PREFIX\n            : Relayer.CHAINED_REFERENCE_READONLY_PREFIX;\n        // The full padded prefix is 66 characters long, with 64 hex characters and the 0x prefix.\n        const paddedKey = pad(toHex(key), { dir: 'left', size: 30 });\n        const chainedReferenceWithPrefix = concat([prefix, paddedKey]);\n        return hexToBigInt(chainedReferenceWithPrefix);\n    }\n\n    static fromChainedReference(ref: bigint): bigint {\n        const chainedReferenceWithoutPrefix = slice(toHex(ref), 2); // remove prefix\n        return hexToBigInt(chainedReferenceWithoutPrefix);\n    }\n\n    static encodePeekChainedReferenceValue(reference: bigint): Hex {\n        return encodeFunctionData({\n            abi: batchRelayerLibraryAbi,\n            functionName: 'peekChainedReferenceValue',\n            args: [reference],\n        });\n    }\n\n    static encodeSetRelayerApproval(\n        relayerAddress: Address,\n        approved: boolean,\n        signature: Hex,\n    ): Hex {\n        return encodeFunctionData({\n            abi: batchRelayerLibraryAbi,\n            functionName: 'setRelayerApproval',\n            args: [relayerAddress, approved, signature],\n        });\n    }\n\n    static signRelayerApproval = async (\n        relayerAddress: Address,\n        signerAddress: Address,\n        client: PublicWalletClient,\n    ): Promise<Hex> => {\n        const approval = encodeFunctionData({\n            abi: vaultV2Abi,\n            functionName: 'setRelayerApproval',\n            args: [signerAddress, relayerAddress, true],\n        });\n\n        const signature =\n            await RelayerAuthorization.signSetRelayerApprovalAuthorization(\n                client,\n                signerAddress,\n                relayerAddress,\n                approval,\n            );\n\n        const encodedSignature =\n            RelayerAuthorization.encodeCalldataAuthorization(\n                '0x',\n                MAX_UINT256,\n                signature,\n            );\n\n        return encodedSignature;\n    };\n\n    static encodeApproveVault(tokenAddress: Address, maxAmount: bigint): Hex {\n        return encodeFunctionData({\n            abi: batchRelayerLibraryAbi,\n            functionName: 'approveVault',\n            args: [tokenAddress, maxAmount],\n        });\n    }\n}\n","import { concat, pad, parseSignature, toHex } from 'viem';\nimport { MAX_UINT256, VAULT, PublicWalletClient } from '../../utils';\nimport { Address, Hex } from '../../types';\nimport { vaultV2Abi } from '../../abi';\n\nenum RelayerAction {\n    JoinPool = 'JoinPool',\n    ExitPool = 'ExitPool',\n    Swap = 'Swap',\n    BatchSwap = 'BatchSwap',\n    SetRelayerApproval = 'SetRelayerApproval',\n}\n\nexport class RelayerAuthorization {\n    /**\n     * Cannot be constructed.\n     */\n    private constructor() {\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n    }\n\n    static encodeCalldataAuthorization = (\n        calldata: Hex,\n        deadline: bigint,\n        signatureHex: Hex,\n    ): Hex => {\n        const encodedDeadline = pad(toHex(deadline), { size: 32 });\n        const { v, r, s } = parseSignature(signatureHex);\n        const encodedV = pad(toHex(v as bigint), { size: 32 });\n        const encodedR = pad(r, { size: 32 });\n        const encodedS = pad(s, { size: 32 });\n        return concat([\n            calldata,\n            encodedDeadline,\n            encodedV,\n            encodedR,\n            encodedS,\n        ]);\n    };\n\n    static signJoinAuthorization = (\n        client: PublicWalletClient,\n        signerAddress: Address,\n        allowedSender: Address,\n        allowedCalldata: Hex,\n        deadline?: bigint,\n        nonce?: bigint,\n    ): Promise<Hex> =>\n        RelayerAuthorization.signAuthorizationFor(\n            RelayerAction.JoinPool,\n            client,\n            signerAddress,\n            allowedSender,\n            allowedCalldata,\n            deadline,\n            nonce,\n        );\n\n    static signExitAuthorization = (\n        client: PublicWalletClient,\n        signerAddress: Address,\n        allowedSender: Address,\n        allowedCalldata: Hex,\n        deadline?: bigint,\n        nonce?: bigint,\n    ): Promise<Hex> =>\n        RelayerAuthorization.signAuthorizationFor(\n            RelayerAction.ExitPool,\n            client,\n            signerAddress,\n            allowedSender,\n            allowedCalldata,\n            deadline,\n            nonce,\n        );\n\n    static signSwapAuthorization = (\n        client: PublicWalletClient,\n        signerAddress: Address,\n        allowedSender: Address,\n        allowedCalldata: Hex,\n        deadline?: bigint,\n        nonce?: bigint,\n    ): Promise<Hex> =>\n        RelayerAuthorization.signAuthorizationFor(\n            RelayerAction.Swap,\n            client,\n            signerAddress,\n            allowedSender,\n            allowedCalldata,\n            deadline,\n            nonce,\n        );\n\n    static signBatchSwapAuthorization = (\n        client: PublicWalletClient,\n        signerAddress: Address,\n        allowedSender: Address,\n        allowedCalldata: Hex,\n        deadline?: bigint,\n        nonce?: bigint,\n    ): Promise<Hex> =>\n        RelayerAuthorization.signAuthorizationFor(\n            RelayerAction.BatchSwap,\n            client,\n            signerAddress,\n            allowedSender,\n            allowedCalldata,\n            deadline,\n            nonce,\n        );\n\n    static signSetRelayerApprovalAuthorization = (\n        client: PublicWalletClient,\n        signerAddress: Address,\n        allowedSender: Address,\n        allowedCalldata: Hex,\n        deadline?: bigint,\n        nonce?: bigint,\n    ): Promise<Hex> =>\n        RelayerAuthorization.signAuthorizationFor(\n            RelayerAction.SetRelayerApproval,\n            client,\n            signerAddress,\n            allowedSender,\n            allowedCalldata,\n            deadline,\n            nonce,\n        );\n\n    static signAuthorizationFor = async (\n        type: RelayerAction,\n        client: PublicWalletClient,\n        signerAddress: Address,\n        allowedSender: Address,\n        allowedCalldata: Hex,\n        deadline: bigint = MAX_UINT256,\n        nonce?: bigint,\n    ): Promise<Hex> => {\n        const chainId = await client.getChainId();\n        const verifyingContract = VAULT[chainId];\n\n        const domain = {\n            name: 'Balancer V2 Vault',\n            version: '1',\n            chainId,\n            verifyingContract,\n        };\n\n        const types = {\n            [type]: [\n                { name: 'calldata', type: 'bytes' },\n                { name: 'sender', type: 'address' },\n                { name: 'nonce', type: 'uint256' },\n                { name: 'deadline', type: 'uint256' },\n            ],\n        };\n\n        let _nonce = nonce;\n        if (_nonce === undefined) {\n            _nonce = await client.readContract({\n                abi: vaultV2Abi,\n                address: verifyingContract,\n                functionName: 'getNextNonce',\n                args: [signerAddress],\n            });\n        }\n\n        const signature = client.signTypedData({\n            account: signerAddress,\n            domain,\n            types,\n            primaryType: type,\n            message: {\n                calldata: allowedCalldata,\n                sender: allowedSender,\n                nonce: _nonce,\n                deadline,\n            },\n        });\n\n        return signature;\n    };\n}\n","import { ComposableStableEncoder } from '../../encoders/composableStable';\nimport { batchRelayerLibraryAbi } from '../../../abi';\nimport { encodeFunctionData, Hex } from 'viem';\nimport { TokenAmount } from '../../tokenAmount';\nimport { getValue } from '../../utils/getValue';\nimport { replaceWrapped } from '@/entities/utils';\nimport { AddLiquidityNestedCallAttributes } from './types';\nimport { WeightedEncoder } from '@/entities/encoders';\nimport { PoolType } from '@/types';\n\nexport const encodeCalls = (\n    callsAttributes: AddLiquidityNestedCallAttributes[],\n) => {\n    const encodedCalls: Hex[] = [];\n    const values: bigint[] = [];\n    for (const callAttributes of callsAttributes) {\n        const {\n            wethIsEth,\n            chainId,\n            sortedTokens,\n            poolId,\n            poolAddress,\n            poolType,\n            kind,\n            sender,\n            recipient,\n            maxAmountsIn,\n            minBptOut,\n            fromInternalBalance,\n            outputReference,\n        } = callAttributes;\n\n        // replace wrapped token with native asset if needed\n        const tokensIn = wethIsEth\n            ? replaceWrapped([...sortedTokens], chainId)\n            : [...sortedTokens];\n\n        const amountsIn = [...sortedTokens].map((t, i) => {\n            return TokenAmount.fromRawAmount(t, maxAmountsIn[i].amount);\n        });\n        const value = getValue(amountsIn, !!wethIsEth);\n\n        const _maxAmountsIn = maxAmountsIn.map((a) => a.amount);\n        const amountsInWithoutBpt = _maxAmountsIn.filter(\n            (_, i) => !sortedTokens[i].isSameAddress(poolAddress),\n        );\n        const userData = getUserData(poolType, amountsInWithoutBpt, minBptOut);\n\n        const joinPoolRequest = {\n            assets: tokensIn.map((t) => t.address), // with BPT\n            maxAmountsIn: _maxAmountsIn, // with BPT\n            userData, // wihtout BPT\n            fromInternalBalance,\n        };\n\n        const encodedCall = encodeFunctionData({\n            abi: batchRelayerLibraryAbi,\n            functionName: 'joinPool',\n            args: [\n                poolId,\n                kind,\n                sender,\n                recipient,\n                joinPoolRequest,\n                value,\n                outputReference,\n            ] as const,\n        });\n\n        encodedCalls.push(encodedCall);\n        values.push(value);\n    }\n    return { encodedCalls, values };\n};\n\nconst getUserData = (\n    poolType: PoolType,\n    amountsInWithoutBpt: bigint[],\n    minBptOut: bigint,\n) => {\n    switch (poolType) {\n        case PoolType.Weighted:\n            return WeightedEncoder.addLiquidityUnbalanced(\n                amountsInWithoutBpt,\n                minBptOut,\n            );\n        case PoolType.ComposableStable:\n            return ComposableStableEncoder.addLiquidityUnbalanced(\n                amountsInWithoutBpt,\n                minBptOut,\n            );\n        default:\n            throw new Error(`Unsupported pool type: ${poolType}`);\n    }\n};\n","import {\n    createPublicClient,\n    decodeAbiParameters,\n    decodeFunctionResult,\n    http,\n} from 'viem';\nimport { Hex } from '../../../types';\nimport {\n    BALANCER_RELAYER,\n    CHAINS,\n    ChainId,\n    EMPTY_SENDER,\n} from '../../../utils';\nimport {\n    balancerRelayerAbi,\n    permit2Abi,\n    vaultExtensionAbi_V3,\n    vaultV3Abi,\n} from '../../../abi';\n\nexport const doAddLiquidityNestedQuery = async (\n    chainId: ChainId,\n    rpcUrl: string,\n    encodedMulticall: Hex,\n): Promise<bigint> => {\n    const client = createPublicClient({\n        transport: http(rpcUrl),\n        chain: CHAINS[chainId],\n    });\n\n    const { data } = await client.call({\n        ...EMPTY_SENDER,\n        to: BALANCER_RELAYER[chainId],\n        data: encodedMulticall,\n    });\n\n    const result = decodeFunctionResult({\n        abi: [\n            ...balancerRelayerAbi,\n            ...vaultV3Abi,\n            ...vaultExtensionAbi_V3,\n            ...permit2Abi,\n        ],\n        functionName: 'vaultActionsQueryMulticall',\n        data: data as Hex,\n    });\n\n    const peekedValue = decodeAbiParameters(\n        [{ type: 'uint256' }],\n        result[result.length - 1],\n    )[0];\n\n    return peekedValue;\n};\n","import { HumanAmount, MinimalToken, PoolTokenWithBalance } from '../data';\nimport { Address, Hex, PoolType } from '../types';\n\n// Returned from API and used as input\nexport type PoolState = {\n    id: Hex;\n    address: Address;\n    type: string;\n    tokens: MinimalToken[];\n    protocolVersion: 1 | 2 | 3;\n};\n\nexport type PoolStateWithBalances = {\n    id: Hex;\n    address: Address;\n    type: string;\n    tokens: PoolTokenWithBalance[];\n    totalShares: HumanAmount;\n    protocolVersion: 1 | 2 | 3;\n};\nexport type PoolStateWithBalancesAndDynamicData = PoolStateWithBalances & {\n    volume24h: HumanAmount;\n    fees24h: HumanAmount;\n    aprItems: {\n        id: Hex;\n        apr: number;\n    }[];\n};\n\nexport type PoolTokenWithUnderlying = MinimalToken & {\n    underlyingToken: MinimalToken | null;\n};\n\nexport interface PoolTokenWithUnderlyingBalance extends PoolTokenWithBalance {\n    underlyingToken: PoolTokenWithBalance | null;\n}\n\nexport type PoolStateWithUnderlyings = {\n    id: Hex;\n    address: Address;\n    type: string;\n    tokens: PoolTokenWithUnderlying[];\n    protocolVersion: 1 | 2 | 3;\n};\n\nexport type PoolStateWithUnderlyingBalances = {\n    id: Hex;\n    address: Address;\n    type: string;\n    tokens: PoolTokenWithUnderlyingBalance[];\n    totalShares: HumanAmount;\n    protocolVersion: 1 | 2 | 3;\n};\n\nexport type AddLiquidityAmounts = {\n    maxAmountsIn: bigint[];\n    maxAmountsInWithoutBpt: bigint[];\n    tokenInIndex: number | undefined;\n    minimumBpt: bigint;\n};\n\nexport type RemoveLiquidityAmounts = {\n    minAmountsOut: bigint[];\n    tokenOutIndex: number | undefined;\n    maxBptAmountIn: bigint;\n};\n\ntype NestedPoolBase = {\n    id: Hex;\n    address: Address;\n    type: PoolType;\n    level: number; // 0 is the bottom and the highest level is the top\n};\n\nexport type NestedPoolV2 = NestedPoolBase & {\n    tokens: MinimalToken[]; // each token should have at least one\n};\n\nexport type NestedPoolV3 = NestedPoolBase & {\n    tokens: PoolTokenWithUnderlying[]; // each token should have at least one\n};\n\ntype NestedPoolStateBase = {\n    protocolVersion: 1 | 2 | 3;\n    mainTokens: {\n        address: Address;\n        decimals: number;\n    }[];\n};\n\nexport type NestedPoolStateV2 = NestedPoolStateBase & {\n    protocolVersion: 1 | 2;\n    pools: NestedPoolV2[];\n};\n\nexport type NestedPoolStateV3 = NestedPoolStateBase & {\n    protocolVersion: 3;\n    pools: NestedPoolV3[];\n};\n\nexport type NestedPoolState = NestedPoolStateV2 | NestedPoolStateV3;\n\nexport enum PoolKind {\n    WEIGHTED = 0,\n    LEGACY_STABLE = 1,\n    COMPOSABLE_STABLE = 2,\n    COMPOSABLE_STABLE_V2 = 3,\n    // (note only Weighted and COMPOSABLE_STABLE_V2 will support proportional exits)\n}\nexport type InitPoolAmounts = {\n    maxAmountsIn: bigint[];\n};\n\nexport type InitPoolAmountsComposableStable = InitPoolAmounts & {\n    amountsIn: bigint[];\n};\n\nexport type BufferState = {\n    wrappedToken: {\n        address: Address;\n        decimals: number;\n    };\n    underlyingToken: {\n        address: Address;\n        decimals: number;\n    };\n};\n","import { Address, PoolType } from '@/types';\nimport { Token } from '@/entities/token';\nimport {\n    ZERO_ADDRESS,\n    BALANCER_RELAYER,\n    getPoolAddress,\n    ChainId,\n} from '@/utils';\nimport {\n    AddLiquidityNestedCallAttributes,\n    AddLiquidityNestedInputV2,\n} from './types';\nimport { NestedPool, PoolKind } from '@/entities/types';\nimport { Relayer } from '@/entities/relayer';\n\nexport const getQueryCallsAttributes = (\n    { amountsIn, chainId, fromInternalBalance }: AddLiquidityNestedInputV2,\n    pools: NestedPool[],\n): AddLiquidityNestedCallAttributes[] => {\n    /**\n     * Overall logic to build sequence of add liquidity calls:\n     * 1. Go from bottom pool to up filling out input amounts and output refs\n     * 2. Inputs will be amountsIn provided, output of the previous level or 0n\n     * 3. Output at max level is the bptOut\n     */\n\n    const poolsSortedByLevel = pools.sort((a, b) => a.level - b.level);\n    const accountAddressPlaceholder = ZERO_ADDRESS;\n\n    const calls: AddLiquidityNestedCallAttributes[] = [];\n    for (const pool of poolsSortedByLevel) {\n        const sortedTokens = pool.tokens\n            .sort((a, b) => a.index - b.index)\n            .map((t) => new Token(chainId, t.address, t.decimals));\n        const maxAmountsIn = getMaxAmountsIn(sortedTokens, amountsIn, calls);\n        if (maxAmountsIn.every((a) => a.amount === 0n && !a.isRef)) {\n            continue;\n        }\n        calls.push({\n            chainId: chainId,\n            sortedTokens,\n            poolId: pool.id,\n            poolAddress: pool.address,\n            poolType: pool.type,\n            kind:\n                pool.type === PoolType.ComposableStable\n                    ? PoolKind.COMPOSABLE_STABLE_V2\n                    : PoolKind.WEIGHTED,\n            sender: getSender(maxAmountsIn, accountAddressPlaceholder, chainId),\n            recipient: '0x', // set as placeholder - will be updated after all calls are created\n            maxAmountsIn,\n            minBptOut: 0n, // limits set to zero for query calls\n            fromInternalBalance: fromInternalBalance ?? false,\n            outputReference: Relayer.toChainedReference(\n                BigInt(poolsSortedByLevel.indexOf(pool)),\n            ),\n        });\n    }\n    updateRecipients(calls, accountAddressPlaceholder);\n    return calls;\n};\n\nconst getMaxAmountsIn = (\n    sortedTokens: Token[],\n    amountsIn: { address: Address; rawAmount: bigint }[],\n    calls: AddLiquidityNestedCallAttributes[],\n): { amount: bigint; isRef: boolean }[] => {\n    return sortedTokens.map((token) => {\n        /**\n         * There are 3 possible scenarios:\n         * 1. token has amountIn provided by the user -> return amount\n         * 2. token is the output of a previous add liquidity call -> return outputRef\n         * 3. otherwise -> return zero\n         */\n\n        // 1. token has amountIn provided by the user -> return amount\n        const amountIn = amountsIn.find((a) => token.isSameAddress(a.address));\n        if (amountIn !== undefined) {\n            return {\n                amount: amountIn.rawAmount,\n                isRef: false,\n            };\n        }\n\n        // 2. token is the output of a previous add liquidity call -> return outputRef\n        const previousCall = calls.find(\n            (call) => getPoolAddress(call.poolId) === token.address,\n        );\n        if (previousCall !== undefined) {\n            return {\n                amount: previousCall.outputReference,\n                isRef: true,\n            };\n        }\n\n        // 3. otherwise -> return zero\n        return {\n            amount: 0n,\n            isRef: false,\n        };\n    });\n};\n\n// Sender's logic: if there is at least one amountIn that is not a reference,\n// then the sender is the user, otherwise it's the relayer.\nconst getSender = (\n    maxAmountsIn: { amount: bigint; isRef: boolean }[],\n    accountAddress: Address,\n    chainId: ChainId,\n): Address => {\n    return maxAmountsIn.some((a) => !a.isRef && a.amount > 0n)\n        ? accountAddress\n        : BALANCER_RELAYER[chainId];\n};\n\n// Recipient's logic: if there is a following call, then the recipient is the\n// sender of that call, otherwise it's the user.\nconst updateRecipients = (\n    calls: AddLiquidityNestedCallAttributes[],\n    accountAddress: Address,\n) => {\n    for (const call of calls) {\n        const followingCall = calls.find((_call) =>\n            _call.maxAmountsIn.some((a) => a.amount === call.outputReference),\n        );\n        if (followingCall !== undefined) {\n            call.recipient = followingCall.sender;\n        } else {\n            call.recipient = accountAddress;\n        }\n    }\n};\n","import { NATIVE_ASSETS } from '../../../utils';\nimport { Token } from '../../token';\nimport { TokenAmount } from '../../tokenAmount';\nimport { NestedPoolState } from '../../types';\nimport { AddLiquidityNestedInput } from '../types';\nimport { AddLiquidityNestedCallInputV2 } from './types';\n\nexport const validateQueryInput = (\n    input: AddLiquidityNestedInput,\n    nestedPoolState: NestedPoolState,\n): TokenAmount[] => {\n    const mainTokens = nestedPoolState.mainTokens.map(\n        (t) => new Token(input.chainId, t.address, t.decimals),\n    );\n    const amountsIn = input.amountsIn.map((amountIn) => {\n        const tokenIn = mainTokens.find((t) =>\n            t.isSameAddress(amountIn.address),\n        );\n        if (tokenIn === undefined) {\n            throw new Error(\n                `Adding liquidity with ${amountIn.address} requires it to exist within mainTokens`,\n            );\n        }\n        return TokenAmount.fromRawAmount(tokenIn, amountIn.rawAmount);\n    });\n    return amountsIn;\n};\n\nexport const validateBuildCallInput = (\n    input: AddLiquidityNestedCallInputV2,\n): void => {\n    const chainId = input.callsAttributes[0].chainId;\n    if (input.wethIsEth) {\n        if (\n            !input.amountsIn.some((a) =>\n                a.token.isUnderlyingEqual(NATIVE_ASSETS[chainId]),\n            )\n        ) {\n            throw new Error(\n                'Adding liquidity with native asset requires wrapped native asset to exist within amountsIn',\n            );\n        }\n    }\n};\n","import {\n    Address,\n    createPublicClient,\n    encodeFunctionData,\n    Hex,\n    http,\n    zeroAddress,\n} from 'viem';\nimport { NestedPoolState } from '@/entities/types';\nimport {\n    AddLiquidityNestedBuildCallOutput,\n    AddLiquidityNestedInput,\n} from '../types';\nimport { Token } from '@/entities/token';\nimport { getAmounts, getValue } from '@/entities/utils';\nimport { TokenAmount } from '@/entities/tokenAmount';\nimport { BALANCER_COMPOSITE_LIQUIDITY_ROUTER, CHAINS } from '@/utils';\nimport {\n    balancerCompositeLiquidityRouterAbi,\n    permit2Abi,\n    vaultExtensionAbi_V3,\n    vaultV3Abi,\n} from '@/abi';\nimport {\n    AddLiquidityNestedCallInputV3,\n    AddLiquidityNestedInputV3,\n    AddLiquidityNestedQueryOutputV3,\n} from './types';\nimport { validateQueryInput } from '../addLiquidityNestedV2/validateInputs';\nimport { Permit2 } from '@/entities/permit2Helper';\n\nexport class AddLiquidityNestedV3 {\n    /**\n     *\n     * @param input amountsIn can be any order and does not need all tokens. Tokens must be tokens of child pools and must not be BPT.\n     * @param nestedPoolState\n     * @returns\n     */\n    async query(\n        input: AddLiquidityNestedInputV3,\n        nestedPoolState: NestedPoolState,\n    ): Promise<AddLiquidityNestedQueryOutputV3> {\n        validateQueryInput(input, nestedPoolState);\n\n        // Address of the highest level pool (which contains BPTs of other pools), i.e. the pool we wish to join\n        const parentPool = nestedPoolState.pools.reduce((max, curr) =>\n            curr.level > max.level ? curr : max,\n        );\n        // query function input, `tokensIn` array, must have all tokens from child pools\n        // and all tokens that are not BPTs from the nested pool (parent pool).\n        const mainTokens = nestedPoolState.mainTokens.map(\n            (t) => new Token(input.chainId, t.address, t.decimals),\n        );\n        // This will add 0 amount for any tokensIn the user hasn't included\n        const maxAmountsIn = getAmounts(mainTokens, input.amountsIn, 0n);\n\n        // Query the router to get the onchain amount\n        // Note - tokens do not have to be sorted, user preference is fine\n        const bptAmountOut = await this.doQueryAddLiquidityUnbalancedNestedPool(\n            input,\n            parentPool.address,\n            nestedPoolState.mainTokens.map((t) => t.address),\n            maxAmountsIn,\n            input.sender ?? zeroAddress,\n            input.userData ?? '0x',\n        );\n\n        const bptToken = new Token(input.chainId, parentPool.address, 18);\n\n        return {\n            to: BALANCER_COMPOSITE_LIQUIDITY_ROUTER[input.chainId],\n            parentPool: parentPool.address,\n            chainId: input.chainId,\n            amountsIn: mainTokens.map((t, i) =>\n                TokenAmount.fromRawAmount(t, maxAmountsIn[i]),\n            ),\n            bptOut: TokenAmount.fromRawAmount(bptToken, bptAmountOut),\n            protocolVersion: 3,\n            userData: input.userData ?? '0x',\n        };\n    }\n\n    buildCall(\n        input: AddLiquidityNestedCallInputV3,\n    ): AddLiquidityNestedBuildCallOutput {\n        // validateBuildCallInput(input); TODO - Add this like V2 once weth/native is allowed\n        // apply slippage to bptOut\n        const minBptOut = input.slippage.applyTo(input.bptOut.amount, -1);\n        const wethIsEth = input.wethIsEth ?? false;\n        const callData = encodeFunctionData({\n            abi: balancerCompositeLiquidityRouterAbi,\n            functionName: 'addLiquidityUnbalancedNestedPool',\n            args: [\n                input.parentPool,\n                input.amountsIn.map((a) => a.token.address),\n                input.amountsIn.map((a) => a.amount),\n                minBptOut,\n                wethIsEth,\n                input.userData,\n            ],\n        });\n        return {\n            callData,\n            to: BALANCER_COMPOSITE_LIQUIDITY_ROUTER[input.chainId],\n            value: getValue(input.amountsIn, wethIsEth),\n            minBptOut,\n        };\n    }\n\n    public buildCallWithPermit2(\n        input: AddLiquidityNestedCallInputV3,\n        permit2: Permit2,\n    ): AddLiquidityNestedBuildCallOutput {\n        const buildCallOutput = this.buildCall(input);\n\n        const args = [\n            [],\n            [],\n            permit2.batch,\n            permit2.signature,\n            [buildCallOutput.callData],\n        ] as const;\n\n        const callData = encodeFunctionData({\n            abi: balancerCompositeLiquidityRouterAbi,\n            functionName: 'permitBatchAndCall',\n            args,\n        });\n\n        return {\n            ...buildCallOutput,\n            callData,\n        };\n    }\n\n    private doQueryAddLiquidityUnbalancedNestedPool = async (\n        { rpcUrl, chainId }: AddLiquidityNestedInput,\n        parentPool: Address,\n        tokensIn: Address[],\n        maxAmountsIn: bigint[],\n        sender: Address,\n        userData: Hex,\n    ) => {\n        const client = createPublicClient({\n            transport: http(rpcUrl),\n            chain: CHAINS[chainId],\n        });\n\n        const { result: bptAmountOut } = await client.simulateContract({\n            address: BALANCER_COMPOSITE_LIQUIDITY_ROUTER[chainId],\n            abi: [\n                ...balancerCompositeLiquidityRouterAbi,\n                ...vaultV3Abi,\n                ...vaultExtensionAbi_V3,\n                ...permit2Abi,\n            ],\n            functionName: 'queryAddLiquidityUnbalancedNestedPool',\n            args: [parentPool, tokensIn, maxAmountsIn, sender, userData],\n        });\n        return bptAmountOut;\n    };\n}\n","import { NestedPoolState } from '../types';\nimport { validateNestedPoolState } from '../utils';\nimport { AddLiquidityNestedV2 } from './addLiquidityNestedV2';\nimport {\n    AddLiquidityNestedBuildCallOutput,\n    AddLiquidityNestedCallInput,\n    AddLiquidityNestedInput,\n    AddLiquidityNestedQueryOutput,\n} from './types';\nimport { AddLiquidityNestedV3 } from './addLiquidityNestedV3';\nimport { Permit2 } from '../permit2Helper';\nimport { AddLiquidityNestedCallInputV3 } from './addLiquidityNestedV3/types';\nimport { Slippage } from '../slippage';\nimport { Address, Hex } from 'viem';\n\nexport class AddLiquidityNested {\n    async query(\n        input: AddLiquidityNestedInput,\n        nestedPoolState: NestedPoolState,\n    ): Promise<AddLiquidityNestedQueryOutput> {\n        validateNestedPoolState(nestedPoolState);\n        switch (nestedPoolState.protocolVersion) {\n            case 1: {\n                throw new Error(\n                    'AddLiquidityNested not supported for ProtocolVersion 1.',\n                );\n            }\n            case 2: {\n                const addLiquidity = new AddLiquidityNestedV2();\n                return addLiquidity.query(input, nestedPoolState);\n            }\n            case 3: {\n                const addLiquidity = new AddLiquidityNestedV3();\n                return addLiquidity.query(input, nestedPoolState);\n            }\n        }\n    }\n\n    buildCall(\n        input: AddLiquidityNestedCallInput,\n    ): AddLiquidityNestedBuildCallOutput {\n        switch (input.protocolVersion) {\n            case 2: {\n                const addLiquidity = new AddLiquidityNestedV2();\n                return addLiquidity.buildCall(input);\n            }\n            case 3: {\n                const addLiquidity = new AddLiquidityNestedV3();\n                return addLiquidity.buildCall(input);\n            }\n        }\n    }\n\n    public buildCallWithPermit2(\n        input: AddLiquidityNestedCallInputV3,\n        permit2: Permit2,\n    ): AddLiquidityNestedBuildCallOutput {\n        const addLiquidity = new AddLiquidityNestedV3();\n        return addLiquidity.buildCallWithPermit2(input, permit2);\n    }\n\n    /**\n     * Helper to construct AddLiquidityNestedCallInput with proper type resolving.\n     * @param queryOutput\n     * @param params\n     * @returns AddLiquidityNestedCallInput\n     */\n    buildAddLiquidityInput(\n        queryOutput: AddLiquidityNestedQueryOutput,\n        params: {\n            slippage: Slippage;\n            accountAddress?: Address;\n            relayerApprovalSignature?: Hex;\n            wethIsEth?: boolean;\n        },\n    ): AddLiquidityNestedCallInput {\n        if (queryOutput.protocolVersion === 2) {\n            return {\n                ...queryOutput,\n                protocolVersion: 2,\n                slippage: params.slippage,\n                accountAddress: params.accountAddress!,\n                relayerApprovalSignature: params.relayerApprovalSignature,\n                wethIsEth: params.wethIsEth,\n            };\n        }\n        return {\n            ...queryOutput,\n            protocolVersion: 3,\n            slippage: params.slippage,\n        };\n    }\n}\n","import { Address, encodeFunctionData, parseEther } from 'viem';\nimport { composableStableFactoryV6Abi_V2 } from '../../../../abi/composableStableFactoryV6.V2';\nimport {\n    CreatePoolBase,\n    CreatePoolBuildCallOutput,\n    CreatePoolV2ComposableStableArgs,\n    CreatePoolV2ComposableStableInput,\n} from '../../types';\nimport { getRandomBytes32 } from '../../../utils/getRandomBytes32';\nimport { COMPOSABLE_STABLE_POOL_FACTORY } from '@/utils';\nimport { sortByAddress } from '@/utils/sortByAddress';\n\nexport class CreatePoolComposableStableV2 implements CreatePoolBase {\n    buildCall(\n        input: CreatePoolV2ComposableStableInput,\n    ): CreatePoolBuildCallOutput {\n        const args = this.parseCreateFunctionArgs(input);\n        const encodedCall = encodeFunctionData({\n            abi: composableStableFactoryV6Abi_V2,\n            functionName: 'create',\n            args,\n        });\n        return {\n            callData: encodedCall,\n            to: COMPOSABLE_STABLE_POOL_FACTORY[input.chainId],\n        };\n    }\n\n    private parseCreateFunctionArgs(\n        input: CreatePoolV2ComposableStableInput,\n    ): CreatePoolV2ComposableStableArgs {\n        const sortedTokenParams = sortByAddress(input.tokens);\n\n        const [tokens, rateProviders, tokenRateCacheDurations] =\n            sortedTokenParams.reduce(\n                (acc, curr) => {\n                    acc[0].push(curr.address);\n                    acc[1].push(curr.rateProvider);\n                    acc[2].push(curr.tokenRateCacheDuration);\n                    return acc;\n                },\n                [[], [], []] as [Address[], Address[], bigint[]],\n            );\n\n        return [\n            input.name || input.symbol,\n            input.symbol,\n            tokens,\n            input.amplificationParameter,\n            rateProviders,\n            tokenRateCacheDurations,\n            input.exemptFromYieldProtocolFeeFlag,\n            parseEther(input.swapFee),\n            input.poolOwnerAddress,\n            input.salt || getRandomBytes32(),\n        ];\n    }\n}\n","import { Hex } from 'viem';\n\nexport const getRandomBytes32 = (): Hex => {\n    const getRandomBytes8 = () => Math.random().toString(16).slice(2, 10);\n    const randomBytes32 = Array(8).fill(null).map(getRandomBytes8).join('');\n    return `0x${randomBytes32}`;\n};\n","import { Address, encodeFunctionData, parseEther } from 'viem';\nimport {\n    CreatePoolBase,\n    CreatePoolBuildCallOutput,\n    CreatePoolV2WeightedArgs,\n    CreatePoolV2WeightedInput,\n} from '../../types';\nimport { getRandomBytes32 } from '../../../utils/getRandomBytes32';\nimport { weightedPoolFactoryV4Abi_V2 } from '../../../../abi/weightedPoolFactoryV4.V2';\nimport { WEIGHTED_POOL_FACTORY_BALANCER_V2 } from '@/utils';\nimport { sortByAddress } from '@/utils/sortByAddress';\n\nexport class CreatePoolWeightedV2 implements CreatePoolBase {\n    buildCall(input: CreatePoolV2WeightedInput): CreatePoolBuildCallOutput {\n        const args = this.parseCreateFunctionArgs(input);\n        const encodedCall = encodeFunctionData({\n            abi: weightedPoolFactoryV4Abi_V2,\n            functionName: 'create',\n            args,\n        });\n        return {\n            callData: encodedCall,\n            to: WEIGHTED_POOL_FACTORY_BALANCER_V2[input.chainId],\n        };\n    }\n\n    private parseCreateFunctionArgs(\n        input: CreatePoolV2WeightedInput,\n    ): CreatePoolV2WeightedArgs {\n        const sortedTokenParams = sortByAddress(input.tokens);\n\n        const [tokens, weights, rateProviders] = sortedTokenParams.reduce(\n            (acc, curr) => {\n                acc[0].push(curr.address);\n                acc[1].push(curr.weight);\n                acc[2].push(curr.rateProvider);\n                return acc;\n            },\n            [[], [], []] as [Address[], bigint[], Address[]],\n        );\n\n        return [\n            input.name || input.symbol,\n            input.symbol,\n            tokens,\n            weights,\n            rateProviders,\n            parseEther(input.swapFee),\n            input.poolOwnerAddress,\n            input.salt || getRandomBytes32(),\n        ];\n    }\n}\n","import { PoolType } from '@/types';\nimport { CreatePoolComposableStableV2 } from './composableStable/createPoolComposableStable';\nimport {\n    CreatePoolBase,\n    CreatePoolBuildCallOutput,\n    CreatePoolInput,\n} from '../types';\nimport { CreatePoolWeightedV2 } from './weighted/createPoolWeighted';\n\nexport class CreatePoolV2 implements CreatePoolBase {\n    private readonly createPoolTypes: Record<string, CreatePoolBase> = {};\n\n    constructor() {\n        this.createPoolTypes = {\n            [PoolType.Weighted]: new CreatePoolWeightedV2(),\n            [PoolType.ComposableStable]: new CreatePoolComposableStableV2(),\n        };\n    }\n\n    private getCreatePool(poolType: string): CreatePoolBase {\n        if (!this.createPoolTypes[poolType]) {\n            throw new Error('Unsupported pool type: ${poolType}');\n        }\n        return this.createPoolTypes[poolType];\n    }\n\n    public buildCall(input: CreatePoolInput): CreatePoolBuildCallOutput {\n        return this.getCreatePool(input.poolType).buildCall(input);\n    }\n}\n","import { getRandomBytes32 } from '@/entities/utils/getRandomBytes32';\nimport { encodeFunctionData, zeroAddress } from 'viem';\nimport {\n    CreatePoolBase,\n    CreatePoolV3WeightedInput,\n    CreatePoolBuildCallOutput,\n    TokenConfig,\n    PoolRoleAccounts,\n} from '../../types';\nimport { weightedPoolFactoryAbi_V3 } from '@/abi/weightedPoolFactory.V3';\nimport { WEIGHTED_POOL_FACTORY_BALANCER_V3, sortByAddress } from '@/utils';\nimport { Hex } from '@/types';\n\nexport class CreatePoolWeightedV3 implements CreatePoolBase {\n    buildCall(input: CreatePoolV3WeightedInput): CreatePoolBuildCallOutput {\n        const callData = this.encodeCall(input);\n        return {\n            callData,\n            to: WEIGHTED_POOL_FACTORY_BALANCER_V3[input.chainId],\n        };\n    }\n\n    private encodeCall(input: CreatePoolV3WeightedInput): Hex {\n        const sortedTokenParams = sortByAddress(input.tokens);\n\n        const [tokenConfigs, normalizedWeights] = sortedTokenParams.reduce(\n            (\n                acc,\n                {\n                    address: tokenAddress,\n                    rateProvider,\n                    weight,\n                    tokenType,\n                    paysYieldFees,\n                },\n            ) => {\n                acc[0].push({\n                    token: tokenAddress,\n                    tokenType,\n                    rateProvider,\n                    paysYieldFees: paysYieldFees ?? false,\n                });\n                acc[1].push(weight);\n                return acc;\n            },\n            [[], []] as [TokenConfig[], bigint[]],\n        );\n\n        const roleAccounts: PoolRoleAccounts = {\n            pauseManager: input.pauseManager,\n            swapFeeManager: input.swapFeeManager,\n            poolCreator: zeroAddress,\n        };\n\n        const args = [\n            input.name || input.symbol,\n            input.symbol,\n            tokenConfigs,\n            normalizedWeights,\n            roleAccounts,\n            input.swapFeePercentage,\n            input.poolHooksContract,\n            input.enableDonation,\n            input.disableUnbalancedLiquidity,\n            input.salt || getRandomBytes32(),\n        ] as const;\n\n        return encodeFunctionData({\n            abi: weightedPoolFactoryAbi_V3,\n            functionName: 'create',\n            args,\n        });\n    }\n}\n","import { getRandomBytes32 } from '@/entities/utils/getRandomBytes32';\nimport { encodeFunctionData, zeroAddress } from 'viem';\nimport {\n    CreatePoolBase,\n    CreatePoolV3StableInput,\n    CreatePoolBuildCallOutput,\n    PoolRoleAccounts,\n} from '../../types';\nimport { stablePoolFactoryAbi_V3 } from '@/abi';\nimport { STABLE_POOL_FACTORY_BALANCER_V3, sortByAddress } from '@/utils';\nimport { Hex } from '@/types';\n\nexport class CreatePoolStableV3 implements CreatePoolBase {\n    buildCall(input: CreatePoolV3StableInput): CreatePoolBuildCallOutput {\n        const callData = this.encodeCall(input);\n        return {\n            callData,\n            to: STABLE_POOL_FACTORY_BALANCER_V3[input.chainId],\n        };\n    }\n\n    private encodeCall(input: CreatePoolV3StableInput): Hex {\n        const sortedTokenConfigs = sortByAddress(input.tokens);\n\n        const roleAccounts: PoolRoleAccounts = {\n            pauseManager: input.pauseManager,\n            swapFeeManager: input.swapFeeManager,\n            poolCreator: zeroAddress, // balancer core pool types are not allowed to have a creator\n        };\n\n        const args = [\n            input.name || input.symbol,\n            input.symbol,\n            sortedTokenConfigs.map(\n                ({ address, rateProvider, tokenType, paysYieldFees }) => ({\n                    token: address,\n                    tokenType,\n                    rateProvider,\n                    paysYieldFees,\n                }),\n            ),\n            input.amplificationParameter,\n            roleAccounts,\n            input.swapFeePercentage,\n            input.poolHooksContract,\n            input.enableDonation,\n            input.disableUnbalancedLiquidity,\n            input.salt || getRandomBytes32(),\n        ] as const;\n\n        return encodeFunctionData({\n            abi: stablePoolFactoryAbi_V3,\n            functionName: 'create',\n            args,\n        });\n    }\n}\n","import { PoolType } from '@/types';\nimport {\n    CreatePoolBase,\n    CreatePoolBuildCallOutput,\n    CreatePoolInput,\n} from '../types';\nimport { CreatePoolWeightedV3 } from './weighted/createPoolWeighted';\nimport { CreatePoolStableV3 } from './stable/createPoolStable';\n\nexport class CreatePoolV3 implements CreatePoolBase {\n    private readonly createPoolTypes: Record<string, CreatePoolBase> = {};\n\n    constructor() {\n        this.createPoolTypes = {\n            [PoolType.Weighted]: new CreatePoolWeightedV3(),\n            [PoolType.Stable]: new CreatePoolStableV3(),\n        };\n    }\n\n    private getCreatePool(poolType: string): CreatePoolBase {\n        if (!this.createPoolTypes[poolType]) {\n            throw new Error('Unsupported pool type: ${poolType}');\n        }\n        return this.createPoolTypes[poolType];\n    }\n\n    public buildCall(input: CreatePoolInput): CreatePoolBuildCallOutput {\n        return this.getCreatePool(input.poolType).buildCall(input);\n    }\n}\n","import { InputValidator } from '../inputValidator/inputValidator';\nimport {\n    CreatePoolBase,\n    CreatePoolBuildCallOutput,\n    CreatePoolInput,\n} from './types';\nimport { CreatePoolV2 } from './createPoolV2';\nimport { CreatePoolV3 } from './createPoolV3';\n\nexport * from './types';\n\nexport class CreatePool implements CreatePoolBase {\n    private readonly inputValidator: InputValidator;\n\n    constructor() {\n        this.inputValidator = new InputValidator();\n    }\n\n    public buildCall(input: CreatePoolInput): CreatePoolBuildCallOutput {\n        this.inputValidator.validateCreatePool(input);\n        switch (input.protocolVersion) {\n            case 2:\n                return new CreatePoolV2().buildCall(input);\n            case 3:\n                return new CreatePoolV3().buildCall(input);\n        }\n    }\n}\n","import { encodeFunctionData } from 'viem';\nimport { TokenAmount } from '@/entities/tokenAmount';\n\nimport { Permit2 } from '@/entities/permit2Helper';\n\nimport { doInitBufferQuery } from './doInitBufferQuery';\nimport { BALANCER_BUFFER_ROUTER } from '@/utils';\nimport { balancerBufferRouterAbi, balancerRouterAbi } from '@/abi';\n\nimport {\n    InitBufferBuildCallInput,\n    InitBufferBuildCallOutput,\n    InitBufferInput,\n    InitBufferQueryOutput,\n} from './types';\n\nexport class InitBufferV3 {\n    async query(input: InitBufferInput): Promise<InitBufferQueryOutput> {\n        const { issuedShares } = await doInitBufferQuery(\n            input.rpcUrl,\n            input.chainId,\n            input.wrappedAmountIn.address,\n            input.underlyingAmountIn.rawAmount,\n            input.wrappedAmountIn.rawAmount,\n        );\n        const underlyingAmountIn = TokenAmount.fromInputAmount(\n            input.underlyingAmountIn,\n            input.chainId,\n        );\n        const wrappedAmountIn = TokenAmount.fromInputAmount(\n            input.wrappedAmountIn,\n            input.chainId,\n        );\n\n        const output: InitBufferQueryOutput = {\n            issuedShares,\n            underlyingAmountIn,\n            wrappedAmountIn,\n            chainId: input.chainId,\n            protocolVersion: 3,\n            to: BALANCER_BUFFER_ROUTER[input.chainId],\n        };\n\n        return output;\n    }\n\n    buildCall(input: InitBufferBuildCallInput): InitBufferBuildCallOutput {\n        const minIssuedShares = input.slippage.applyTo(input.issuedShares, -1);\n\n        const callData = encodeFunctionData({\n            abi: balancerBufferRouterAbi,\n            functionName: 'initializeBuffer',\n            args: [\n                input.wrappedAmountIn.token.address,\n                input.underlyingAmountIn.amount,\n                input.wrappedAmountIn.amount,\n                minIssuedShares,\n            ] as const,\n        });\n        return {\n            callData,\n            to: BALANCER_BUFFER_ROUTER[input.chainId],\n            value: 0n, // Default to 0 as native not supported\n            minIssuedShares,\n        };\n    }\n\n    public buildCallWithPermit2(\n        input: InitBufferBuildCallInput,\n        permit2: Permit2,\n    ): InitBufferBuildCallOutput {\n        // generate same calldata as buildCall\n        const buildCallOutput = this.buildCall(input);\n\n        const args = [\n            [],\n            [],\n            permit2.batch,\n            permit2.signature,\n            [buildCallOutput.callData],\n        ] as const;\n\n        const callData = encodeFunctionData({\n            abi: balancerRouterAbi,\n            functionName: 'permitBatchAndCall',\n            args,\n        });\n\n        return {\n            ...buildCallOutput,\n            callData,\n        };\n    }\n}\n","import { createPublicClient, http } from 'viem';\nimport { BALANCER_BUFFER_ROUTER, ChainId, CHAINS } from '@/utils';\nimport { Address } from '@/types';\nimport {\n    balancerBufferRouterAbi,\n    permit2Abi,\n    vaultExtensionAbi_V3,\n    vaultV3Abi,\n} from '@/abi';\n\nexport const doInitBufferQuery = async (\n    rpcUrl: string,\n    chainId: ChainId,\n    wrappedToken: Address,\n    exactAmountUnderlyingIn: bigint,\n    exactAmountWrappedIn: bigint,\n): Promise<{ issuedShares: bigint }> => {\n    const client = createPublicClient({\n        transport: http(rpcUrl),\n        chain: CHAINS[chainId],\n    });\n\n    const { result: issuedShares } = await client.simulateContract({\n        address: BALANCER_BUFFER_ROUTER[chainId],\n        abi: [\n            ...balancerBufferRouterAbi,\n            ...vaultV3Abi,\n            ...vaultExtensionAbi_V3,\n            ...permit2Abi,\n        ],\n        functionName: 'queryInitializeBuffer',\n        args: [wrappedToken, exactAmountUnderlyingIn, exactAmountWrappedIn],\n    });\n    return { issuedShares };\n};\n","import { Address, encodeFunctionData } from 'viem';\nimport { ComposableStableEncoder } from '../../../encoders/composableStable';\nimport { InitPoolAmountsComposableStable, PoolState } from '../../../types';\nimport {\n    getAmounts,\n    getSortedTokens,\n    parseAddLiquidityArgs,\n} from '../../../utils';\nimport {\n    InitPoolBase,\n    InitPoolBuildOutput,\n    InitPoolInputV2,\n} from '../../types';\nimport { vaultV2Abi } from '../../../../abi';\nimport { VAULT, MAX_UINT256 } from '../../../../utils';\nimport { Token } from '@/entities/token';\nimport { getValue } from '@/entities/utils/getValue';\nimport { TokenAmount } from '@/entities/tokenAmount';\n\nexport class InitPoolComposableStable implements InitPoolBase {\n    buildCall(\n        input: InitPoolInputV2,\n        poolState: PoolState,\n    ): InitPoolBuildOutput {\n        const sortedTokens = getSortedTokens(poolState.tokens, input.chainId);\n        const amounts = this.getAmounts(input, poolState.address, sortedTokens);\n\n        const userData =\n            ComposableStableEncoder.encodeInitPoolUserData(amounts);\n\n        const { args } = parseAddLiquidityArgs({\n            ...input,\n            poolId: poolState.id,\n            sortedTokens,\n            maxAmountsIn: amounts.maxAmountsIn,\n            userData,\n            fromInternalBalance: input.fromInternalBalance ?? false,\n            wethIsEth: !!input.wethIsEth,\n        });\n        const callData = encodeFunctionData({\n            abi: vaultV2Abi,\n            functionName: 'joinPool',\n            args,\n        });\n\n        const amountsIn = input.amountsIn.map((a) => {\n            const token = new Token(input.chainId, a.address, a.decimals);\n            return TokenAmount.fromRawAmount(token, a.rawAmount);\n        });\n\n        return {\n            callData,\n            to: VAULT[input.chainId] as Address,\n            value: getValue(amountsIn, !!input.wethIsEth),\n        };\n    }\n\n    private getAmounts(\n        input: InitPoolInputV2,\n        poolAddress: Address,\n        poolTokens: Token[],\n    ): InitPoolAmountsComposableStable {\n        const bptIndex = poolTokens.findIndex((t) => t.address === poolAddress);\n        const maxAmountsIn = getAmounts(poolTokens, [\n            ...input.amountsIn.slice(0, bptIndex),\n            {\n                address: poolAddress,\n                decimals: 18,\n                rawAmount: MAX_UINT256,\n            },\n            ...input.amountsIn.slice(bptIndex),\n        ]);\n        const amountsIn = getAmounts(poolTokens, [\n            ...input.amountsIn.slice(0, bptIndex),\n            {\n                address: poolAddress,\n                decimals: 18,\n                rawAmount: BigInt(0),\n            },\n            ...input.amountsIn.slice(bptIndex),\n        ]);\n        return {\n            maxAmountsIn,\n            amountsIn,\n        };\n    }\n}\n","import { Address, encodeFunctionData } from 'viem';\nimport { InitPoolAmounts, PoolState } from '../../../types';\nimport {\n    InitPoolBase,\n    InitPoolBuildOutput,\n    InitPoolInputV2,\n} from '../../types';\nimport { VAULT } from '../../../../utils';\nimport { vaultV2Abi } from '../../../../abi';\nimport {\n    getAmounts,\n    getSortedTokens,\n    parseAddLiquidityArgs,\n} from '../../../utils';\nimport { Token } from '../../../token';\nimport { WeightedEncoder } from '../../../encoders';\nimport { TokenAmount } from '@/entities/tokenAmount';\nimport { getValue } from '@/entities/utils/getValue';\n\nexport class InitPoolWeighted implements InitPoolBase {\n    buildCall(\n        input: InitPoolInputV2,\n        poolState: PoolState,\n    ): InitPoolBuildOutput {\n        const sortedTokens = getSortedTokens(poolState.tokens, input.chainId);\n        const amounts = this.getAmounts(input, sortedTokens);\n        const userData = WeightedEncoder.encodeInitPoolUserData(amounts);\n        const { args } = parseAddLiquidityArgs({\n            ...input,\n            poolId: poolState.id,\n            sortedTokens,\n            maxAmountsIn: amounts.maxAmountsIn,\n            userData,\n            fromInternalBalance: input.fromInternalBalance ?? false,\n        });\n\n        const callData = encodeFunctionData({\n            abi: vaultV2Abi,\n            functionName: 'joinPool',\n            args,\n        });\n\n        const amountsIn = input.amountsIn.map((a) => {\n            const token = new Token(input.chainId, a.address, a.decimals);\n            return TokenAmount.fromRawAmount(token, a.rawAmount);\n        });\n\n        return {\n            callData,\n            to: VAULT[input.chainId] as Address,\n            value: getValue(amountsIn, !!input.wethIsEth),\n        };\n    }\n\n    private getAmounts(\n        input: InitPoolInputV2,\n        poolTokens: Token[],\n    ): InitPoolAmounts {\n        return {\n            maxAmountsIn: getAmounts(poolTokens, input.amountsIn),\n        };\n    }\n}\n","import { PoolState } from '@/entities/types';\nimport { PoolType } from '@/types';\n\nimport { InitPoolComposableStable } from './composableStable/initPoolComposableStable';\nimport {\n    InitPoolBase,\n    InitPoolBuildOutput,\n    InitPoolConfig,\n    InitPoolInputV2,\n} from '../types';\nimport { InitPoolWeighted } from './weighted/initPoolWeighted';\n\nexport class InitPoolV2 implements InitPoolBase {\n    initPoolTypes: Record<string, InitPoolBase> = {};\n\n    constructor(config?: InitPoolConfig) {\n        const { initPoolTypes: customAddLiquidityInitTypes } = config || {};\n        this.initPoolTypes = {\n            [PoolType.Weighted]: new InitPoolWeighted(),\n            [PoolType.ComposableStable]: new InitPoolComposableStable(),\n            ...customAddLiquidityInitTypes,\n        };\n    }\n\n    getInitPool(poolType: string): InitPoolBase {\n        if (!this.initPoolTypes[poolType]) {\n            throw new Error('Unsupported pool type: ${poolType}');\n        }\n        return this.initPoolTypes[poolType];\n    }\n\n    buildCall(\n        input: InitPoolInputV2,\n        poolState: PoolState,\n    ): InitPoolBuildOutput {\n        return this.getInitPool(poolState.type).buildCall(input, poolState);\n    }\n}\n","import { balancerRouterAbi } from '@/abi';\nimport { PoolState } from '../types';\nimport { InitPoolBase, InitPoolBuildOutput, InitPoolInputV3 } from './types';\nimport { BALANCER_ROUTER } from '@/utils';\nimport { encodeFunctionData, Address } from 'viem';\nimport { getSortedTokens, parseInitializeArgs, getAmounts } from '../utils';\nimport { Token } from '../token';\nimport { TokenAmount } from '../tokenAmount';\nimport { getValue } from '../utils/getValue';\n\nexport class InitPoolV3 implements InitPoolBase {\n    buildCall(\n        input: InitPoolInputV3,\n        poolState: PoolState,\n    ): InitPoolBuildOutput {\n        const sortedTokens = getSortedTokens(poolState.tokens, input.chainId);\n        const { exactAmountsIn } = this.getAmounts(input, sortedTokens);\n        const { args } = parseInitializeArgs({\n            ...input,\n            exactAmountsIn,\n            poolAddress: poolState.address,\n            sortedTokens,\n        });\n\n        const callData = encodeFunctionData({\n            abi: balancerRouterAbi,\n            functionName: 'initialize',\n            args,\n        });\n\n        const amountsIn = input.amountsIn.map((a) => {\n            const token = new Token(input.chainId, a.address, a.decimals);\n            return TokenAmount.fromRawAmount(token, a.rawAmount);\n        });\n\n        return {\n            callData,\n            to: BALANCER_ROUTER[input.chainId] as Address,\n            value: getValue(amountsIn, !!input.wethIsEth),\n        };\n    }\n\n    private getAmounts(\n        input: InitPoolInputV3,\n        tokens: Token[],\n    ): { exactAmountsIn: bigint[] } {\n        return {\n            exactAmountsIn: getAmounts(tokens, input.amountsIn),\n        };\n    }\n}\n","import { InputValidator } from '../inputValidator/inputValidator';\nimport { PoolState } from '../types';\nimport {\n    InitPoolBuildOutput,\n    InitPoolConfig,\n    InitPoolInput,\n    InitPoolInputV2,\n    InitPoolInputV3,\n} from './types';\nimport { InitPoolV2 } from './initPoolV2';\nimport { InitPoolV3 } from './initPoolV3';\n\nexport * from './types';\n\nexport class InitPool {\n    inputValidator: InputValidator = new InputValidator();\n\n    constructor(public config?: InitPoolConfig) {}\n\n    buildCall(input: InitPoolInput, poolState: PoolState): InitPoolBuildOutput {\n        this.inputValidator.validateInitPool(input, poolState);\n        switch (poolState.protocolVersion) {\n            case 2:\n                return new InitPoolV2().buildCall(\n                    input as InitPoolInputV2,\n                    poolState,\n                );\n            case 3:\n                return new InitPoolV3().buildCall(\n                    input as InitPoolInputV3,\n                    poolState,\n                );\n            default:\n                throw Error(\n                    `SDK does not support init for vault version: ${poolState.protocolVersion}`,\n                );\n        }\n    }\n}\n","import { Address } from '@/types';\nimport { PublicWalletClient } from '@/utils';\n\nexport const getNonce = async (\n    client: PublicWalletClient,\n    token: Address,\n    owner: Address,\n) => {\n    return await client.readContract({\n        abi: [\n            {\n                inputs: [\n                    { internalType: 'address', name: 'owner', type: 'address' },\n                ],\n                name: 'nonces',\n                outputs: [\n                    { internalType: 'uint256', name: '', type: 'uint256' },\n                ],\n                stateMutability: 'view',\n                type: 'function',\n            },\n        ],\n        address: token,\n        functionName: 'nonces',\n        args: [owner],\n    });\n};\n","import {\n    MAX_UINT256,\n    removeLiquiditySingleTokenExactInShouldHaveTokenOutIndexError,\n} from '@/utils';\nimport { Token } from '../token';\nimport { RemoveLiquidityAmounts } from '../types';\nimport { getAmounts } from '../utils';\nimport {\n    RemoveLiquidityBuildCallInput,\n    RemoveLiquidityInput,\n    RemoveLiquidityKind,\n} from './types';\n\nexport const getAmountsQuery = (\n    tokens: Token[],\n    input: RemoveLiquidityInput,\n    bptIndex = -1,\n): RemoveLiquidityAmounts => {\n    switch (input.kind) {\n        case RemoveLiquidityKind.Unbalanced:\n            return {\n                minAmountsOut: getAmounts(tokens, input.amountsOut),\n                tokenOutIndex: undefined,\n                maxBptAmountIn: MAX_UINT256, // maxAmountIn set to max when querying\n            };\n        case RemoveLiquidityKind.SingleTokenExactOut:\n            return {\n                minAmountsOut: getAmounts(tokens, [input.amountOut]),\n                tokenOutIndex: tokens\n                    .filter((_, index) => index !== bptIndex)\n                    .findIndex((t) => t.isSameAddress(input.amountOut.address)),\n                maxBptAmountIn: MAX_UINT256, // maxAmountIn set to max when querying\n            };\n        case RemoveLiquidityKind.SingleTokenExactIn:\n            return {\n                minAmountsOut: Array(tokens.length).fill(1n), // minAmountsOut set to 1 wei when querying\n                tokenOutIndex: tokens\n                    .filter((_, index) => index !== bptIndex)\n                    .findIndex((t) => t.isSameAddress(input.tokenOut)),\n                maxBptAmountIn: input.bptIn.rawAmount,\n            };\n        case RemoveLiquidityKind.Proportional:\n            return {\n                minAmountsOut: Array(tokens.length).fill(1n), // minAmountsOut set to 1 wei when querying\n                tokenOutIndex: undefined,\n                maxBptAmountIn: input.bptIn.rawAmount,\n            };\n        case RemoveLiquidityKind.Recovery:\n            return {\n                minAmountsOut: Array(tokens.length).fill(1n), // minAmountsOut set to 1 wei when querying\n                tokenOutIndex: undefined,\n                maxBptAmountIn: input.bptIn.rawAmount,\n            };\n    }\n};\n\nexport const getAmountsCall = (\n    input: RemoveLiquidityBuildCallInput,\n): RemoveLiquidityAmounts => {\n    switch (input.removeLiquidityKind) {\n        case RemoveLiquidityKind.Unbalanced:\n        case RemoveLiquidityKind.SingleTokenExactOut:\n            return {\n                minAmountsOut: input.amountsOut.map((a) => a.amount),\n                tokenOutIndex: input.tokenOutIndex,\n                maxBptAmountIn: input.slippage.applyTo(input.bptIn.amount),\n            };\n        case RemoveLiquidityKind.SingleTokenExactIn:\n            if (input.tokenOutIndex === undefined) {\n                throw removeLiquiditySingleTokenExactInShouldHaveTokenOutIndexError;\n            }\n            return {\n                minAmountsOut: input.amountsOut.map((a) =>\n                    input.slippage.applyTo(a.amount, -1),\n                ),\n                tokenOutIndex: input.tokenOutIndex,\n                maxBptAmountIn: input.bptIn.amount,\n            };\n        case RemoveLiquidityKind.Proportional:\n        case RemoveLiquidityKind.Recovery:\n            return {\n                minAmountsOut: input.amountsOut.map((a) =>\n                    input.slippage.applyTo(a.amount, -1),\n                ),\n                tokenOutIndex: input.tokenOutIndex,\n                maxBptAmountIn: input.bptIn.amount,\n            };\n    }\n};\n","import { weightedPoolAbi_V3 } from '@/abi';\nimport { Hex } from '@/types';\nimport {\n    BALANCER_COMPOSITE_LIQUIDITY_ROUTER,\n    BALANCER_ROUTER,\n    ChainId,\n    MAX_UINT256,\n    PublicWalletClient,\n} from '@/utils';\nimport { getNonce } from './helper';\nimport { RemoveLiquidityBaseBuildCallInput } from '../removeLiquidity/types';\nimport { getAmountsCall } from '../removeLiquidity/helper';\nimport { TokenAmount } from '../tokenAmount';\n\ntype PermitApproval = {\n    /** Address of the token to approve */\n    token: Hex;\n    /** Owner of the tokens. Usually the currently connected address. */\n    owner: Hex;\n    /** Address to grant allowance to */\n    spender: Hex;\n    /** Amount to approve */\n    amount: bigint;\n    /** Nonce of the permit */\n    nonce: bigint;\n    /** Expiration of this approval, in SECONDS */\n    deadline: bigint;\n};\n\nexport type Permit = {\n    batch: PermitApproval[];\n    signatures: Hex[];\n};\n\nexport class PermitHelper {\n    static signRemoveLiquidityApproval = async (\n        input: RemoveLiquidityBaseBuildCallInput & {\n            client: PublicWalletClient;\n            owner: Hex;\n            nonce?: bigint;\n            deadline?: bigint;\n        },\n    ): Promise<Permit> => {\n        const amounts = getAmountsCall(input);\n        const nonce =\n            input.nonce ??\n            (await getNonce(\n                input.client,\n                input.bptIn.token.address,\n                input.owner,\n            ));\n        const { permitApproval, permitSignature } = await signPermit(\n            input.client,\n            input.bptIn.token.address,\n            input.owner,\n            BALANCER_ROUTER[input.chainId],\n            nonce,\n            amounts.maxBptAmountIn,\n            input.deadline,\n        );\n        return { batch: [permitApproval], signatures: [permitSignature] };\n    };\n\n    static signRemoveLiquidityNestedApproval = async (input: {\n        bptAmountIn: TokenAmount;\n        chainId: ChainId;\n        client: PublicWalletClient;\n        owner: Hex;\n        nonce?: bigint;\n        deadline?: bigint;\n    }): Promise<Permit> => {\n        const nonce =\n            input.nonce ??\n            (await getNonce(\n                input.client,\n                input.bptAmountIn.token.address,\n                input.owner,\n            ));\n        const { permitApproval, permitSignature } = await signPermit(\n            input.client,\n            input.bptAmountIn.token.address,\n            input.owner,\n            BALANCER_COMPOSITE_LIQUIDITY_ROUTER[input.chainId],\n            nonce,\n            input.bptAmountIn.amount, // maxBptIn\n            input.deadline,\n        );\n        return { batch: [permitApproval], signatures: [permitSignature] };\n    };\n\n    static signRemoveLiquidityBoostedApproval = async (\n        input: RemoveLiquidityBaseBuildCallInput & {\n            client: PublicWalletClient;\n            owner: Hex;\n            nonce?: bigint;\n            deadline?: bigint;\n        },\n    ): Promise<Permit> => {\n        const amounts = getAmountsCall(input);\n        const nonce =\n            input.nonce ??\n            (await getNonce(\n                input.client,\n                input.bptIn.token.address,\n                input.owner,\n            ));\n        const { permitApproval, permitSignature } = await signPermit(\n            input.client,\n            input.bptIn.token.address,\n            input.owner,\n            BALANCER_COMPOSITE_LIQUIDITY_ROUTER[input.chainId],\n            nonce,\n            amounts.maxBptAmountIn,\n            input.deadline,\n        );\n        return { batch: [permitApproval], signatures: [permitSignature] };\n    };\n}\n\n/**\n * Signs a permit for a given ERC-2612 ERC20 token using the specified parameters.\n *\n * @param { Client & WalletActions & PublicActions } client - Wallet client to invoke for signing the permit message\n */\nconst signPermit = async (\n    client: PublicWalletClient,\n    token: Hex,\n    owner: Hex,\n    spender: Hex,\n    nonce: bigint,\n    amount = MAX_UINT256,\n    deadline = MAX_UINT256,\n): Promise<{\n    permitApproval: PermitApproval;\n    permitSignature: Hex;\n}> => {\n    const types = {\n        Permit: [\n            { name: 'owner', type: 'address' },\n            { name: 'spender', type: 'address' },\n            { name: 'value', type: 'uint256' },\n            { name: 'nonce', type: 'uint256' },\n            { name: 'deadline', type: 'uint256' },\n        ],\n    };\n\n    const message = {\n        owner,\n        spender,\n        value: amount,\n        nonce,\n        deadline,\n    };\n\n    const domain = await getDomain(client, token);\n    const permitSignature = await client.signTypedData({\n        account: owner,\n        message,\n        domain,\n        primaryType: 'Permit',\n        types,\n    });\n    const permitApproval = {\n        token,\n        owner,\n        spender,\n        amount,\n        nonce,\n        deadline,\n    };\n    return { permitApproval, permitSignature };\n};\n\nconst getDomain = async (client: PublicWalletClient, token: Hex) => {\n    const [, name, version, chainId, verifyingContract, , ,] =\n        await client.readContract({\n            abi: weightedPoolAbi_V3,\n            address: token,\n            functionName: 'eip712Domain',\n            args: [],\n        });\n\n    const domain = {\n        name,\n        version,\n        chainId: Number(chainId),\n        verifyingContract,\n    };\n\n    return domain;\n};\n","import { Address, TypedData, TypedDataDomain, hashTypedData } from 'viem';\n\nimport {\n    MaxSigDeadline,\n    MaxOrderedNonce,\n    MaxAllowanceTransferAmount,\n    MaxAllowanceExpiration,\n} from './constants';\nimport { permit2Domain } from './domain';\n\nexport interface PermitDetails {\n    token: Address;\n    amount: bigint;\n    expiration: number;\n    nonce: number;\n}\n\nexport interface PermitSingle {\n    details: PermitDetails;\n    spender: Address;\n    sigDeadline: bigint;\n}\n\nexport interface Permit2Batch {\n    details: PermitDetails[];\n    spender: Address;\n    sigDeadline: bigint;\n}\n\nexport type PermitSingleData = {\n    domain: TypedDataDomain;\n    types: TypedData;\n    values: PermitSingle;\n};\n\nexport type PermitBatchData = {\n    domain: TypedDataDomain;\n    types: TypedData;\n    values: Permit2Batch;\n};\n\nconst PERMIT_DETAILS = [\n    { name: 'token', type: 'address' },\n    { name: 'amount', type: 'uint160' },\n    { name: 'expiration', type: 'uint48' },\n    { name: 'nonce', type: 'uint48' },\n] as const;\n\nconst PERMIT_TYPES = {\n    PermitDetails: PERMIT_DETAILS,\n    PermitSingle: [\n        { name: 'details', type: 'PermitDetails' },\n        { name: 'spender', type: 'address' },\n        { name: 'sigDeadline', type: 'uint256' },\n    ],\n} as const;\n\nconst PERMIT_BATCH_TYPES = {\n    PermitDetails: PERMIT_DETAILS,\n    PermitBatch: [\n        { name: 'details', type: 'PermitDetails[]' },\n        { name: 'spender', type: 'address' },\n        { name: 'sigDeadline', type: 'uint256' },\n    ],\n} as const;\n\nfunction isPermit(permit: PermitSingle | Permit2Batch): permit is PermitSingle {\n    return !Array.isArray(permit.details);\n}\n\nexport abstract class AllowanceTransfer {\n    /**\n     * Cannot be constructed.\n     */\n    private constructor() {}\n\n    // return the data to be sent in a eth_signTypedData RPC call\n    // for signing the given permit data\n    public static getPermitSingleData(\n        permit: PermitSingle,\n        permit2Address: Address,\n        chainId: number,\n    ) {\n        if (permit.sigDeadline > MaxSigDeadline) {\n            throw new Error('SIG_DEADLINE_OUT_OF_RANGE');\n        }\n\n        const domain = permit2Domain(permit2Address, chainId);\n        validatePermitDetails(permit.details);\n\n        return {\n            domain,\n            values: permit,\n        };\n    }\n\n    // return the data to be sent in a eth_signTypedData RPC call\n    // for signing the given permit data\n    public static getPermitBatchData(\n        permit: Permit2Batch,\n        permit2Address: Address,\n        chainId: number,\n    ) {\n        if (permit.sigDeadline > MaxSigDeadline) {\n            throw new Error('SIG_DEADLINE_OUT_OF_RANGE');\n        }\n\n        const domain = permit2Domain(permit2Address, chainId);\n        permit.details.forEach(validatePermitDetails);\n\n        return {\n            domain,\n            values: permit,\n        };\n    }\n\n    // return the data to be sent in a eth_signTypedData RPC call\n    // for signing the given permit data\n    public static getPermitData(\n        permit: PermitSingle | Permit2Batch,\n        permit2Address: Address,\n        chainId: number,\n    ): PermitSingleData | PermitBatchData {\n        if (permit.sigDeadline > MaxSigDeadline) {\n            throw new Error('SIG_DEADLINE_OUT_OF_RANGE');\n        }\n\n        const domain = permit2Domain(permit2Address, chainId);\n        if (isPermit(permit)) {\n            validatePermitDetails(permit.details);\n            return {\n                domain,\n                types: PERMIT_TYPES,\n                values: permit,\n            };\n            // biome-ignore lint/style/noUselessElse: <explanation>\n        } else {\n            permit.details.forEach(validatePermitDetails);\n            return {\n                domain,\n                types: PERMIT_BATCH_TYPES,\n                values: permit,\n            };\n        }\n    }\n\n    public static hash(\n        permit: PermitSingle | Permit2Batch,\n        permit2Address: Address,\n        chainId: number,\n    ): string {\n        if (isPermit(permit)) {\n            const { domain, values } = AllowanceTransfer.getPermitSingleData(\n                permit,\n                permit2Address,\n                chainId,\n            );\n\n            return hashTypedData({\n                domain,\n                types: PERMIT_TYPES,\n                primaryType: 'PermitSingle',\n                message: values,\n            });\n            // biome-ignore lint/style/noUselessElse: <explanation>\n        } else {\n            const { domain, values } = AllowanceTransfer.getPermitBatchData(\n                permit,\n                permit2Address,\n                chainId,\n            );\n\n            return hashTypedData({\n                domain,\n                types: PERMIT_BATCH_TYPES,\n                primaryType: 'PermitBatch',\n                message: values,\n            });\n        }\n    }\n}\n\nfunction validatePermitDetails(details: PermitDetails) {\n    if (details.nonce > MaxOrderedNonce) {\n        throw new Error('NONCE_OUT_OF_RANGE');\n    }\n    if (details.amount > MaxAllowanceTransferAmount) {\n        throw new Error('AMOUNT_OUT_OF_RANGE');\n    }\n    if (details.expiration > MaxAllowanceExpiration) {\n        throw new Error('EXPIRATION_OUT_OF_RANGE');\n    }\n}\n","export const MaxUint48 = BigInt('0xffffffffffff');\nexport const MaxUint160 = BigInt('0xffffffffffffffffffffffffffffffffffffffff');\nexport const MaxUint256 = BigInt(\n    '0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff',\n);\n\n// alias max types for their usages\n// allowance transfer types\nexport const MaxAllowanceTransferAmount = MaxUint160;\nexport const MaxAllowanceExpiration = MaxUint48;\nexport const MaxOrderedNonce = MaxUint48;\n\n// signature transfer types\nexport const MaxSignatureTransferAmount = MaxUint256;\nexport const MaxUnorderedNonce = MaxUint256;\nexport const MaxSigDeadline = MaxUint256;\n\nexport const InstantExpiration = BigInt(0);\n","import { Address, TypedDataDomain } from 'viem';\n\nconst PERMIT2_DOMAIN_NAME = 'Permit2';\n\nexport function permit2Domain(\n    permit2Address: Address,\n    chainId: number,\n): TypedDataDomain {\n    return {\n        name: PERMIT2_DOMAIN_NAME,\n        chainId,\n        verifyingContract: permit2Address,\n    };\n}\n","import { SwapKind } from '@/types';\nimport { Slippage } from '../slippage';\nimport { TokenAmount } from '../tokenAmount';\nimport { QueryOutputBase } from './types';\n\n/**\n * Apply slippage to expectedAmount. GivenIn: Remove to give minOut. GivenOut: Add to give maxIn.\n * @param slippage\n * @param swapKind\n * @param expectedAmount\n * @returns\n */\nexport function getLimitAmount(\n    slippage: Slippage,\n    swapKind: SwapKind,\n    expectedAmount: TokenAmount,\n): TokenAmount {\n    let limitAmount: bigint;\n    if (swapKind === SwapKind.GivenIn) {\n        limitAmount = slippage.applyTo(expectedAmount.amount, -1);\n    } else {\n        limitAmount = slippage.applyTo(expectedAmount.amount);\n    }\n    return TokenAmount.fromRawAmount(expectedAmount.token, limitAmount);\n}\n\n/**\n * Apply slippage to pathAmounts. GivenIn: Remove to give minOut. GivenOut: Add to give maxIn.\n * @param slippage\n * @param expected\n * @returns\n */\nexport function getPathLimits(\n    slippage: Slippage,\n    expected: QueryOutputBase,\n    maxAmount: bigint,\n): bigint[] | undefined {\n    if (!expected.pathAmounts) return undefined;\n    let pathAmounts: bigint[];\n    let total = 0n;\n    if (expected.swapKind === SwapKind.GivenIn) {\n        pathAmounts = expected.pathAmounts.map((a) => {\n            const limit = slippage.applyTo(a, -1);\n            total = total + limit;\n            return limit;\n        });\n    } else {\n        pathAmounts = expected.pathAmounts.map((a) => {\n            const limit = slippage.applyTo(a);\n            total = total + limit;\n            return limit;\n        });\n    }\n    // Slippage can lead to rounding diff compared to total so this handles dust diff\n    const diff = maxAmount - total;\n    pathAmounts[0] = pathAmounts[0] + diff;\n    return pathAmounts;\n}\n","import { Address, Hex, SwapKind } from '@/types';\nimport { Client, PublicActions, WalletActions } from 'viem';\nimport {\n    AllowanceTransfer,\n    Permit2Batch,\n    PermitDetails,\n} from './allowanceTransfer';\nimport {\n    BALANCER_BATCH_ROUTER,\n    BALANCER_BUFFER_ROUTER,\n    BALANCER_COMPOSITE_LIQUIDITY_ROUTER,\n    BALANCER_ROUTER,\n    ChainId,\n    PERMIT2,\n    PublicWalletClient,\n} from '@/utils';\nimport {\n    MaxAllowanceExpiration,\n    MaxAllowanceTransferAmount,\n    MaxSigDeadline,\n} from './constants';\nimport { AddLiquidityBaseBuildCallInput } from '../addLiquidity/types';\nimport {\n    ExactInQueryOutput,\n    ExactOutQueryOutput,\n    SwapBuildCallInputBase,\n} from '../swap';\nimport { getLimitAmount } from '../swap/limits';\nimport { TokenAmount } from '../tokenAmount';\nimport { permit2Abi } from '@/abi';\nimport { getAmountsCall } from '../addLiquidity/helpers';\nimport { AddLiquidityBufferBuildCallInput } from '../addLiquidityBuffer/types';\nimport { InitBufferBuildCallInput } from '../initBuffer/types';\n\nexport * from './allowanceTransfer';\nexport * from './constants';\n\nexport type Permit2 = {\n    batch: Permit2Batch;\n    signature: Hex;\n};\n\nexport class Permit2Helper {\n    static async signAddLiquidityApproval(\n        input: AddLiquidityBaseBuildCallInput & {\n            client: PublicWalletClient;\n            owner: Address;\n            nonces?: number[];\n            expirations?: number[];\n        },\n    ): Promise<Permit2> {\n        if (input.nonces && input.nonces.length !== input.amountsIn.length) {\n            throw new Error(\"Nonces length doesn't match amountsIn length\");\n        }\n        if (\n            input.expirations &&\n            input.expirations.length !== input.amountsIn.length\n        ) {\n            throw new Error(\n                \"Expirations length doesn't match amountsIn length\",\n            );\n        }\n        const amounts = getAmountsCall(input);\n        const spender = BALANCER_ROUTER[input.chainId];\n        const details: PermitDetails[] = [];\n        for (let i = 0; i < input.amountsIn.length; i++) {\n            details.push(\n                await getDetails(\n                    input.client,\n                    input.amountsIn[i].token.address,\n                    input.owner,\n                    spender,\n                    amounts.maxAmountsIn[i],\n                    input.expirations ? input.expirations[i] : undefined,\n                    input.nonces ? input.nonces[i] : undefined,\n                ),\n            );\n        }\n        return signPermit2(input.client, input.owner, spender, details);\n    }\n\n    static async signAddLiquidityNestedApproval(input: {\n        amountsIn: TokenAmount[];\n        chainId: ChainId;\n        client: PublicWalletClient;\n        owner: Address;\n        nonces?: number[];\n        expirations?: number[];\n    }): Promise<Permit2> {\n        if (input.nonces && input.nonces.length !== input.amountsIn.length) {\n            throw new Error(\"Nonces length doesn't match amountsIn length\");\n        }\n        if (\n            input.expirations &&\n            input.expirations.length !== input.amountsIn.length\n        ) {\n            throw new Error(\n                \"Expirations length doesn't match amountsIn length\",\n            );\n        }\n        const maxAmountsIn = input.amountsIn.map((a) => a.amount);\n        const spender = BALANCER_COMPOSITE_LIQUIDITY_ROUTER[input.chainId];\n        const details: PermitDetails[] = [];\n        for (let i = 0; i < input.amountsIn.length; i++) {\n            details.push(\n                await getDetails(\n                    input.client,\n                    input.amountsIn[i].token.address,\n                    input.owner,\n                    spender,\n                    maxAmountsIn[i],\n                    input.expirations ? input.expirations[i] : undefined,\n                    input.nonces ? input.nonces[i] : undefined,\n                ),\n            );\n        }\n        return signPermit2(input.client, input.owner, spender, details);\n    }\n\n    static async signAddLiquidityBoostedApproval(\n        input: AddLiquidityBaseBuildCallInput & {\n            client: PublicWalletClient;\n            owner: Address;\n            nonces?: number[];\n            expirations?: number[];\n        },\n    ): Promise<Permit2> {\n        if (input.nonces && input.nonces.length !== input.amountsIn.length) {\n            throw new Error(\"Nonces length doesn't match amountsIn length\");\n        }\n        if (\n            input.expirations &&\n            input.expirations.length !== input.amountsIn.length\n        ) {\n            throw new Error(\n                \"Expirations length doesn't match amountsIn length\",\n            );\n        }\n        const amounts = getAmountsCall(input);\n        const spender = BALANCER_COMPOSITE_LIQUIDITY_ROUTER[input.chainId];\n        const details: PermitDetails[] = [];\n\n        for (let i = 0; i < input.amountsIn.length; i++) {\n            details.push(\n                await getDetails(\n                    input.client,\n                    input.amountsIn[i].token.address,\n                    input.owner,\n                    spender,\n                    amounts.maxAmountsIn[i],\n                    input.expirations ? input.expirations[i] : undefined,\n                    input.nonces ? input.nonces[i] : undefined,\n                ),\n            );\n        }\n        return signPermit2(input.client, input.owner, spender, details);\n    }\n\n    static async signAddLiquidityBufferApproval(\n        input: AddLiquidityBufferBuildCallInput & {\n            client: PublicWalletClient;\n            owner: Address;\n            nonces?: number[];\n            expirations?: number[];\n        },\n    ): Promise<Permit2> {\n        if (input.nonces && input.nonces.length !== 2) {\n            throw new Error(\"Nonces length doesn't match amountsIn length\");\n        }\n        if (input.expirations && input.expirations.length !== 2) {\n            throw new Error(\n                \"Expirations length doesn't match amountsIn length\",\n            );\n        }\n        const spender = BALANCER_BUFFER_ROUTER[input.chainId];\n        const details: PermitDetails[] = [\n            await getDetails(\n                input.client,\n                input.wrappedAmountIn.token.address,\n                input.owner,\n                spender,\n                input.wrappedAmountIn.amount,\n                input.expirations ? input.expirations[0] : undefined,\n                input.nonces ? input.nonces[0] : undefined,\n            ),\n            await getDetails(\n                input.client,\n                input.underlyingAmountIn.token.address,\n                input.owner,\n                spender,\n                input.underlyingAmountIn.amount,\n                input.expirations ? input.expirations[1] : undefined,\n                input.nonces ? input.nonces[1] : undefined,\n            ),\n        ];\n        return signPermit2(input.client, input.owner, spender, details);\n    }\n\n    static async signInitBufferApproval(\n        input: InitBufferBuildCallInput & {\n            client: PublicWalletClient;\n            owner: Address;\n            nonces?: number[];\n            expirations?: number[];\n        },\n    ): Promise<Permit2> {\n        if (input.nonces && input.nonces.length !== 2) {\n            throw new Error(\"Nonces length doesn't match amountsIn length\");\n        }\n        if (input.expirations && input.expirations.length !== 2) {\n            throw new Error(\n                \"Expirations length doesn't match amountsIn length\",\n            );\n        }\n        const spender = BALANCER_BUFFER_ROUTER[input.chainId];\n        const details: PermitDetails[] = [\n            await getDetails(\n                input.client,\n                input.wrappedAmountIn.token.address,\n                input.owner,\n                spender,\n                input.wrappedAmountIn.amount,\n                input.expirations ? input.expirations[0] : undefined,\n                input.nonces ? input.nonces[0] : undefined,\n            ),\n            await getDetails(\n                input.client,\n                input.underlyingAmountIn.token.address,\n                input.owner,\n                spender,\n                input.underlyingAmountIn.amount,\n                input.expirations ? input.expirations[1] : undefined,\n                input.nonces ? input.nonces[1] : undefined,\n            ),\n        ];\n        return signPermit2(input.client, input.owner, spender, details);\n    }\n\n    static async signSwapApproval(\n        input: SwapBuildCallInputBase & {\n            client: PublicWalletClient;\n            owner: Address;\n            nonce?: number;\n            expiration?: number;\n        },\n    ): Promise<Permit2> {\n        // get maxAmountIn\n        let maxAmountIn: TokenAmount;\n        if (input.queryOutput.swapKind === SwapKind.GivenIn) {\n            const queryOutput = input.queryOutput as ExactInQueryOutput;\n            maxAmountIn = queryOutput.amountIn;\n        } else {\n            const queryOutput = input.queryOutput as ExactOutQueryOutput;\n            maxAmountIn = getLimitAmount(\n                input.slippage,\n                SwapKind.GivenOut,\n                queryOutput.expectedAmountIn,\n            );\n        }\n\n        const chainId = await input.client.getChainId();\n        const spender = input.queryOutput.pathAmounts\n            ? BALANCER_BATCH_ROUTER[chainId]\n            : BALANCER_ROUTER[chainId];\n\n        // build permit details\n        const details: PermitDetails[] = [\n            await getDetails(\n                input.client,\n                maxAmountIn.token.address,\n                input.owner,\n                spender,\n                maxAmountIn.amount,\n                input.expiration,\n                input.nonce,\n            ),\n        ];\n\n        // sign permit2\n        const permit2 = await signPermit2(\n            input.client,\n            input.owner,\n            spender,\n            details,\n        );\n\n        return permit2;\n    }\n}\n\nconst signPermit2 = async (\n    client: Client & WalletActions,\n    owner: Address,\n    spender: Address,\n    details: PermitDetails[],\n    sigDeadline = MaxSigDeadline,\n): Promise<Permit2> => {\n    const batch: Permit2Batch = {\n        details,\n        spender,\n        sigDeadline,\n    };\n\n    const chainId = await client.getChainId();\n    const { domain, types, values } = AllowanceTransfer.getPermitData(\n        batch,\n        PERMIT2[chainId],\n        chainId,\n    );\n\n    const signature = await client.signTypedData({\n        account: owner,\n        message: {\n            ...values,\n        },\n        domain,\n        primaryType: 'PermitBatch',\n        types,\n    });\n    return { batch, signature };\n};\n\nconst getDetails = async (\n    client: Client & PublicActions,\n    token: Address,\n    owner: Address,\n    spender: Address,\n    amount = MaxAllowanceTransferAmount,\n    expiration = Number(MaxAllowanceExpiration),\n    nonce?: number,\n) => {\n    let _nonce: number;\n    if (nonce === undefined) {\n        _nonce = await getNonce(client, token, owner, spender);\n    } else {\n        _nonce = nonce;\n    }\n    const details: PermitDetails = {\n        token,\n        amount,\n        expiration,\n        nonce: _nonce,\n    };\n\n    return details;\n};\n\nconst getNonce = async (\n    client: Client & PublicActions,\n    token: Address,\n    owner: Address,\n    spender: Address,\n): Promise<number> => {\n    const chainId = await client.getChainId();\n    const result = await client.readContract({\n        abi: permit2Abi,\n        address: PERMIT2[chainId],\n        functionName: 'allowance',\n        args: [owner, token, spender],\n    });\n    const nonce = result[1];\n\n    return nonce;\n};\n","import { encodeFunctionData } from 'viem';\n\nimport { vaultV2Abi } from '../../../../abi';\nimport { VAULT, ZERO_ADDRESS } from '../../../../utils/constants';\nimport { WeightedEncoder } from '../../../encoders/weighted';\nimport { Token } from '../../../token';\nimport { TokenAmount } from '../../../tokenAmount';\nimport { PoolState } from '../../../types';\nimport {\n    calculateProportionalAmounts,\n    getPoolStateWithBalancesV2,\n    getSortedTokens,\n} from '../../../utils';\nimport { doRemoveLiquidityQuery } from '../../../utils/doRemoveLiquidityQuery';\nimport { parseRemoveLiquidityArgs } from '../../../utils/parseRemoveLiquidityArgs';\nimport { getAmountsCall, getAmountsQuery } from '../../helper';\nimport {\n    RemoveLiquidityBase,\n    RemoveLiquidityBuildCallOutput,\n    RemoveLiquidityInput,\n    RemoveLiquidityKind,\n    RemoveLiquidityQueryOutput,\n    RemoveLiquidityRecoveryInput,\n} from '../../types';\nimport { RemoveLiquidityV2BaseBuildCallInput } from '../types';\n\nexport class RemoveLiquidityWeighted implements RemoveLiquidityBase {\n    public async query(\n        input: RemoveLiquidityInput,\n        poolState: PoolState,\n    ): Promise<RemoveLiquidityQueryOutput> {\n        if (input.kind === RemoveLiquidityKind.Recovery) {\n            return this.queryRemoveLiquidityRecovery(input, poolState);\n        }\n\n        const sortedTokens = getSortedTokens(poolState.tokens, input.chainId);\n        const amounts = getAmountsQuery(sortedTokens, input);\n\n        const userData = WeightedEncoder.encodeRemoveLiquidityUserData(\n            input.kind,\n            amounts,\n        );\n\n        const { args, tokensOut } = parseRemoveLiquidityArgs({\n            chainId: input.chainId,\n            poolId: poolState.id,\n            sortedTokens,\n            sender: ZERO_ADDRESS,\n            recipient: ZERO_ADDRESS,\n            minAmountsOut: amounts.minAmountsOut,\n            userData,\n        });\n\n        const queryOutput = await doRemoveLiquidityQuery(\n            input.rpcUrl,\n            input.chainId,\n            args,\n        );\n\n        const bpt = new Token(input.chainId, poolState.address, 18);\n        const bptIn = TokenAmount.fromRawAmount(bpt, queryOutput.bptIn);\n\n        const amountsOut = queryOutput.amountsOut.map((a, i) =>\n            TokenAmount.fromRawAmount(tokensOut[i], a),\n        );\n\n        return {\n            to: VAULT[input.chainId],\n            poolType: poolState.type,\n            removeLiquidityKind: input.kind,\n            poolId: poolState.id,\n            bptIn,\n            amountsOut,\n            tokenOutIndex: amounts.tokenOutIndex,\n            protocolVersion: poolState.protocolVersion,\n            chainId: input.chainId,\n        };\n    }\n    // RemoveLiquidityRecovery doesn't have a proper query method on v2, so\n    // this method replicates SC behavior off-chain\n    private async queryRemoveLiquidityRecovery(\n        input: RemoveLiquidityRecoveryInput,\n        poolState: PoolState,\n    ): Promise<RemoveLiquidityQueryOutput> {\n        const poolStateWithBalances = await getPoolStateWithBalancesV2(\n            poolState,\n            input.chainId,\n            input.rpcUrl,\n        );\n\n        const { tokenAmounts } = calculateProportionalAmounts(\n            poolStateWithBalances,\n            input.bptIn,\n        );\n\n        const bptToken = new Token(input.chainId, poolState.address, 18);\n        const bptIn = TokenAmount.fromRawAmount(\n            bptToken,\n            input.bptIn.rawAmount,\n        );\n        const amountsOut = tokenAmounts.map((amount) =>\n            TokenAmount.fromRawAmount(\n                new Token(input.chainId, amount.address, amount.decimals),\n                amount.rawAmount,\n            ),\n        );\n        return {\n            to: VAULT[input.chainId],\n            poolType: poolState.type,\n            removeLiquidityKind: input.kind,\n            poolId: poolState.id,\n            bptIn,\n            amountsOut,\n            tokenOutIndex: undefined,\n            protocolVersion: poolState.protocolVersion,\n            chainId: input.chainId,\n        };\n    }\n\n    public buildCall(\n        input: RemoveLiquidityV2BaseBuildCallInput,\n    ): RemoveLiquidityBuildCallOutput {\n        const amounts = getAmountsCall(input);\n\n        const userData = WeightedEncoder.encodeRemoveLiquidityUserData(\n            input.removeLiquidityKind,\n            amounts,\n        );\n\n        const { args } = parseRemoveLiquidityArgs({\n            poolId: input.poolId,\n            sortedTokens: input.amountsOut.map((a) => a.token),\n            sender: input.sender,\n            recipient: input.recipient,\n            minAmountsOut: amounts.minAmountsOut,\n            userData,\n            toInternalBalance: !!input.toInternalBalance,\n            wethIsEth: !!input.wethIsEth,\n            chainId: input.chainId,\n        });\n\n        const callData = encodeFunctionData({\n            abi: vaultV2Abi,\n            functionName: 'exitPool',\n            args,\n        });\n\n        return {\n            args,\n            callData,\n            to: VAULT[input.chainId],\n            value: 0n,\n            maxBptIn: TokenAmount.fromRawAmount(\n                input.bptIn.token,\n                amounts.maxBptAmountIn,\n            ),\n            minAmountsOut: input.amountsOut.map((a, i) =>\n                TokenAmount.fromRawAmount(a.token, amounts.minAmountsOut[i]),\n            ),\n        };\n    }\n\n    buildCallWithPermit(): RemoveLiquidityBuildCallOutput {\n        throw new Error('buildCallWithPermit is not supported on v2');\n    }\n}\n","import { createPublicClient, http } from 'viem';\nimport { Address } from '../../types';\nimport { BALANCER_QUERIES, CHAINS } from '../../utils/constants';\nimport { balancerQueriesAbi } from '../../abi';\nimport { ExitPoolRequest } from '../removeLiquidity/types';\n\nexport async function doRemoveLiquidityQuery(\n    rpcUrl: string,\n    chainId: number,\n    args: readonly [Address, Address, Address, ExitPoolRequest],\n): Promise<{\n    bptIn: bigint;\n    amountsOut: readonly bigint[];\n}> {\n    const client = createPublicClient({\n        transport: http(rpcUrl),\n        chain: CHAINS[chainId],\n    });\n\n    const {\n        result: [bptIn, amountsOut],\n    } = await client.simulateContract({\n        address: BALANCER_QUERIES[chainId],\n        abi: balancerQueriesAbi,\n        functionName: 'queryExit',\n        args,\n    });\n\n    return {\n        bptIn,\n        amountsOut,\n    };\n}\n","import { Address } from '../../types';\nimport { Token } from '../token';\nimport { ExitPoolRequest } from '../removeLiquidity/types';\nimport { replaceWrapped } from './replaceWrapped';\n\nexport function parseRemoveLiquidityArgs({\n    chainId,\n    wethIsEth,\n    sortedTokens,\n    poolId,\n    sender,\n    recipient,\n    minAmountsOut,\n    userData,\n    toInternalBalance,\n}: {\n    chainId?: number;\n    wethIsEth?: boolean;\n    sortedTokens: Token[];\n    poolId: Address;\n    sender: Address;\n    recipient: Address;\n    minAmountsOut: bigint[];\n    userData: Address;\n    toInternalBalance?: boolean;\n}) {\n    // replace wrapped token with native asset if needed\n    const tokensOut =\n        chainId && wethIsEth\n            ? replaceWrapped([...sortedTokens], chainId)\n            : [...sortedTokens];\n\n    const exitPoolRequest: ExitPoolRequest = {\n        assets: tokensOut.map((t) => t.address), // with BPT\n        minAmountsOut, // with BPT\n        userData, // wihtout BPT\n        toInternalBalance: !!toInternalBalance,\n    };\n\n    return {\n        args: [poolId, sender, recipient, exitPoolRequest] as const,\n        tokensOut,\n    };\n}\n","import { insertIndex } from '@/utils';\nimport { encodeFunctionData } from 'viem';\n\nimport { vaultV2Abi } from '../../../../abi';\nimport { VAULT, ZERO_ADDRESS } from '../../../../utils/constants';\nimport { ComposableStableEncoder } from '../../../encoders/composableStable';\nimport { Token } from '../../../token';\nimport { TokenAmount } from '../../../tokenAmount';\nimport { PoolState } from '../../../types';\nimport {\n    calculateProportionalAmounts,\n    getPoolStateWithBalancesV2,\n    getSortedTokens,\n} from '../../../utils';\nimport { doRemoveLiquidityQuery } from '../../../utils/doRemoveLiquidityQuery';\nimport { parseRemoveLiquidityArgs } from '../../../utils/parseRemoveLiquidityArgs';\nimport { getAmountsCall, getAmountsQuery } from '../../helper';\nimport {\n    RemoveLiquidityBase,\n    RemoveLiquidityBuildCallOutput,\n    RemoveLiquidityInput,\n    RemoveLiquidityKind,\n    RemoveLiquidityQueryOutput,\n    RemoveLiquidityRecoveryInput,\n} from '../../types';\nimport { RemoveLiquidityV2ComposableStableBuildCallInput } from './types';\n\nexport class RemoveLiquidityComposableStable implements RemoveLiquidityBase {\n    public async query(\n        input: RemoveLiquidityInput,\n        poolState: PoolState,\n    ): Promise<RemoveLiquidityQueryOutput> {\n        if (input.kind === RemoveLiquidityKind.Recovery) {\n            return this.queryRemoveLiquidityRecovery(input, poolState);\n        }\n\n        const sortedTokens = getSortedTokens(poolState.tokens, input.chainId);\n        const bptIndex = poolState.tokens.findIndex(\n            (t) => t.address === poolState.address,\n        );\n        const amounts = getAmountsQuery(sortedTokens, input, bptIndex);\n        const amountsWithoutBpt = {\n            ...amounts,\n            minAmountsOut: [\n                ...amounts.minAmountsOut.slice(0, bptIndex),\n                ...amounts.minAmountsOut.slice(bptIndex + 1),\n            ],\n        };\n        const userData = ComposableStableEncoder.encodeRemoveLiquidityUserData(\n            input.kind,\n            amountsWithoutBpt,\n        );\n\n        const { args, tokensOut } = parseRemoveLiquidityArgs({\n            chainId: input.chainId,\n            poolId: poolState.id,\n            sortedTokens,\n            sender: ZERO_ADDRESS,\n            recipient: ZERO_ADDRESS,\n            minAmountsOut: amounts.minAmountsOut,\n            userData,\n        });\n        const queryOutput = await doRemoveLiquidityQuery(\n            input.rpcUrl,\n            input.chainId,\n            args,\n        );\n        const bpt = new Token(input.chainId, poolState.address, 18);\n        const bptIn = TokenAmount.fromRawAmount(bpt, queryOutput.bptIn);\n\n        const amountsOut = queryOutput.amountsOut.map((a, i) =>\n            TokenAmount.fromRawAmount(tokensOut[i], a),\n        );\n\n        return {\n            to: VAULT[input.chainId],\n            poolType: poolState.type,\n            removeLiquidityKind: input.kind,\n            poolId: poolState.id,\n            bptIn,\n            amountsOut,\n            tokenOutIndex: amounts.tokenOutIndex,\n            bptIndex,\n            protocolVersion: poolState.protocolVersion,\n            chainId: input.chainId,\n        };\n    }\n\n    // RemoveLiquidityRecovery doesn't have a proper query method on v2, so\n    // this method replicates SC behavior off-chain\n    private async queryRemoveLiquidityRecovery(\n        input: RemoveLiquidityRecoveryInput,\n        poolState: PoolState,\n    ): Promise<RemoveLiquidityQueryOutput> {\n        const poolStateWithBalances = await getPoolStateWithBalancesV2(\n            poolState,\n            input.chainId,\n            input.rpcUrl,\n        );\n\n        const { tokenAmounts } = calculateProportionalAmounts(\n            poolStateWithBalances,\n            input.bptIn,\n        );\n\n        const bptToken = new Token(input.chainId, poolState.address, 18);\n        const bptIn = TokenAmount.fromRawAmount(\n            bptToken,\n            input.bptIn.rawAmount,\n        );\n        const bptIndex = poolState.tokens.findIndex(\n            (t) => t.address === poolState.address,\n        );\n        let amountsOut = tokenAmounts.map((amount) =>\n            TokenAmount.fromRawAmount(\n                new Token(input.chainId, amount.address, amount.decimals),\n                amount.rawAmount,\n            ),\n        );\n        amountsOut = insertIndex(\n            amountsOut,\n            bptIndex,\n            TokenAmount.fromRawAmount(bptToken, 0n),\n        );\n        return {\n            to: VAULT[input.chainId],\n            poolType: poolState.type,\n            removeLiquidityKind: input.kind,\n            poolId: poolState.id,\n            bptIn,\n            amountsOut,\n            tokenOutIndex: undefined,\n            protocolVersion: poolState.protocolVersion,\n            chainId: input.chainId,\n        };\n    }\n\n    public buildCall(\n        input: RemoveLiquidityV2ComposableStableBuildCallInput,\n    ): RemoveLiquidityBuildCallOutput {\n        const amounts = getAmountsCall(input);\n        const amountsWithoutBpt = {\n            ...amounts,\n            minAmountsOut: [\n                ...amounts.minAmountsOut.slice(0, input.bptIndex),\n                ...amounts.minAmountsOut.slice(input.bptIndex + 1),\n            ],\n        };\n        const userData = ComposableStableEncoder.encodeRemoveLiquidityUserData(\n            input.removeLiquidityKind,\n            amountsWithoutBpt,\n        );\n\n        const { args } = parseRemoveLiquidityArgs({\n            poolId: input.poolId,\n            sortedTokens: input.amountsOut.map((a) => a.token),\n            sender: input.sender,\n            recipient: input.recipient,\n            minAmountsOut: amounts.minAmountsOut,\n            userData,\n            toInternalBalance: !!input.toInternalBalance,\n            wethIsEth: !!input.wethIsEth,\n            chainId: input.chainId,\n        });\n        const callData = encodeFunctionData({\n            abi: vaultV2Abi,\n            functionName: 'exitPool',\n            args,\n        });\n\n        return {\n            args,\n            callData,\n            to: VAULT[input.chainId],\n            value: 0n,\n            maxBptIn: TokenAmount.fromRawAmount(\n                input.bptIn.token,\n                amounts.maxBptAmountIn,\n            ),\n            minAmountsOut: input.amountsOut.map((a, i) =>\n                TokenAmount.fromRawAmount(a.token, amounts.minAmountsOut[i]),\n            ),\n        };\n    }\n\n    buildCallWithPermit(): RemoveLiquidityBuildCallOutput {\n        throw new Error('buildCallWithPermit is not supported on v2');\n    }\n}\n","import { encodeFunctionData } from 'viem';\n\nimport { vaultV2Abi } from '../../../../abi';\nimport { VAULT, ZERO_ADDRESS } from '../../../../utils/constants';\nimport { StableEncoder } from '../../../encoders/stable';\nimport { Token } from '../../../token';\nimport { TokenAmount } from '../../../tokenAmount';\nimport { PoolState } from '../../../types';\nimport {\n    calculateProportionalAmounts,\n    getPoolStateWithBalancesV2,\n    getSortedTokens,\n} from '../../../utils';\nimport { doRemoveLiquidityQuery } from '../../../utils/doRemoveLiquidityQuery';\nimport { parseRemoveLiquidityArgs } from '../../../utils/parseRemoveLiquidityArgs';\nimport { getAmountsCall, getAmountsQuery } from '../../helper';\nimport {\n    RemoveLiquidityBase,\n    RemoveLiquidityBuildCallOutput,\n    RemoveLiquidityInput,\n    RemoveLiquidityKind,\n    RemoveLiquidityQueryOutput,\n    RemoveLiquidityRecoveryInput,\n} from '../../types';\nimport { RemoveLiquidityV2BaseBuildCallInput } from '../types';\n\nexport class RemoveLiquidityStable implements RemoveLiquidityBase {\n    public async query(\n        input: RemoveLiquidityInput,\n        poolState: PoolState,\n    ): Promise<RemoveLiquidityQueryOutput> {\n        if (input.kind === RemoveLiquidityKind.Recovery) {\n            return this.queryRemoveLiquidityRecovery(input, poolState);\n        }\n\n        const sortedTokens = getSortedTokens(poolState.tokens, input.chainId);\n        const amounts = getAmountsQuery(sortedTokens, input);\n\n        const userData = StableEncoder.encodeRemoveLiquidityUserData(\n            input.kind,\n            amounts,\n        );\n\n        const { args, tokensOut } = parseRemoveLiquidityArgs({\n            chainId: input.chainId,\n            poolId: poolState.id,\n            sortedTokens,\n            sender: ZERO_ADDRESS,\n            recipient: ZERO_ADDRESS,\n            minAmountsOut: amounts.minAmountsOut,\n            userData,\n        });\n\n        const queryOutput = await doRemoveLiquidityQuery(\n            input.rpcUrl,\n            input.chainId,\n            args,\n        );\n\n        const bpt = new Token(input.chainId, poolState.address, 18);\n        const bptIn = TokenAmount.fromRawAmount(bpt, queryOutput.bptIn);\n\n        const amountsOut = queryOutput.amountsOut.map((a, i) =>\n            TokenAmount.fromRawAmount(tokensOut[i], a),\n        );\n\n        return {\n            to: VAULT[input.chainId],\n            poolType: poolState.type,\n            removeLiquidityKind: input.kind,\n            poolId: poolState.id,\n            bptIn,\n            amountsOut,\n            tokenOutIndex: amounts.tokenOutIndex,\n            protocolVersion: poolState.protocolVersion,\n            chainId: input.chainId,\n        };\n    }\n\n    // RemoveLiquidityRecovery doesn't have a proper query method on v2, so\n    // this method replicates SC behavior off-chain\n    private async queryRemoveLiquidityRecovery(\n        input: RemoveLiquidityRecoveryInput,\n        poolState: PoolState,\n    ): Promise<RemoveLiquidityQueryOutput> {\n        const poolStateWithBalances = await getPoolStateWithBalancesV2(\n            poolState,\n            input.chainId,\n            input.rpcUrl,\n        );\n\n        const { tokenAmounts } = calculateProportionalAmounts(\n            poolStateWithBalances,\n            input.bptIn,\n        );\n\n        const bptToken = new Token(input.chainId, poolState.address, 18);\n        const bptIn = TokenAmount.fromRawAmount(\n            bptToken,\n            input.bptIn.rawAmount,\n        );\n        const amountsOut = tokenAmounts.map((amountIn) =>\n            TokenAmount.fromRawAmount(\n                new Token(input.chainId, amountIn.address, amountIn.decimals),\n                amountIn.rawAmount,\n            ),\n        );\n        return {\n            to: VAULT[input.chainId],\n            poolType: poolState.type,\n            removeLiquidityKind: input.kind,\n            poolId: poolState.id,\n            bptIn,\n            amountsOut,\n            tokenOutIndex: undefined,\n            protocolVersion: poolState.protocolVersion,\n            chainId: input.chainId,\n        };\n    }\n\n    public buildCall(\n        input: RemoveLiquidityV2BaseBuildCallInput,\n    ): RemoveLiquidityBuildCallOutput {\n        const amounts = getAmountsCall(input);\n\n        const userData = StableEncoder.encodeRemoveLiquidityUserData(\n            input.removeLiquidityKind,\n            amounts,\n        );\n\n        const { args } = parseRemoveLiquidityArgs({\n            poolId: input.poolId,\n            sortedTokens: input.amountsOut.map((a) => a.token),\n            sender: input.sender,\n            recipient: input.recipient,\n            minAmountsOut: amounts.minAmountsOut,\n            userData,\n            toInternalBalance: !!input.toInternalBalance,\n            wethIsEth: !!input.wethIsEth,\n            chainId: input.chainId,\n        });\n\n        const callData = encodeFunctionData({\n            abi: vaultV2Abi,\n            functionName: 'exitPool',\n            args,\n        });\n\n        return {\n            args,\n            callData,\n            to: VAULT[input.chainId],\n            value: 0n,\n            maxBptIn: TokenAmount.fromRawAmount(\n                input.bptIn.token,\n                amounts.maxBptAmountIn,\n            ),\n            minAmountsOut: input.amountsOut.map((a, i) =>\n                TokenAmount.fromRawAmount(a.token, amounts.minAmountsOut[i]),\n            ),\n        };\n    }\n\n    buildCallWithPermit(): RemoveLiquidityBuildCallOutput {\n        throw new Error('buildCallWithPermit is not supported on v2');\n    }\n}\n","import {\n    PoolState,\n    RemoveLiquidityBase,\n    RemoveLiquidityBuildCallOutput,\n    RemoveLiquidityBuildCallInput,\n    RemoveLiquidityConfig,\n    RemoveLiquidityInput,\n    RemoveLiquidityQueryOutput,\n} from '@/entities';\nimport { RemoveLiquidityWeighted } from './weighted/removeLiquidityWeighted';\nimport { RemoveLiquidityComposableStable } from './composableStable/removeLiquidityComposableStable';\nimport { PoolType } from '@/types';\nimport { RemoveLiquidityStable } from './stable/removeLiquidityStable';\n\nexport class RemoveLiquidityV2 implements RemoveLiquidityBase {\n    private readonly removeLiquidityTypes: Record<string, RemoveLiquidityBase> =\n        {};\n\n    constructor(config?: RemoveLiquidityConfig) {\n        const { customRemoveLiquidityTypes } = config || {};\n        this.removeLiquidityTypes = {\n            //GYRO2, GYRO3, GYROE only support Remove Liquidity Proportional(1 - EXACT_BPT_IN_FOR_TOKENS_OUT)\n            [PoolType.ComposableStable]: new RemoveLiquidityComposableStable(),\n            [PoolType.Gyro2]: new RemoveLiquidityWeighted(),\n            [PoolType.Gyro3]: new RemoveLiquidityWeighted(),\n            [PoolType.GyroE]: new RemoveLiquidityWeighted(),\n            [PoolType.MetaStable]: new RemoveLiquidityStable(),\n            [PoolType.Stable]: new RemoveLiquidityStable(),\n            [PoolType.Weighted]: new RemoveLiquidityWeighted(),\n            // custom remove liquidity types take precedence over base types\n            ...customRemoveLiquidityTypes,\n        };\n    }\n\n    public getRemoveLiquidity(poolType: string): RemoveLiquidityBase {\n        if (!this.removeLiquidityTypes[poolType]) {\n            throw new Error(`Unsupported pool type ${poolType}`);\n        }\n\n        return this.removeLiquidityTypes[poolType];\n    }\n\n    public async query(\n        input: RemoveLiquidityInput,\n        poolState: PoolState,\n    ): Promise<RemoveLiquidityQueryOutput> {\n        return this.getRemoveLiquidity(poolState.type).query(input, poolState);\n    }\n\n    public buildCall(\n        input: RemoveLiquidityBuildCallInput,\n    ): RemoveLiquidityBuildCallOutput {\n        return this.getRemoveLiquidity(input.poolType).buildCall(input);\n    }\n\n    buildCallWithPermit(): RemoveLiquidityBuildCallOutput {\n        throw new Error('buildCallWithPermit is not supported on v2');\n    }\n}\n","import {\n    balancerRouterAbi,\n    permit2Abi,\n    vaultExtensionAbi_V3,\n    vaultV3Abi,\n} from '@/abi';\nimport { BALANCER_ROUTER, ChainId, CHAINS } from '@/utils';\nimport { createPublicClient, Hex, http } from 'viem';\nimport { Address } from '@/types';\n\nexport const doRemoveLiquiditySingleTokenExactOutQuery = async (\n    rpcUrl: string,\n    chainId: ChainId,\n    sender: Address,\n    userData: Hex,\n    poolAddress: Address,\n    tokenOut: Address,\n    exactAmountOut: bigint,\n): Promise<bigint> => {\n    const client = createPublicClient({\n        transport: http(rpcUrl),\n        chain: CHAINS[chainId],\n    });\n    const { result: bptIn } = await client.simulateContract({\n        address: BALANCER_ROUTER[chainId],\n        abi: [\n            ...balancerRouterAbi,\n            ...vaultV3Abi,\n            ...vaultExtensionAbi_V3,\n            ...permit2Abi,\n        ],\n        functionName: 'queryRemoveLiquiditySingleTokenExactOut',\n        args: [poolAddress, tokenOut, exactAmountOut, sender, userData],\n    });\n    return bptIn;\n};\n","import {\n    balancerRouterAbi,\n    permit2Abi,\n    vaultExtensionAbi_V3,\n    vaultV3Abi,\n} from '@/abi';\nimport { BALANCER_ROUTER, ChainId, CHAINS } from '@/utils';\nimport { createPublicClient, Hex, http } from 'viem';\nimport { Address } from '@/types';\n\nexport const doRemoveLiquiditySingleTokenExactInQuery = async (\n    rpcUrl: string,\n    chainId: ChainId,\n    sender: Address,\n    userData: Hex,\n    poolAddress: Address,\n    tokenOut: Address,\n    exactBptAmountIn: bigint,\n): Promise<bigint> => {\n    const client = createPublicClient({\n        transport: http(rpcUrl),\n        chain: CHAINS[chainId],\n    });\n    const { result: amountOut } = await client.simulateContract({\n        address: BALANCER_ROUTER[chainId],\n        abi: [\n            ...balancerRouterAbi,\n            ...vaultV3Abi,\n            ...vaultExtensionAbi_V3,\n            ...permit2Abi,\n        ],\n        functionName: 'queryRemoveLiquiditySingleTokenExactIn',\n        args: [poolAddress, exactBptAmountIn, tokenOut, sender, userData],\n    });\n    return amountOut;\n};\n","import {\n    balancerRouterAbi,\n    permit2Abi,\n    vaultExtensionAbi_V3,\n    vaultV3Abi,\n} from '@/abi';\nimport { BALANCER_ROUTER, ChainId, CHAINS } from '@/utils';\nimport { createPublicClient, Hex, http } from 'viem';\nimport { Address } from '@/types';\n\nexport const doRemoveLiquidityProportionalQuery = async (\n    rpcUrl: string,\n    chainId: ChainId,\n    sender: Address,\n    userData: Hex,\n    poolAddress: Address,\n    exactBptAmountIn: bigint,\n): Promise<readonly bigint[]> => {\n    const client = createPublicClient({\n        transport: http(rpcUrl),\n        chain: CHAINS[chainId],\n    });\n    const { result: amountsOut } = await client.simulateContract({\n        address: BALANCER_ROUTER[chainId],\n        abi: [\n            ...balancerRouterAbi,\n            ...vaultV3Abi,\n            ...vaultExtensionAbi_V3,\n            ...permit2Abi,\n        ],\n        functionName: 'queryRemoveLiquidityProportional',\n        args: [poolAddress, exactBptAmountIn, sender, userData],\n    });\n    return amountsOut;\n};\n","import {\n    balancerRouterAbi,\n    permit2Abi,\n    vaultExtensionAbi_V3,\n    vaultV3Abi,\n} from '@/abi';\nimport { BALANCER_ROUTER, CHAINS } from '@/utils';\nimport { createPublicClient, http } from 'viem';\nimport { RemoveLiquidityRecoveryInput } from '../types';\nimport { Address } from '@/types';\n\nexport const doRemoveLiquidityRecoveryQuery = async (\n    { chainId, rpcUrl, bptIn }: RemoveLiquidityRecoveryInput,\n    poolAddress: Address,\n): Promise<readonly bigint[]> => {\n    // remove liquidity recovery requires bptAmountsIn and returns amountsOut\n    const client = createPublicClient({\n        transport: http(rpcUrl),\n        chain: CHAINS[chainId],\n    });\n\n    const { result: amountsOut } = await client.simulateContract({\n        address: BALANCER_ROUTER[chainId],\n        abi: [\n            ...balancerRouterAbi,\n            ...vaultV3Abi,\n            ...vaultExtensionAbi_V3,\n            ...permit2Abi,\n        ],\n        functionName: 'queryRemoveLiquidityRecovery',\n        args: [poolAddress, bptIn.rawAmount],\n    });\n    return amountsOut;\n};\n","import { removeLiquiditySingleTokenExactInShouldHaveTokenOutIndexError } from '@/utils';\nimport { RemoveLiquidityBaseBuildCallInput } from '../types';\nimport { encodeFunctionData } from 'viem';\nimport { balancerRouterAbi } from '@/abi';\nimport { Hex } from '@/types';\n\nexport const encodeRemoveLiquiditySingleTokenExactOut = (\n    input: RemoveLiquidityBaseBuildCallInput & { userData: Hex },\n    maxBptAmountIn: bigint,\n): Hex => {\n    // just a sanity check as this is already checked in InputValidator\n    if (input.tokenOutIndex === undefined) {\n        throw removeLiquiditySingleTokenExactInShouldHaveTokenOutIndexError;\n    }\n    return encodeFunctionData({\n        abi: balancerRouterAbi,\n        functionName: 'removeLiquiditySingleTokenExactOut',\n        args: [\n            input.poolId,\n            maxBptAmountIn,\n            input.amountsOut[input.tokenOutIndex].token.address,\n            input.amountsOut[input.tokenOutIndex].amount,\n            !!input.wethIsEth,\n            input.userData,\n        ],\n    });\n};\n","import { encodeFunctionData, Hex } from 'viem';\nimport { RemoveLiquidityBaseBuildCallInput } from '../types';\nimport { balancerRouterAbi } from '@/abi';\n\nexport const encodeRemoveLiquiditySingleTokenExactIn = (\n    input: RemoveLiquidityBaseBuildCallInput & { userData: Hex },\n    minAmountsOut: bigint[],\n) => {\n    // just a sanity check as this is already checked in InputValidator\n    if (input.tokenOutIndex === undefined) {\n        throw new Error(\n            'RemoveLiquidityKind.SingleTokenExactOut should have tokenOutIndex',\n        );\n    }\n    return encodeFunctionData({\n        abi: balancerRouterAbi,\n        functionName: 'removeLiquiditySingleTokenExactIn',\n        args: [\n            input.poolId,\n            input.bptIn.amount,\n            input.amountsOut[input.tokenOutIndex].token.address,\n            minAmountsOut[input.tokenOutIndex],\n            !!input.wethIsEth,\n            input.userData,\n        ],\n    });\n};\n","import { encodeFunctionData, Hex } from 'viem';\nimport { RemoveLiquidityBaseBuildCallInput } from '../types';\nimport { balancerRouterAbi } from '@/abi';\n\nexport const encodeRemoveLiquidityProportional = (\n    input: RemoveLiquidityBaseBuildCallInput & { userData: Hex },\n    minAmountsOut: bigint[],\n) => {\n    return encodeFunctionData({\n        abi: balancerRouterAbi,\n        functionName: 'removeLiquidityProportional',\n        args: [\n            input.poolId,\n            input.bptIn.amount,\n            minAmountsOut,\n            !!input.wethIsEth,\n            input.userData,\n        ],\n    });\n};\n","import { encodeFunctionData } from 'viem';\nimport { RemoveLiquidityBaseBuildCallInput } from '../types';\nimport { balancerRouterAbi } from '@/abi';\n\nexport const encodeRemoveLiquidityRecovery = (\n    input: RemoveLiquidityBaseBuildCallInput,\n    minAmountsOut: bigint[],\n) => {\n    return encodeFunctionData({\n        abi: balancerRouterAbi,\n        functionName: 'removeLiquidityRecovery',\n        args: [input.poolId, input.bptIn.amount, minAmountsOut],\n    });\n};\n","import { Token } from '@/entities/token';\nimport { TokenAmount } from '@/entities/tokenAmount';\nimport { PoolState } from '@/entities/types';\nimport { getSortedTokens } from '@/entities/utils';\nimport { Hex } from '@/types';\nimport {\n    BALANCER_ROUTER,\n    removeLiquidityUnbalancedNotSupportedOnV3,\n} from '@/utils';\n\nimport { getAmountsCall, getAmountsQuery } from '../helper';\nimport {\n    RemoveLiquidityBase,\n    RemoveLiquidityBaseBuildCallInput,\n    RemoveLiquidityBaseQueryOutput,\n    RemoveLiquidityBuildCallOutput,\n    RemoveLiquidityInput,\n    RemoveLiquidityKind,\n} from '../types';\nimport { doRemoveLiquiditySingleTokenExactOutQuery } from './doRemoveLiquiditySingleTokenExactOutQuery';\nimport { doRemoveLiquiditySingleTokenExactInQuery } from './doRemoveLiquiditySingleTokenExactInQuery';\nimport { doRemoveLiquidityProportionalQuery } from './doRemoveLiquidityProportionalQuery';\nimport { doRemoveLiquidityRecoveryQuery } from './doRemoveLiquidityRecoveryQuery';\nimport { encodeRemoveLiquiditySingleTokenExactOut } from './encodeRemoveLiquiditySingleTokenExactOut';\nimport { encodeRemoveLiquiditySingleTokenExactIn } from './encodeRemoveLiquiditySingleTokenExactIn';\nimport { encodeRemoveLiquidityProportional } from './encodeRemoveLiquidityProportional';\nimport { encodeRemoveLiquidityRecovery } from './encodeRemoveLiquidityRecovery';\nimport { encodeFunctionData, zeroAddress } from 'viem';\nimport { balancerRouterAbi } from '@/abi';\nimport { Permit } from '@/entities/permitHelper';\n\nexport class RemoveLiquidityV3 implements RemoveLiquidityBase {\n    public async query(\n        input: RemoveLiquidityInput,\n        poolState: PoolState,\n    ): Promise<RemoveLiquidityBaseQueryOutput> {\n        const sortedTokens = getSortedTokens(poolState.tokens, input.chainId);\n        const amounts = getAmountsQuery(sortedTokens, input);\n\n        let maxBptAmountIn: bigint;\n        let minAmountsOut: readonly bigint[];\n\n        switch (input.kind) {\n            case RemoveLiquidityKind.Unbalanced:\n                throw removeLiquidityUnbalancedNotSupportedOnV3;\n            case RemoveLiquidityKind.SingleTokenExactOut:\n                {\n                    maxBptAmountIn =\n                        await doRemoveLiquiditySingleTokenExactOutQuery(\n                            input.rpcUrl,\n                            input.chainId,\n                            input.sender ?? zeroAddress,\n                            input.userData ?? '0x',\n                            poolState.address,\n                            input.amountOut.address,\n                            input.amountOut.rawAmount,\n                        );\n                    minAmountsOut = amounts.minAmountsOut;\n                }\n                break;\n            case RemoveLiquidityKind.SingleTokenExactIn:\n                {\n                    maxBptAmountIn = amounts.maxBptAmountIn;\n                    const minAmountOut =\n                        await doRemoveLiquiditySingleTokenExactInQuery(\n                            input.rpcUrl,\n                            input.chainId,\n                            input.sender ?? zeroAddress,\n                            input.userData ?? '0x',\n                            poolState.address,\n                            input.tokenOut,\n                            input.bptIn.rawAmount,\n                        );\n                    minAmountsOut = sortedTokens.map((t) => {\n                        return t.isSameAddress(input.tokenOut)\n                            ? minAmountOut\n                            : 0n;\n                    });\n                }\n                break;\n            case RemoveLiquidityKind.Proportional:\n                {\n                    maxBptAmountIn = amounts.maxBptAmountIn;\n                    minAmountsOut = await doRemoveLiquidityProportionalQuery(\n                        input.rpcUrl,\n                        input.chainId,\n                        input.sender ?? zeroAddress,\n                        input.userData ?? '0x',\n                        poolState.address,\n                        input.bptIn.rawAmount,\n                    );\n                }\n                break;\n            case RemoveLiquidityKind.Recovery:\n                {\n                    maxBptAmountIn = amounts.maxBptAmountIn;\n                    minAmountsOut = await doRemoveLiquidityRecoveryQuery(\n                        input,\n                        poolState.address,\n                    );\n                }\n                break;\n        }\n\n        const bptToken = new Token(input.chainId, poolState.address, 18);\n\n        const output: RemoveLiquidityBaseQueryOutput & { userData: Hex } = {\n            to: BALANCER_ROUTER[input.chainId],\n            poolType: poolState.type,\n            removeLiquidityKind: input.kind,\n            poolId: poolState.id,\n            bptIn: TokenAmount.fromRawAmount(bptToken, maxBptAmountIn),\n            amountsOut: sortedTokens.map((t, i) =>\n                TokenAmount.fromRawAmount(t, minAmountsOut[i]),\n            ),\n            tokenOutIndex: amounts.tokenOutIndex,\n            protocolVersion: poolState.protocolVersion,\n            chainId: input.chainId,\n            userData: input.userData ?? '0x',\n        };\n\n        return output;\n    }\n\n    public buildCall(\n        input: RemoveLiquidityBaseBuildCallInput & { userData: Hex },\n    ): RemoveLiquidityBuildCallOutput {\n        const amounts = getAmountsCall(input);\n\n        let callData: Hex;\n        switch (input.removeLiquidityKind) {\n            case RemoveLiquidityKind.Unbalanced:\n                throw removeLiquidityUnbalancedNotSupportedOnV3;\n            case RemoveLiquidityKind.SingleTokenExactOut:\n                {\n                    callData = encodeRemoveLiquiditySingleTokenExactOut(\n                        input,\n                        amounts.maxBptAmountIn,\n                    );\n                }\n                break;\n            case RemoveLiquidityKind.SingleTokenExactIn:\n                {\n                    callData = encodeRemoveLiquiditySingleTokenExactIn(\n                        input,\n                        amounts.minAmountsOut,\n                    );\n                }\n                break;\n            case RemoveLiquidityKind.Proportional:\n                {\n                    callData = encodeRemoveLiquidityProportional(\n                        input,\n                        amounts.minAmountsOut,\n                    );\n                }\n                break;\n            case RemoveLiquidityKind.Recovery:\n                {\n                    callData = encodeRemoveLiquidityRecovery(\n                        input,\n                        amounts.minAmountsOut,\n                    );\n                }\n                break;\n        }\n\n        return {\n            callData,\n            to: BALANCER_ROUTER[input.chainId],\n            value: 0n, // remove liquidity always has value = 0\n            maxBptIn: TokenAmount.fromRawAmount(\n                input.bptIn.token,\n                amounts.maxBptAmountIn,\n            ),\n            minAmountsOut: input.amountsOut.map((a, i) =>\n                TokenAmount.fromRawAmount(a.token, amounts.minAmountsOut[i]),\n            ),\n        };\n    }\n\n    public buildCallWithPermit(\n        input: RemoveLiquidityBaseBuildCallInput & { userData: Hex },\n        permit: Permit,\n    ): RemoveLiquidityBuildCallOutput {\n        const buildCallOutput = this.buildCall(input);\n\n        const args = [\n            permit.batch,\n            permit.signatures,\n            { details: [], spender: zeroAddress, sigDeadline: 0n },\n            '0x',\n            [buildCallOutput.callData],\n        ] as const;\n\n        const callData = encodeFunctionData({\n            abi: balancerRouterAbi,\n            functionName: 'permitBatchAndCall',\n            args,\n        });\n\n        return {\n            ...buildCallOutput,\n            callData,\n        };\n    }\n}\n","import { Token } from '@/entities/token';\nimport { TokenAmount } from '@/entities/tokenAmount';\nimport { PoolState } from '@/entities/types';\nimport {\n    calculateProportionalAmountsCowAmm,\n    getPoolStateWithBalancesCowAmm,\n} from '@/entities/utils';\n\nimport { getAmountsCall } from '../helper';\nimport {\n    RemoveLiquidityBase,\n    RemoveLiquidityBaseBuildCallInput,\n    RemoveLiquidityBaseQueryOutput,\n    RemoveLiquidityBuildCallOutput,\n    RemoveLiquidityKind,\n    RemoveLiquidityProportionalInput,\n} from '../types';\nimport { encodeFunctionData } from 'viem';\nimport { cowAmmPoolAbi } from '@/abi/cowAmmPool';\nimport { buildCallWithPermit2ProtocolVersionError } from '@/utils';\n\nexport class RemoveLiquidityCowAmm implements RemoveLiquidityBase {\n    public async query(\n        input: RemoveLiquidityProportionalInput,\n        poolState: PoolState,\n    ): Promise<RemoveLiquidityBaseQueryOutput> {\n        const poolStateWithBalances = await getPoolStateWithBalancesCowAmm(\n            poolState,\n            input.chainId,\n            input.rpcUrl,\n        );\n\n        const { tokenAmounts } = calculateProportionalAmountsCowAmm(\n            poolStateWithBalances,\n            input.bptIn,\n        );\n\n        const bptIn = TokenAmount.fromRawAmount(\n            new Token(input.chainId, input.bptIn.address, input.bptIn.decimals),\n            input.bptIn.rawAmount,\n        );\n        const amountsOut = tokenAmounts.map((amountIn) =>\n            TokenAmount.fromRawAmount(\n                new Token(input.chainId, amountIn.address, amountIn.decimals),\n                amountIn.rawAmount,\n            ),\n        );\n\n        const output: RemoveLiquidityBaseQueryOutput = {\n            to: poolState.id,\n            poolType: poolState.type,\n            removeLiquidityKind: input.kind,\n            poolId: poolState.id,\n            bptIn,\n            amountsOut,\n            tokenOutIndex: undefined,\n            protocolVersion: poolState.protocolVersion,\n            chainId: input.chainId,\n        };\n\n        return output;\n    }\n\n    public buildCall(\n        input: RemoveLiquidityBaseBuildCallInput,\n    ): RemoveLiquidityBuildCallOutput {\n        if (input.removeLiquidityKind !== RemoveLiquidityKind.Proportional) {\n            throw new Error(\n                `Error: Remove Liquidity ${input.removeLiquidityKind} is not supported. Cow AMM pools support Remove Liquidity Proportional only.`,\n            );\n        }\n\n        const amounts = getAmountsCall(input);\n\n        const callData = encodeFunctionData({\n            abi: cowAmmPoolAbi,\n            functionName: 'exitPool',\n            args: [amounts.maxBptAmountIn, amounts.minAmountsOut],\n        });\n\n        return {\n            callData,\n            to: input.poolId,\n            value: 0n, // remove liquidity always has value = 0\n            maxBptIn: TokenAmount.fromRawAmount(\n                input.bptIn.token,\n                amounts.maxBptAmountIn,\n            ),\n            minAmountsOut: input.amountsOut.map((a, i) =>\n                TokenAmount.fromRawAmount(a.token, amounts.minAmountsOut[i]),\n            ),\n        };\n    }\n\n    buildCallWithPermit(): RemoveLiquidityBuildCallOutput {\n        throw buildCallWithPermit2ProtocolVersionError;\n    }\n}\n","import {\n    RemoveLiquidityBase,\n    RemoveLiquidityBuildCallOutput,\n    RemoveLiquidityConfig,\n    RemoveLiquidityInput,\n    RemoveLiquidityQueryOutput,\n    RemoveLiquidityProportionalInput,\n    RemoveLiquidityBaseBuildCallInput,\n} from './types';\nimport { PoolState } from '../types';\nimport { InputValidator } from '../inputValidator/inputValidator';\nimport { RemoveLiquidityV2 } from './removeLiquidityV2';\nimport { RemoveLiquidityV3 } from './removeLiquidityV3';\nimport { RemoveLiquidityCowAmm } from './removeLiquidityCowAmm';\nimport { Permit } from '../permitHelper';\nimport { RemoveLiquidityV2BuildCallInput } from './removeLiquidityV2/types';\nimport { Hex } from 'viem';\n\nexport class RemoveLiquidity implements RemoveLiquidityBase {\n    private readonly inputValidator: InputValidator = new InputValidator();\n\n    constructor(public config?: RemoveLiquidityConfig) {}\n\n    public async query(\n        input: RemoveLiquidityInput,\n        poolState: PoolState,\n    ): Promise<RemoveLiquidityQueryOutput> {\n        this.inputValidator.validateRemoveLiquidity(input, poolState);\n        switch (poolState.protocolVersion) {\n            case 1: {\n                const removeLiquidity = new RemoveLiquidityCowAmm();\n                return removeLiquidity.query(\n                    input as RemoveLiquidityProportionalInput,\n                    poolState,\n                );\n            }\n            case 2: {\n                const removeLiquidity = new RemoveLiquidityV2(this.config);\n                return removeLiquidity.query(input, poolState);\n            }\n            case 3: {\n                const removeLiquidity = new RemoveLiquidityV3();\n                return removeLiquidity.query(input, poolState);\n            }\n        }\n    }\n\n    public buildCall(\n        input:\n            | RemoveLiquidityBaseBuildCallInput\n            | RemoveLiquidityV2BuildCallInput\n            | (RemoveLiquidityBaseBuildCallInput & { userData: Hex }),\n    ): RemoveLiquidityBuildCallOutput {\n        const isV2Input = 'sender' in input;\n        switch (input.protocolVersion) {\n            case 1: {\n                const removeLiquidity = new RemoveLiquidityCowAmm();\n                return removeLiquidity.buildCall(input);\n            }\n            case 2: {\n                if (isV2Input) {\n                    const removeLiquidity = new RemoveLiquidityV2(this.config);\n                    return removeLiquidity.buildCall(input);\n                }\n                break;\n            }\n            case 3: {\n                if (!isV2Input) {\n                    if (!('userData' in input))\n                        throw new Error(\n                            'UserData must be provided in buildCall input',\n                        );\n                    const removeLiquidity = new RemoveLiquidityV3();\n                    return removeLiquidity.buildCall(input);\n                }\n                break;\n            }\n        }\n\n        throw Error('buildCall input/version mis-match');\n    }\n\n    public buildCallWithPermit(\n        input:\n            | RemoveLiquidityBaseBuildCallInput\n            | RemoveLiquidityV2BuildCallInput\n            | (RemoveLiquidityBaseBuildCallInput & { userData: Hex }),\n        permit: Permit,\n    ): RemoveLiquidityBuildCallOutput {\n        if (input.protocolVersion === 3) {\n            if (!('userData' in input))\n                throw new Error('UserData must be provided in buildCall input');\n            const removeLiquidity = new RemoveLiquidityV3();\n            return removeLiquidity.buildCallWithPermit(input, permit);\n        }\n\n        throw Error(\n            'buildCall with Permit signatures is only available for v3',\n        );\n    }\n}\n","import { encodeFunctionData } from 'viem';\n\nimport { balancerRelayerAbi } from '../../../abi';\nimport { Address, Hex } from '../../../types';\nimport { BALANCER_RELAYER, ZERO_ADDRESS } from '../../../utils';\n\nimport { Relayer } from '../../relayer';\nimport { TokenAmount } from '../../tokenAmount';\nimport { NestedPoolState } from '../../types';\n\nimport { encodeCalls } from './encodeCalls';\nimport { doRemoveLiquidityNestedQuery } from './doRemoveLiquidityNestedQuery';\nimport { getPeekCalls } from './getPeekCalls';\nimport { getQueryCallsAttributes } from './getQueryCallsAttributes';\nimport { validateQueryInput, validateBuildCallInput } from './validateInputs';\nimport {\n    RemoveLiquidityNestedCallInputV2,\n    RemoveLiquidityNestedProportionalInputV2,\n    RemoveLiquidityNestedQueryOutputV2,\n    RemoveLiquidityNestedSingleTokenInputV2,\n} from './types';\n\nexport class RemoveLiquidityNestedV2 {\n    async query(\n        input:\n            | RemoveLiquidityNestedProportionalInputV2\n            | RemoveLiquidityNestedSingleTokenInputV2,\n        nestedPoolState: NestedPoolState,\n    ): Promise<RemoveLiquidityNestedQueryOutputV2> {\n        const isProportional = validateQueryInput(input, nestedPoolState);\n        const { callsAttributes, bptAmountIn } = getQueryCallsAttributes(\n            input,\n            nestedPoolState.pools,\n            isProportional,\n        );\n\n        const encodedCalls = encodeCalls(callsAttributes, isProportional);\n\n        const { peekCalls, tokensOut } = getPeekCalls(\n            callsAttributes,\n            isProportional,\n        );\n\n        // insert peek calls to get amountsOut\n        let tokensOutCount = 0;\n        const tokensOutIndexes: number[] = [];\n        callsAttributes.forEach((call, i) => {\n            tokensOut.forEach((tokenOut, j) => {\n                if (\n                    call.sortedTokens.some((t) =>\n                        t.isSameAddress(tokenOut.address),\n                    )\n                ) {\n                    tokensOutCount++;\n                    encodedCalls.splice(i + tokensOutCount, 0, peekCalls[j]);\n                    tokensOutIndexes.push(i + tokensOutCount);\n                }\n            });\n        });\n\n        const encodedMulticall = encodeFunctionData({\n            abi: balancerRelayerAbi,\n            functionName: 'vaultActionsQueryMulticall',\n            args: [encodedCalls],\n        });\n\n        const peekedValues = await doRemoveLiquidityNestedQuery(\n            input.chainId,\n            input.rpcUrl,\n            encodedMulticall,\n            tokensOutIndexes,\n        );\n\n        const amountsOut = tokensOut.map((tokenOut, i) =>\n            TokenAmount.fromRawAmount(tokenOut, peekedValues[i]),\n        );\n\n        return {\n            to: BALANCER_RELAYER[input.chainId],\n            protocolVersion: 2,\n            callsAttributes,\n            bptAmountIn,\n            amountsOut,\n            isProportional,\n            chainId: input.chainId,\n        };\n    }\n\n    buildCall(input: RemoveLiquidityNestedCallInputV2): {\n        callData: Hex;\n        to: Address;\n        minAmountsOut: TokenAmount[];\n    } {\n        validateBuildCallInput(input);\n\n        // apply slippage to amountsOut\n        const minAmountsOut = input.amountsOut.map((amountOut) =>\n            TokenAmount.fromRawAmount(\n                amountOut.token,\n                input.slippage.applyTo(amountOut.amount, -1),\n            ),\n        );\n\n        input.callsAttributes.forEach((call) => {\n            // update relevant calls with minAmountOut limits in place\n            minAmountsOut.forEach((minAmountOut, j) => {\n                const minAmountOutIndex = call.sortedTokens.findIndex((t) =>\n                    t.isSameAddress(minAmountOut.token.address),\n                );\n                if (minAmountOutIndex !== -1) {\n                    call.minAmountsOut[minAmountOutIndex] =\n                        minAmountsOut[j].amount;\n                }\n            });\n            // update wethIsEth flag\n            call.wethIsEth = !!input.wethIsEth;\n            // update sender and recipient placeholders\n            call.sender =\n                call.sender === ZERO_ADDRESS\n                    ? input.accountAddress\n                    : call.sender;\n            call.recipient =\n                call.recipient === ZERO_ADDRESS\n                    ? input.accountAddress\n                    : call.recipient;\n        });\n\n        const encodedCalls = encodeCalls(\n            input.callsAttributes,\n            input.isProportional,\n        );\n\n        // prepend relayer approval if provided\n        if (input.relayerApprovalSignature !== undefined) {\n            encodedCalls.unshift(\n                Relayer.encodeSetRelayerApproval(\n                    BALANCER_RELAYER[input.callsAttributes[0].chainId],\n                    true,\n                    input.relayerApprovalSignature,\n                ),\n            );\n        }\n\n        const callData = encodeFunctionData({\n            abi: balancerRelayerAbi,\n            functionName: 'multicall',\n            args: [encodedCalls],\n        });\n\n        return {\n            callData,\n            to: BALANCER_RELAYER[input.callsAttributes[0].chainId],\n            minAmountsOut,\n        };\n    }\n}\n","import { encodeFunctionData, Hex } from 'viem';\nimport { removeLiquiditySingleTokenExactInShouldHaveTokenOutIndexError } from '@/utils';\nimport { RemoveLiquidityNestedCallAttributesV2 } from './types';\nimport { replaceWrapped } from '@/entities/utils';\nimport { batchRelayerLibraryAbi } from '@/abi';\nimport { PoolType } from '@/types';\nimport { ComposableStableEncoder, WeightedEncoder } from '@/entities/encoders';\n\nexport const encodeCalls = (\n    callsAttributes: RemoveLiquidityNestedCallAttributesV2[],\n    isProportional: boolean,\n) => {\n    const encodedCalls: Hex[] = [];\n    for (const callAttributes of callsAttributes) {\n        const {\n            wethIsEth,\n            chainId,\n            sortedTokens,\n            poolId,\n            poolAddress,\n            poolType,\n            kind,\n            sender,\n            recipient,\n            bptAmountIn,\n            minAmountsOut,\n            toInternalBalance,\n            outputReferences,\n            tokenOutIndex,\n        } = callAttributes;\n\n        // replace wrapped token with native asset if needed\n        let tokensOut = [...sortedTokens];\n        if (wethIsEth) {\n            tokensOut = replaceWrapped([...sortedTokens], chainId);\n        }\n\n        let userData: Hex;\n        if (isProportional) {\n            userData = getUserDataProportional(poolType, bptAmountIn.amount);\n        } else {\n            if (tokenOutIndex === undefined) {\n                throw removeLiquiditySingleTokenExactInShouldHaveTokenOutIndexError;\n            }\n\n            // skip bpt index for ComposableStable pools\n            const bptIndex = sortedTokens.findIndex((t) =>\n                t.isSameAddress(poolAddress),\n            );\n            const tokenOutIndexWithoutBpt =\n                bptIndex === -1 || tokenOutIndex < bptIndex\n                    ? tokenOutIndex\n                    : tokenOutIndex - 1;\n\n            userData = getUserDataSingleTokenExactIn(\n                tokenOutIndexWithoutBpt,\n                poolType,\n                bptAmountIn.amount,\n            );\n        }\n\n        const exitPoolRequest = {\n            assets: tokensOut.map((t) => t.address), // with BPT\n            minAmountsOut, // with BPT\n            userData, // wihtout BPT\n            toInternalBalance,\n        };\n\n        const encodedCall = encodeFunctionData({\n            abi: batchRelayerLibraryAbi,\n            functionName: 'exitPool',\n            args: [\n                poolId,\n                kind,\n                sender,\n                recipient,\n                exitPoolRequest,\n                outputReferences,\n            ] as const,\n        });\n\n        encodedCalls.push(encodedCall);\n    }\n\n    return encodedCalls;\n};\n\nconst getUserDataProportional = (poolType: PoolType, bptAmountIn: bigint) => {\n    switch (poolType) {\n        case PoolType.Weighted:\n            return WeightedEncoder.removeLiquidityProportional(bptAmountIn);\n        case PoolType.ComposableStable:\n            return ComposableStableEncoder.removeLiquidityProportional(\n                bptAmountIn,\n            );\n        default:\n            throw new Error(`Unsupported pool type ${poolType}`);\n    }\n};\n\nconst getUserDataSingleTokenExactIn = (\n    tokenOutIndex: number | undefined,\n    poolType: PoolType,\n    bptAmountIn: bigint,\n) => {\n    if (tokenOutIndex === undefined) {\n        throw removeLiquiditySingleTokenExactInShouldHaveTokenOutIndexError;\n    }\n    switch (poolType) {\n        case PoolType.Weighted:\n            return WeightedEncoder.removeLiquiditySingleTokenExactIn(\n                bptAmountIn,\n                tokenOutIndex,\n            );\n        case PoolType.ComposableStable:\n            return ComposableStableEncoder.removeLiquiditySingleTokenExactIn(\n                bptAmountIn,\n                tokenOutIndex,\n            );\n        default:\n            throw new Error(`Unsupported pool type ${poolType}`);\n    }\n};\n","import {\n    createPublicClient,\n    decodeAbiParameters,\n    decodeFunctionResult,\n    Hex,\n    http,\n} from 'viem';\nimport { balancerRelayerAbi } from '@/abi';\nimport { BALANCER_RELAYER, ChainId, CHAINS, EMPTY_SENDER } from '@/utils';\n\nexport const doRemoveLiquidityNestedQuery = async (\n    chainId: ChainId,\n    rpcUrl: string,\n    encodedMulticall: Hex,\n    tokensOutIndexes: number[],\n): Promise<bigint[]> => {\n    const client = createPublicClient({\n        transport: http(rpcUrl),\n        chain: CHAINS[chainId],\n    });\n\n    const { data } = await client.call({\n        ...EMPTY_SENDER,\n        to: BALANCER_RELAYER[chainId],\n        data: encodedMulticall,\n    });\n\n    const result = decodeFunctionResult({\n        abi: balancerRelayerAbi,\n        functionName: 'vaultActionsQueryMulticall',\n        data: data as Hex,\n    });\n\n    const peekedValues: bigint[] = [];\n\n    result.forEach((r, i) => {\n        if (tokensOutIndexes.includes(i))\n            peekedValues.push(decodeAbiParameters([{ type: 'uint256' }], r)[0]);\n    });\n\n    return peekedValues;\n};\n","import { Hex } from 'viem';\nimport { RemoveLiquidityNestedCallAttributesV2 } from './types';\nimport { Token } from '@/entities/token';\nimport { Relayer } from '@/entities/relayer';\n\nexport const getPeekCalls = (\n    calls: RemoveLiquidityNestedCallAttributesV2[],\n    isProportional: boolean,\n) => {\n    const tokensOut: Token[] = [];\n    const peekCalls: Hex[] = [];\n\n    if (isProportional) {\n        /**\n         * Overall logic: every outputReference that is not being used as input\n         * on another call is an output of the multicall and should be peeked.\n         */\n        calls.forEach((call) => {\n            call.outputReferences.forEach((outputReference) => {\n                const tokenOut =\n                    call.sortedTokens[Number(outputReference.index)];\n                // check if tokenOut is a pool address of another call - this means that it's an input for that call\n                const isTokenBeingUsedAsInput = calls.some((_call) =>\n                    tokenOut.isSameAddress(_call.poolAddress),\n                );\n\n                if (!isTokenBeingUsedAsInput) {\n                    tokensOut.push(tokenOut);\n                    const readOnlyChainedReference = Relayer.toChainedReference(\n                        Relayer.fromChainedReference(outputReference.key),\n                        false,\n                    );\n                    peekCalls.push(\n                        Relayer.encodePeekChainedReferenceValue(\n                            readOnlyChainedReference,\n                        ),\n                    );\n                }\n            });\n        });\n    } else {\n        // For removing liquidity to single token, the outputReference of the last call is the only output to be peeked\n        const lastCall = calls[calls.length - 1];\n        const tokenOut =\n            lastCall.sortedTokens[lastCall.tokenOutIndex as number];\n        tokensOut.push(tokenOut);\n        const readOnlyChainedReference = Relayer.toChainedReference(\n            Relayer.fromChainedReference(lastCall.outputReferences[0].key),\n            false,\n        );\n        peekCalls.push(\n            Relayer.encodePeekChainedReferenceValue(readOnlyChainedReference),\n        );\n    }\n\n    return { peekCalls, tokensOut };\n};\n","import { Address } from 'viem';\nimport { TokenAmount } from '@/entities/tokenAmount';\n\nimport { BALANCER_RELAYER, ChainId, ZERO_ADDRESS } from '@/utils';\nimport { Token } from '@/entities/token';\nimport { NestedPool, PoolKind } from '@/entities/types';\nimport {\n    RemoveLiquidityNestedCallAttributesV2,\n    RemoveLiquidityNestedProportionalInputV2,\n    RemoveLiquidityNestedSingleTokenInputV2,\n} from './types';\nimport { PoolType } from '@/types';\nimport { Relayer } from '@/entities/relayer';\n\nexport const getQueryCallsAttributes = (\n    input:\n        | RemoveLiquidityNestedProportionalInputV2\n        | RemoveLiquidityNestedSingleTokenInputV2,\n    pools: NestedPool[],\n    isProportional: boolean,\n): {\n    bptAmountIn: TokenAmount;\n    callsAttributes: RemoveLiquidityNestedCallAttributesV2[];\n} => {\n    const { bptAmountIn, chainId, toInternalBalance = false } = input;\n    let callsAttributes: RemoveLiquidityNestedCallAttributesV2[];\n\n    // sort pools by descending level\n    const poolsTopDown = pools.sort((a, b) => b.level - a.level);\n\n    const accountAddressPlaceholder = ZERO_ADDRESS;\n\n    if (isProportional) {\n        callsAttributes = getProportionalCallsAttributes(\n            poolsTopDown,\n            chainId,\n            accountAddressPlaceholder,\n            bptAmountIn,\n            toInternalBalance,\n        );\n    } else {\n        const { tokenOut } = input as RemoveLiquidityNestedSingleTokenInputV2;\n\n        callsAttributes = getSingleTokenCallsAttributes(\n            poolsTopDown,\n            chainId,\n            accountAddressPlaceholder,\n            bptAmountIn,\n            toInternalBalance,\n            tokenOut,\n        );\n    }\n\n    const bptIn = new Token(chainId, poolsTopDown[0].address, 18);\n    const _bptAmountIn = TokenAmount.fromRawAmount(bptIn, bptAmountIn);\n    return { callsAttributes, bptAmountIn: _bptAmountIn };\n};\n\nconst getProportionalCallsAttributes = (\n    poolsSortedByLevel: NestedPool[],\n    chainId: ChainId,\n    accountAddress: Address,\n    bptAmountIn: bigint,\n    toInternalBalance: boolean,\n) => {\n    /**\n     * Overall logic to build sequence of remove liquidity nested proportional calls:\n     * 1. Go from top pool to bottom filling out input amounts and output refs\n     * 2. Inputs will be bptAmountIn provided or output of the previous level\n     * 3. Output at bottom level is the amountsOut\n     */\n\n    const calls: RemoveLiquidityNestedCallAttributesV2[] = [];\n    for (const pool of poolsSortedByLevel) {\n        const sortedTokens = pool.tokens\n            .sort((a, b) => a.index - b.index)\n            .map((t) => new Token(chainId, t.address, t.decimals));\n\n        const sortedTokensWithoutBpt = sortedTokens.filter(\n            (t) => !t.isSameAddress(pool.address),\n        );\n        calls.push({\n            chainId: chainId,\n            sortedTokens,\n            poolId: pool.id,\n            poolAddress: pool.address,\n            poolType: pool.type,\n            kind:\n                pool.type === PoolType.ComposableStable\n                    ? PoolKind.COMPOSABLE_STABLE_V2\n                    : PoolKind.WEIGHTED,\n            sender: getSenderProportional(calls, pool.address, accountAddress),\n            recipient: getRecipientProportional(\n                sortedTokensWithoutBpt,\n                poolsSortedByLevel,\n                accountAddress,\n                chainId,\n            ),\n            bptAmountIn: getBptAmountIn(pool, bptAmountIn, calls, true),\n            minAmountsOut: Array(sortedTokens.length).fill(0n), // limits set to zero for query calls\n            toInternalBalance,\n            outputReferences: sortedTokensWithoutBpt.map((token) => {\n                return {\n                    key: Relayer.toChainedReference(\n                        BigInt(poolsSortedByLevel.indexOf(pool)) * 10n +\n                            BigInt(sortedTokens.indexOf(token)),\n                    ),\n                    index: BigInt(sortedTokens.indexOf(token)),\n                };\n            }),\n        });\n    }\n    return calls;\n};\n\nconst getSingleTokenCallsAttributes = (\n    poolsTopDown: NestedPool[],\n    chainId: ChainId,\n    accountAddress: Address,\n    bptAmountIn: bigint,\n    toInternalBalance: boolean,\n    tokenOut: Address,\n) => {\n    /**\n     * Overall logic to build sequence of remove liquidity nested single token calls:\n     * 1. Go BOTTOM-UP building remove liquidity path to tokenOut\n     * 2. Go through remove liquidity path filling out input amounts and output refs\n     * 3. Inputs will be bptAmountIn provided or output of the previous level\n     * 4. Output at bottom level is the amountOut\n     */\n\n    const removeLiquidityPath: NestedPool[] = getRemoveLiquidityPath(\n        tokenOut,\n        poolsTopDown,\n    );\n    const calls: RemoveLiquidityNestedCallAttributesV2[] = [];\n\n    for (let i = 0; i < removeLiquidityPath.length; i++) {\n        const pool = removeLiquidityPath[i];\n        const sortedTokens = pool.tokens\n            .sort((a, b) => a.index - b.index)\n            .map((t) => new Token(chainId, t.address, t.decimals));\n        const isLastCall = i === removeLiquidityPath.length - 1;\n        const currenTokenOut = isLastCall\n            ? tokenOut\n            : removeLiquidityPath[i + 1].address;\n        const tokenOutIndex = sortedTokens.findIndex((t) =>\n            t.isSameAddress(currenTokenOut),\n        );\n        calls.push({\n            chainId: chainId,\n            sortedTokens,\n            poolId: pool.id,\n            poolAddress: pool.address,\n            poolType: pool.type,\n            kind:\n                pool.type === PoolType.ComposableStable\n                    ? PoolKind.COMPOSABLE_STABLE_V2\n                    : PoolKind.WEIGHTED,\n            sender: i === 0 ? accountAddress : BALANCER_RELAYER[chainId],\n            recipient: isLastCall ? accountAddress : BALANCER_RELAYER[chainId],\n            bptAmountIn: getBptAmountIn(pool, bptAmountIn, calls, false),\n            minAmountsOut: Array(sortedTokens.length).fill(0n), // limits set to zero for query calls\n            toInternalBalance,\n            outputReferences: [\n                {\n                    key: Relayer.toChainedReference(\n                        BigInt(removeLiquidityPath.indexOf(pool)) * 10n +\n                            BigInt(tokenOutIndex),\n                    ),\n                    index: BigInt(tokenOutIndex),\n                },\n            ],\n            tokenOutIndex,\n        });\n    }\n    return calls;\n};\n\nconst getRemoveLiquidityPath = (\n    tokenOut: string,\n    poolsTopDown: NestedPool[],\n) => {\n    const topPool = poolsTopDown[0];\n    const removeLiquidityPath: NestedPool[] = [];\n    let tokenOutByLevel = tokenOut;\n    while (tokenOutByLevel !== topPool.address) {\n        const currentPool = poolsTopDown.find(\n            (p) =>\n                /**\n                 * Filter out pools that have tokenOutByLevel as it's own address\n                 * in order to prevent pools with BPT as token to be picked up\n                 * incorrectly - e.g. when removing liquidity from WETH/3-POOL to DAI, the\n                 * first iteration will pick 3-POOL as the \"bottom\" pool and update\n                 * tokenOutByLevel to 3-POOL-BPT. Since 3-POOL-BPT is contained\n                 * on both WETH/3-POOL and 3-POOL itself, simply checking if the\n                 * pool contains that token could result in the bottom pool being\n                 * picked up again.\n                 */\n                p.address !== tokenOutByLevel &&\n                p.tokens.some((t) => t.address === tokenOutByLevel),\n        ) as NestedPool;\n        removeLiquidityPath.unshift(currentPool);\n        tokenOutByLevel = currentPool.address;\n    }\n    return removeLiquidityPath;\n};\n\nconst getBptAmountIn = (\n    pool: NestedPool,\n    bptAmountIn: bigint,\n    calls: RemoveLiquidityNestedCallAttributesV2[],\n    isProportional: boolean,\n) => {\n    // first call has bptAmountIn provided as it's input\n    if (calls.length === 0) {\n        return {\n            amount: bptAmountIn,\n            isRef: false,\n        };\n    }\n\n    // following calls have their input as the outputReference of a previous call\n    let previousCall: RemoveLiquidityNestedCallAttributesV2;\n    let outputReferenceIndex: number;\n    if (isProportional) {\n        previousCall = calls.find((call) =>\n            call.sortedTokens\n                .map((token) => token.address)\n                .includes(pool.address),\n        ) as RemoveLiquidityNestedCallAttributesV2;\n        outputReferenceIndex = previousCall.sortedTokens\n            .map((token) => token.address)\n            .indexOf(pool.address);\n    } else {\n        previousCall = calls[calls.length - 1];\n        outputReferenceIndex = 0;\n    }\n    const previousCallOutputReference = previousCall.outputReferences.find(\n        (opRef) => opRef.index === BigInt(outputReferenceIndex),\n    ) as { key: bigint; index: bigint };\n    return {\n        amount: previousCallOutputReference.key,\n        isRef: true,\n    };\n};\n\n// Sender's logic: if there is a previous call, then the sender is the\n// recipient of that call, otherwise it's the user.\nconst getSenderProportional = (\n    calls: RemoveLiquidityNestedCallAttributesV2[],\n    poolAddress: Address,\n    accountAddress: Address,\n): Address => {\n    const previousCall = calls.find((_call) =>\n        _call.sortedTokens.map((token) => token.address).includes(poolAddress),\n    );\n    return previousCall !== undefined ? previousCall.recipient : accountAddress;\n};\n\n// Recipient's logic: if there is at least one token that is an output of the\n// whole multicall, then the recipient is the user, otherwise it's the relayer.\nconst getRecipientProportional = (\n    sortedTokensWithoutBpt: Token[],\n    poolsSortedByLevel: NestedPool[],\n    accountAddress: Address,\n    chainId: ChainId,\n): Address => {\n    const containsOutputToken = sortedTokensWithoutBpt.some(\n        (token) =>\n            !poolsSortedByLevel.some((_pool) =>\n                token.isSameAddress(_pool.address),\n            ),\n    );\n    return containsOutputToken ? accountAddress : BALANCER_RELAYER[chainId];\n};\n","import { NATIVE_ASSETS } from '../../../utils';\nimport { Token } from '../../token';\nimport { NestedPoolState } from '../../types';\nimport {\n    RemoveLiquidityNestedCallInputV2,\n    RemoveLiquidityNestedProportionalInputV2,\n    RemoveLiquidityNestedSingleTokenInputV2,\n} from './types';\n\nexport const validateQueryInput = (\n    input:\n        | RemoveLiquidityNestedProportionalInputV2\n        | RemoveLiquidityNestedSingleTokenInputV2,\n    nestedPoolState: NestedPoolState,\n) => {\n    const tokenOut = 'tokenOut' in input ? input.tokenOut : undefined;\n    const isProportional = tokenOut === undefined;\n    const mainTokens = nestedPoolState.mainTokens.map(\n        (token) => new Token(input.chainId, token.address, token.decimals),\n    );\n    if (!isProportional) {\n        validateInputsSingleToken(\n            input as RemoveLiquidityNestedSingleTokenInputV2,\n            mainTokens,\n        );\n    }\n\n    return isProportional;\n};\n\nconst validateInputsSingleToken = (\n    input: RemoveLiquidityNestedSingleTokenInputV2,\n    mainTokens: Token[],\n) => {\n    const tokenOut = mainTokens.find((t) => t.isSameAddress(input.tokenOut));\n\n    if (tokenOut === undefined) {\n        throw new Error(\n            `Removing liquidity to ${input.tokenOut} requires it to exist within main tokens`,\n        );\n    }\n};\n\nexport const validateBuildCallInput = (\n    input: RemoveLiquidityNestedCallInputV2,\n) => {\n    if (\n        input.wethIsEth &&\n        !input.amountsOut.some((a) =>\n            a.token.isSameAddress(NATIVE_ASSETS[input.chainId].wrapped),\n        )\n    ) {\n        throw new Error(\n            'Removing liquidity to native asset requires wrapped native asset to exist within amounts out',\n        );\n    }\n};\n","import {\n    Address,\n    createPublicClient,\n    encodeFunctionData,\n    Hex,\n    http,\n    zeroAddress,\n} from 'viem';\nimport { NestedPoolState } from '@/entities/types';\nimport {\n    RemoveLiquidityNestedCallInputV3,\n    RemoveLiquidityNestedProportionalInputV3,\n    RemoveLiquidityNestedQueryOutputV3,\n} from './types';\nimport { RemoveLiquidityNestedBuildCallOutput } from '../types';\nimport { BALANCER_COMPOSITE_LIQUIDITY_ROUTER, CHAINS } from '@/utils';\nimport {\n    balancerCompositeLiquidityRouterAbi,\n    permit2Abi,\n    vaultExtensionAbi_V3,\n    vaultV3Abi,\n} from '@/abi';\nimport { Token } from '@/entities/token';\nimport { TokenAmount } from '@/entities/tokenAmount';\n\nexport class RemoveLiquidityNestedV3 {\n    async query(\n        input: RemoveLiquidityNestedProportionalInputV3,\n        nestedPoolState: NestedPoolState,\n    ): Promise<RemoveLiquidityNestedQueryOutputV3> {\n        // Address of the highest level pool (which contains BPTs of other pools), i.e. the pool we wish to join\n        const parentPool = nestedPoolState.pools.reduce((max, curr) =>\n            curr.level > max.level ? curr : max,\n        );\n        // query function input, `tokensIn` array, must have all tokens from child pools\n        // and all tokens that are not BPTs from the nested pool (parent pool).\n        const mainTokens = nestedPoolState.mainTokens.map(\n            (t) => new Token(input.chainId, t.address, t.decimals),\n        );\n\n        const bptToken = new Token(input.chainId, parentPool.address, 18);\n\n        const amountsOut =\n            await this.doQueryRemoveLiquidityProportionalNestedPool(\n                input,\n                parentPool.address,\n                input.bptAmountIn,\n                mainTokens.map((t) => t.address),\n                input.sender ?? zeroAddress,\n                input.userData ?? '0x',\n            );\n\n        return {\n            to: BALANCER_COMPOSITE_LIQUIDITY_ROUTER[input.chainId],\n            protocolVersion: 3,\n            bptAmountIn: TokenAmount.fromRawAmount(bptToken, input.bptAmountIn),\n            chainId: input.chainId,\n            parentPool: parentPool.address,\n            userData: input.userData ?? '0x',\n            amountsOut: amountsOut.map((a, i) =>\n                TokenAmount.fromRawAmount(mainTokens[i], a),\n            ),\n        };\n    }\n\n    buildCall(\n        input: RemoveLiquidityNestedCallInputV3,\n    ): RemoveLiquidityNestedBuildCallOutput {\n        // validateBuildCallInput(input); TODO - Add this like V2 once weth/native is allowed\n\n        // apply slippage to amountsOut\n        const minAmountsOut = input.amountsOut.map((amountOut) =>\n            TokenAmount.fromRawAmount(\n                amountOut.token,\n                input.slippage.applyTo(amountOut.amount, -1),\n            ),\n        );\n\n        const callData = encodeFunctionData({\n            abi: balancerCompositeLiquidityRouterAbi,\n            functionName: 'removeLiquidityProportionalNestedPool',\n            args: [\n                input.parentPool,\n                input.bptAmountIn.amount,\n                minAmountsOut.map((a) => a.token.address),\n                minAmountsOut.map((a) => a.amount),\n                input.wethIsEth ?? false,\n                input.userData,\n            ],\n        });\n        return {\n            callData,\n            to: BALANCER_COMPOSITE_LIQUIDITY_ROUTER[input.chainId],\n            minAmountsOut,\n        } as RemoveLiquidityNestedBuildCallOutput;\n    }\n\n    private doQueryRemoveLiquidityProportionalNestedPool = async (\n        { rpcUrl, chainId }: RemoveLiquidityNestedProportionalInputV3,\n        parentPool: Address,\n        exactBptAmountIn: bigint,\n        tokensOut: Address[],\n        sender: Address,\n        userData: Hex,\n    ) => {\n        const client = createPublicClient({\n            transport: http(rpcUrl),\n            chain: CHAINS[chainId],\n        });\n\n        const { result: amountsOut } = await client.simulateContract({\n            address: BALANCER_COMPOSITE_LIQUIDITY_ROUTER[chainId],\n            abi: [\n                ...balancerCompositeLiquidityRouterAbi,\n                ...vaultV3Abi,\n                ...vaultExtensionAbi_V3,\n                ...permit2Abi,\n            ],\n            functionName: 'queryRemoveLiquidityProportionalNestedPool',\n            args: [parentPool, exactBptAmountIn, tokensOut, sender, userData],\n        });\n        return amountsOut;\n    };\n}\n","import { NestedPoolState, Permit, Slippage } from '@/entities';\nimport { validateNestedPoolState } from '@/entities/utils';\nimport { RemoveLiquidityNestedV2 } from './removeLiquidityNestedV2';\nimport {\n    RemoveLiquidityNestedInput,\n    RemoveLiquidityNestedQueryOutput,\n    RemoveLiquidityNestedCallInput,\n    RemoveLiquidityNestedBuildCallOutput,\n} from './types';\nimport { RemoveLiquidityNestedV3 } from './removeLiquidityNestedV3';\nimport { validateBuildCallInput } from './removeLiquidityNestedV2/validateInputs';\nimport { Address, encodeFunctionData, Hex, zeroAddress } from 'viem';\nimport { balancerCompositeLiquidityRouterAbi } from '@/abi';\n\nexport class RemoveLiquidityNested {\n    async query(\n        input: RemoveLiquidityNestedInput,\n        nestedPoolState: NestedPoolState,\n    ): Promise<RemoveLiquidityNestedQueryOutput> {\n        validateNestedPoolState(nestedPoolState);\n        switch (nestedPoolState.protocolVersion) {\n            case 1: {\n                throw new Error(\n                    'RemoveLiquidityNested not supported for ProtocolVersion 1.',\n                );\n            }\n            case 2: {\n                const removeLiquidity = new RemoveLiquidityNestedV2();\n                return removeLiquidity.query(input, nestedPoolState);\n            }\n            case 3: {\n                const removeLiquidity = new RemoveLiquidityNestedV3();\n                return removeLiquidity.query(input, nestedPoolState);\n            }\n        }\n    }\n\n    buildCall(\n        input: RemoveLiquidityNestedCallInput,\n    ): RemoveLiquidityNestedBuildCallOutput {\n        switch (input.protocolVersion) {\n            case 2: {\n                validateBuildCallInput(input);\n                const removeLiquidity = new RemoveLiquidityNestedV2();\n                return removeLiquidity.buildCall(input);\n            }\n            case 3: {\n                const removeLiquidity = new RemoveLiquidityNestedV3();\n                return removeLiquidity.buildCall(input);\n            }\n        }\n    }\n\n    public buildCallWithPermit(\n        input: RemoveLiquidityNestedCallInput,\n        permit: Permit,\n    ): RemoveLiquidityNestedBuildCallOutput {\n        const buildCallOutput = this.buildCall(input);\n\n        const args = [\n            permit.batch,\n            permit.signatures,\n            { details: [], spender: zeroAddress, sigDeadline: 0n },\n            '0x',\n            [buildCallOutput.callData],\n        ] as const;\n        const callData = encodeFunctionData({\n            abi: balancerCompositeLiquidityRouterAbi,\n            functionName: 'permitBatchAndCall',\n            args,\n        });\n\n        return {\n            ...buildCallOutput,\n            callData,\n        };\n    }\n\n    /**\n     * Helper to construct RemoveLiquidityNestedCallInput with proper type resolving.\n     * @param queryOutput\n     * @param params\n     * @returns RemoveLiquidityNestedCallInput\n     */\n    buildRemoveLiquidityInput(\n        queryOutput: RemoveLiquidityNestedQueryOutput,\n        params: {\n            slippage: Slippage;\n            accountAddress?: Address;\n            relayerApprovalSignature?: Hex;\n            wethIsEth?: boolean;\n        },\n    ): RemoveLiquidityNestedCallInput {\n        if (queryOutput.protocolVersion === 2) {\n            return {\n                ...queryOutput,\n                protocolVersion: 2,\n                slippage: params.slippage,\n                accountAddress: params.accountAddress!,\n                relayerApprovalSignature: params.relayerApprovalSignature,\n                wethIsEth: params.wethIsEth,\n            };\n        }\n        return {\n            ...queryOutput,\n            protocolVersion: 3,\n            slippage: params.slippage,\n        };\n    }\n}\n","import { PathWithAmount } from './pathWithAmount';\nimport { TokenAmount } from '../../tokenAmount';\nimport { isSameAddress } from '@/utils';\nimport { Path } from './types';\nimport { Address } from 'viem';\n\nexport function getInputAmount(paths: PathWithAmount[]): TokenAmount {\n    if (\n        !paths.every((p) =>\n            p.inputAmount.token.isEqual(paths[0].inputAmount.token),\n        )\n    ) {\n        throw new Error(\n            'Input amount can only be calculated if all paths have the same input token',\n        );\n    }\n    const amounts = paths.map((path) => path.inputAmount);\n    return amounts.reduce((a, b) => a.add(b));\n}\n\nexport function getOutputAmount(paths: PathWithAmount[]): TokenAmount {\n    if (\n        !paths.every((p) =>\n            p.outputAmount.token.isEqual(paths[0].outputAmount.token),\n        )\n    ) {\n        throw new Error(\n            'Output amount can only be calculated if all paths have the same output token',\n        );\n    }\n    const amounts = paths.map((path) => path.outputAmount);\n    return amounts.reduce((a, b) => a.add(b));\n}\n\nexport function validatePaths(paths: Path[]) {\n    if (paths.length === 0)\n        throw new Error('Invalid swap: must contain at least 1 path.');\n\n    validateBufferVersion(paths);\n    validateBufferLength(paths);\n\n    const protocolVersion = paths[0].protocolVersion;\n    if (!paths.every((p) => p.protocolVersion === protocolVersion))\n        throw new Error(\n            'Unsupported swap: all paths must use same Balancer version.',\n        );\n\n    const tokenIn = paths[0].tokens[0].address.toLowerCase();\n    const tokenOut =\n        paths[0].tokens[paths[0].tokens.length - 1].address.toLowerCase();\n    if (\n        !paths.every(\n            (p) =>\n                p.tokens[0].address.toLowerCase() === tokenIn &&\n                p.tokens[p.tokens.length - 1].address.toLowerCase() ===\n                    tokenOut,\n        )\n    ) {\n        throw new Error(\n            'Unsupported swap: all paths must start/end with same token.',\n        );\n    }\n}\n\nfunction validateBufferVersion(paths: Path[]) {\n    if (\n        !paths.every((p) => {\n            return p.isBuffer?.some((b) => b === true)\n                ? p.protocolVersion === 3\n                : true;\n        })\n    ) {\n        throw new Error('Unsupported swap: buffers not supported in V2.');\n    }\n}\n\nfunction validateBufferLength(paths: Path[]) {\n    if (\n        !paths.every((p) => {\n            return p.isBuffer ? p.isBuffer.length === p.pools.length : true;\n        })\n    ) {\n        throw new Error(\n            'Unsupported swap: buffers and pools must have same length.',\n        );\n    }\n}\n\n/**\n * Determines if the given paths represent a batch swap.\n *\n * A batch swap is identified by one of the following conditions:\n * - There is more than one path.\n * - The first path contains more than one pool.\n * - The input token is the same as the first pool in the first path. (a BPT swap)\n * - The output token is the same as the first pool in the first path. (a BPT swap)\n */\nexport function isBatchSwap(\n    paths: Path[],\n    inputToken: Address,\n    outputToken: Address,\n): boolean {\n    return (\n        paths.length > 1 ||\n        paths[0].pools.length > 1 ||\n        isSameAddress(paths[0].pools[0], inputToken) ||\n        isSameAddress(paths[0].pools[0], outputToken)\n    );\n}\n","import { TokenAmount } from '../../tokenAmount';\nimport { Address } from 'viem';\nimport { Token } from '../../token';\nimport { TokenApi } from './types';\n\nexport class PathWithAmount {\n    public readonly pools: Address[];\n    public readonly isBuffer: boolean[];\n    public readonly tokens: TokenApi[];\n    public readonly outputAmount: TokenAmount;\n    public readonly inputAmount: TokenAmount;\n\n    public constructor(\n        chainId: number,\n        tokens: TokenApi[],\n        pools: Address[],\n        inputAmountRaw: bigint,\n        outputAmountRaw: bigint,\n        isBuffer: boolean[] | undefined,\n    ) {\n        if (pools.length === 0 || tokens.length < 2) {\n            throw new Error(\n                'Invalid path: must contain at least 1 pool and 2 tokens.',\n            );\n        }\n        if (tokens.length !== pools.length + 1) {\n            throw new Error(\n                'Invalid path: tokens length must equal pools length + 1',\n            );\n        }\n\n        const tokenIn = new Token(\n            chainId,\n            tokens[0].address,\n            tokens[0].decimals,\n        );\n        const tokenOut = new Token(\n            chainId,\n            tokens[tokens.length - 1].address,\n            tokens[tokens.length - 1].decimals,\n        );\n        this.pools = pools;\n        this.isBuffer = isBuffer\n            ? isBuffer\n            : new Array(this.pools.length).fill(false);\n        this.tokens = tokens;\n        this.inputAmount = TokenAmount.fromRawAmount(tokenIn, inputAmountRaw);\n        this.outputAmount = TokenAmount.fromRawAmount(\n            tokenOut,\n            outputAmountRaw,\n        );\n    }\n}\n","import {\n    Address,\n    createPublicClient,\n    encodeFunctionData,\n    getContract,\n    http,\n} from 'viem';\n\nimport { balancerQueriesAbi, vaultV2Abi } from '../../../../abi';\nimport { BatchSwapStep, Hex, SingleSwap, SwapKind } from '../../../../types';\nimport {\n    BALANCER_QUERIES,\n    CHAINS,\n    ChainId,\n    DEFAULT_FUND_MANAGMENT,\n    DEFAULT_USERDATA,\n    MAX_UINT256,\n    NATIVE_ASSETS,\n    VAULT,\n    ZERO_ADDRESS,\n    abs,\n} from '../../../../utils';\nimport { TokenAmount } from '../../../tokenAmount';\nimport { getLimitAmount } from '../../limits';\nimport { getInputAmount, getOutputAmount } from '../../paths/pathHelpers';\nimport { PathWithAmount } from '../../paths/pathWithAmount';\nimport {\n    ExactInQueryOutput,\n    ExactOutQueryOutput,\n    SwapBuildCallInput,\n    SwapBuildOutputExactIn,\n    SwapBuildOutputExactOut,\n    SwapInput,\n} from '../../types';\nimport { SwapBase } from '../types';\nimport { SwapBuildCallInputBaseV2 } from './types';\n\nexport * from './types';\n\n// A Swap can be a single or multiple paths\nexport class SwapV2 implements SwapBase {\n    public constructor({ chainId, paths, swapKind }: SwapInput) {\n        if (paths.length === 0)\n            throw new Error('Invalid swap: must contain at least 1 path.');\n\n        this.paths = paths.map(\n            (p) =>\n                new PathWithAmount(\n                    chainId,\n                    p.tokens.map((t) => {\n                        return {\n                            ...t,\n                            address: t.address.toLowerCase() as Address,\n                        };\n                    }),\n                    p.pools.map((pool) => pool.toLowerCase() as Address),\n                    p.inputAmountRaw,\n                    p.outputAmountRaw,\n                    undefined,\n                ),\n        );\n\n        this.chainId = chainId;\n        this.swapKind = swapKind;\n        this.inputAmount = getInputAmount(this.paths);\n        this.outputAmount = getOutputAmount(this.paths);\n        this.isBatchSwap =\n            this.paths.length > 1 || this.paths[0].pools.length > 1;\n        this.assets = [\n            ...new Set(\n                this.paths.flatMap((p) => p.tokens).map((t) => t.address),\n            ),\n        ];\n        const swaps = this.getSwaps(this.paths);\n        this.swaps = swaps;\n    }\n\n    public readonly chainId: number;\n    public readonly isBatchSwap: boolean;\n    public readonly paths: PathWithAmount[];\n    public readonly assets: Address[];\n    public readonly swapKind: SwapKind;\n    public swaps: BatchSwapStep[] | SingleSwap;\n    public readonly inputAmount: TokenAmount;\n    public readonly outputAmount: TokenAmount;\n\n    public get quote(): TokenAmount {\n        return this.swapKind === SwapKind.GivenIn\n            ? this.outputAmount\n            : this.inputAmount;\n    }\n\n    // rpcUrl is optional, but recommended to prevent rate limiting\n    public async query(\n        rpcUrl?: string,\n        block?: bigint,\n    ): Promise<ExactInQueryOutput | ExactOutQueryOutput> {\n        const client = createPublicClient({\n            chain: CHAINS[this.chainId],\n            transport: rpcUrl ? http(rpcUrl) : http(),\n        });\n\n        const queriesContract = getContract({\n            address: BALANCER_QUERIES[this.chainId],\n            abi: balancerQueriesAbi,\n            client,\n        });\n        return this.isBatchSwap\n            ? this.queryBatchSwap(queriesContract, block)\n            : this.querySingleSwap(queriesContract, block);\n    }\n\n    private async querySingleSwap(\n        queriesContract,\n        block?: bigint,\n    ): Promise<ExactInQueryOutput | ExactOutQueryOutput> {\n        const { result } = await queriesContract.simulate.querySwap(\n            [this.swaps as SingleSwap, DEFAULT_FUND_MANAGMENT],\n            { blockNumber: block },\n        );\n\n        if (this.swapKind === SwapKind.GivenIn) {\n            return {\n                to: VAULT[this.chainId],\n                swapKind: SwapKind.GivenIn,\n                expectedAmountOut: TokenAmount.fromRawAmount(\n                    this.outputAmount.token,\n                    result,\n                ),\n                amountIn: this.inputAmount,\n            };\n        }\n        return {\n            to: VAULT[this.chainId],\n            swapKind: SwapKind.GivenOut,\n            expectedAmountIn: TokenAmount.fromRawAmount(\n                this.inputAmount.token,\n                result,\n            ),\n            amountOut: this.outputAmount,\n        };\n    }\n\n    private async queryBatchSwap(\n        queriesContract,\n        block?: bigint,\n    ): Promise<ExactInQueryOutput | ExactOutQueryOutput> {\n        const { result } = await queriesContract.simulate.queryBatchSwap(\n            [\n                this.swapKind,\n                this.swaps as BatchSwapStep[],\n                this.assets,\n                DEFAULT_FUND_MANAGMENT,\n            ],\n            {\n                blockNumber: block,\n            },\n        );\n\n        if (this.swapKind === SwapKind.GivenIn) {\n            return {\n                to: VAULT[this.chainId],\n                swapKind: SwapKind.GivenIn,\n                expectedAmountOut: TokenAmount.fromRawAmount(\n                    this.outputAmount.token,\n                    abs(\n                        result[\n                            this.assets.indexOf(this.outputAmount.token.address)\n                        ],\n                    ),\n                ),\n                amountIn: this.inputAmount,\n            };\n        }\n        return {\n            to: VAULT[this.chainId],\n            swapKind: SwapKind.GivenOut,\n            expectedAmountIn: TokenAmount.fromRawAmount(\n                this.inputAmount.token,\n                abs(\n                    result[this.assets.indexOf(this.inputAmount.token.address)],\n                ),\n            ),\n            amountOut: this.outputAmount,\n        };\n    }\n\n    private convertWrappedToZero(chainId: ChainId, address: Address): Address {\n        return address.toLowerCase() ===\n            NATIVE_ASSETS[chainId].wrapped.toLowerCase()\n            ? ZERO_ADDRESS\n            : address;\n    }\n\n    public queryCallData(): string {\n        let callData: string;\n        if (this.isBatchSwap) {\n            callData = encodeFunctionData({\n                abi: balancerQueriesAbi,\n                functionName: 'queryBatchSwap',\n                args: [\n                    this.swapKind,\n                    this.swaps as BatchSwapStep[],\n                    this.assets,\n                    DEFAULT_FUND_MANAGMENT,\n                ],\n            });\n        } else {\n            callData = encodeFunctionData({\n                abi: balancerQueriesAbi,\n                functionName: 'querySwap',\n                args: [this.swaps as SingleSwap, DEFAULT_FUND_MANAGMENT],\n            });\n        }\n        return callData;\n    }\n\n    /**\n     * Returns the limits for a batchSwap\n     *\n     * @param limitAmount maxAmountIn/minAmountOut depending on swap kind\n     * @returns\n     */\n    limitsBatchSwap(limitAmount: TokenAmount): bigint[] {\n        const limits = new Array(this.assets.length).fill(0n);\n\n        if (!this.isBatchSwap) {\n            throw new Error('Limits: Non batchSwap path.');\n        }\n\n        for (let i = 0; i < this.assets.length; i++) {\n            if (this.assets[i] === this.inputAmount.token.address) {\n                if (this.swapKind === SwapKind.GivenIn) {\n                    limits[i] = this.inputAmount.amount;\n                } else {\n                    limits[i] = limitAmount.amount;\n                }\n            }\n            if (this.assets[i] === this.outputAmount.token.address) {\n                if (this.swapKind === SwapKind.GivenIn) {\n                    limits[i] = -1n * limitAmount.amount;\n                } else {\n                    limits[i] = -1n * this.outputAmount.amount;\n                }\n            }\n        }\n\n        return limits;\n    }\n\n    /**\n     * Returns the transaction data to be sent to the vault contract\n     *\n     * @param input\n     * @returns\n     */\n    buildCall(\n        input: SwapBuildCallInput & SwapBuildCallInputBaseV2,\n    ): SwapBuildOutputExactIn | SwapBuildOutputExactOut {\n        let limitAmount: TokenAmount;\n        if (input.queryOutput.swapKind === SwapKind.GivenIn) {\n            limitAmount = getLimitAmount(\n                input.slippage,\n                SwapKind.GivenIn,\n                input.queryOutput.expectedAmountOut,\n            );\n        } else {\n            limitAmount = getLimitAmount(\n                input.slippage,\n                SwapKind.GivenOut,\n                input.queryOutput.expectedAmountIn,\n            );\n        }\n        const funds = {\n            sender: input.sender,\n            recipient: input.recipient,\n            fromInternalBalance: false, // Set default to false as not supported in V3 and keeps interface simple\n            toInternalBalance: false,\n        };\n        let callData: Hex;\n        if (this.isBatchSwap) {\n            const limits = this.limitsBatchSwap(limitAmount);\n            callData = this.callDataBatchSwap(\n                limits,\n                input.deadline ?? MAX_UINT256,\n                funds,\n                !!input.wethIsEth,\n            );\n        } else {\n            callData = this.callDataSingleSwap(\n                limitAmount.amount,\n                input.deadline ?? MAX_UINT256,\n                funds,\n                !!input.wethIsEth,\n            );\n        }\n        if (this.swapKind === SwapKind.GivenIn) {\n            return {\n                to: VAULT[this.chainId],\n                callData,\n                value: this.value(limitAmount, !!input.wethIsEth),\n                minAmountOut: limitAmount,\n            };\n        }\n        return {\n            to: VAULT[this.chainId],\n            callData,\n            value: this.value(limitAmount, !!input.wethIsEth),\n            maxAmountIn: limitAmount,\n        };\n    }\n\n    buildCallWithPermit2(): SwapBuildOutputExactIn | SwapBuildOutputExactOut {\n        throw new Error('buildCallWithPermit2 is not supported on v2');\n    }\n\n    /**\n     * Returns the native assset value to be sent to the vault contract based on the swap kind and the limit\n     *\n     * @param limitAmount\n     * @returns\n     */\n    private value(limitAmount: TokenAmount, wethIsEth: boolean): bigint {\n        let value = 0n;\n        if (\n            wethIsEth &&\n            this.inputAmount.token.address ===\n                NATIVE_ASSETS[this.chainId].wrapped\n        ) {\n            if (this.swapKind === SwapKind.GivenIn)\n                value = this.inputAmount.amount;\n            else value = limitAmount.amount;\n        }\n        return value;\n    }\n\n    /**\n     * Returns the call data to be sent to the vault contract for the swap execution.\n     *\n     * @param limit Limit amount (minOut for ExactIn, maxIn for ExactOut)\n     * @param deadline unix timestamp\n     * @param funds FundManagement\n     * @returns\n     */\n    private callDataSingleSwap(\n        limit: bigint,\n        deadline: bigint,\n        funds,\n        wethIsEth: boolean,\n    ): Hex {\n        const swap = { ...this.swaps } as SingleSwap;\n        if (wethIsEth) {\n            swap.assetIn = this.convertWrappedToZero(\n                this.chainId,\n                swap.assetIn,\n            );\n            swap.assetOut = this.convertWrappedToZero(\n                this.chainId,\n                swap.assetOut,\n            );\n        }\n        return encodeFunctionData({\n            abi: vaultV2Abi,\n            functionName: 'swap',\n            args: [swap, funds, limit, deadline],\n        });\n    }\n\n    /**\n     * Returns the call data to be sent to the vault contract for the swap execution.\n     *\n     * @param limits calculated from swap.limits()\n     * @param deadline unix timestamp\n     * @param funds FundManagement\n     * @returns\n     */\n    private callDataBatchSwap(\n        limits: bigint[],\n        deadline: bigint,\n        funds,\n        wethIsEth: boolean,\n    ): Hex {\n        return encodeFunctionData({\n            abi: vaultV2Abi,\n            functionName: 'batchSwap',\n            args: [\n                this.swapKind,\n                this.swaps as BatchSwapStep[],\n                wethIsEth\n                    ? this.assets.map((a) =>\n                          this.convertWrappedToZero(this.chainId, a),\n                      )\n                    : this.assets,\n                funds,\n                limits,\n                deadline,\n            ],\n        });\n    }\n\n    // helper methods\n\n    private getSwaps(paths: PathWithAmount[]) {\n        let swaps: BatchSwapStep[] | SingleSwap;\n        if (this.isBatchSwap) {\n            swaps = [] as BatchSwapStep[];\n            if (this.swapKind === SwapKind.GivenIn) {\n                paths.map((p) => {\n                    p.pools.map((pool, i) => {\n                        (swaps as BatchSwapStep[]).push({\n                            poolId: pool,\n                            assetInIndex: BigInt(\n                                this.assets.indexOf(p.tokens[i].address),\n                            ),\n                            assetOutIndex: BigInt(\n                                this.assets.indexOf(p.tokens[i + 1].address),\n                            ),\n                            amount: i === 0 ? p.inputAmount.amount : 0n,\n                            userData: DEFAULT_USERDATA,\n                        });\n                    });\n                });\n            } else {\n                paths.map((p) => {\n                    // Vault expects given out swaps to be in reverse order\n                    const reversedPools = [...p.pools].reverse();\n                    const reversedTokens = [...p.tokens].reverse();\n                    reversedPools.map((pool, i) => {\n                        (swaps as BatchSwapStep[]).push({\n                            poolId: pool,\n                            assetInIndex: BigInt(\n                                this.assets.indexOf(\n                                    reversedTokens[i + 1].address,\n                                ),\n                            ),\n                            assetOutIndex: BigInt(\n                                this.assets.indexOf(reversedTokens[i].address),\n                            ),\n                            amount: i === 0 ? p.outputAmount.amount : 0n,\n                            userData: DEFAULT_USERDATA,\n                        });\n                    });\n                });\n            }\n        } else {\n            const path = paths[0];\n            const pool = path.pools[0];\n            swaps = {\n                poolId: pool,\n                kind: this.swapKind,\n                assetIn: path.tokens[0].address,\n                assetOut: path.tokens[1].address,\n                amount:\n                    this.swapKind === SwapKind.GivenIn\n                        ? path.inputAmount.amount\n                        : path.outputAmount.amount,\n                userData: DEFAULT_USERDATA,\n            } as SingleSwap;\n        }\n        return swaps;\n    }\n}\n","import {\n    Address,\n    PublicClient,\n    createPublicClient,\n    encodeFunctionData,\n    getContract,\n    http,\n    zeroAddress,\n} from 'viem';\nimport { TokenAmount } from '../../../tokenAmount';\nimport { SwapKind, Hex } from '../../../../types';\nimport {\n    DEFAULT_USERDATA,\n    BALANCER_ROUTER,\n    NATIVE_ASSETS,\n    BALANCER_BATCH_ROUTER,\n    MAX_UINT256,\n    CHAINS,\n} from '../../../../utils';\nimport {\n    balancerRouterAbi,\n    permit2Abi,\n    vaultExtensionAbi_V3,\n    vaultV3Abi,\n} from '../../../../abi';\nimport {\n    ExactInQueryOutput,\n    ExactOutQueryOutput,\n    SwapBuildCallInput,\n    SwapBuildOutputExactIn,\n    SwapBuildOutputExactOut,\n    SwapInput,\n} from '../../types';\nimport { PathWithAmount } from '../../paths/pathWithAmount';\nimport {\n    getInputAmount,\n    getOutputAmount,\n    isBatchSwap,\n} from '../../paths/pathHelpers';\nimport {\n    SingleTokenExactIn,\n    SingleTokenExactOut,\n    SwapPathExactAmountIn,\n    SwapPathExactAmountInWithLimit,\n    SwapPathExactAmountOut,\n    SwapPathExactAmountOutWithLimit,\n} from './types';\nimport { balancerBatchRouterAbi } from '@/abi/balancerBatchRouter';\nimport { SwapBase } from '../types';\nimport { getLimitAmount, getPathLimits } from '../../limits';\nimport { Permit2 } from '@/entities/permit2Helper';\n\nexport * from './types';\n\n// A Swap can be a single or multiple paths\nexport class SwapV3 implements SwapBase {\n    public constructor({\n        chainId,\n        paths,\n        swapKind,\n        userData = DEFAULT_USERDATA,\n    }: SwapInput) {\n        if (paths.length === 0)\n            throw new Error('Invalid swap: must contain at least 1 path.');\n\n        this.paths = paths.map(\n            (p) =>\n                new PathWithAmount(\n                    chainId,\n                    p.tokens,\n                    p.pools,\n                    p.inputAmountRaw,\n                    p.outputAmountRaw,\n                    p.isBuffer,\n                ),\n        );\n\n        this.chainId = chainId;\n        this.swapKind = swapKind;\n        this.inputAmount = getInputAmount(this.paths);\n        this.outputAmount = getOutputAmount(this.paths);\n        this.isBatchSwap = isBatchSwap(\n            paths,\n            this.inputAmount.token.address,\n            this.outputAmount.token.address,\n        );\n        this.swaps = this.getSwaps(this.paths);\n        this.userData = userData;\n    }\n\n    public readonly chainId: number;\n    public readonly isBatchSwap: boolean;\n    public readonly paths: PathWithAmount[];\n    public readonly swapKind: SwapKind;\n    public readonly userData: Hex;\n    public swaps:\n        | SingleTokenExactIn\n        | SingleTokenExactOut\n        | SwapPathExactAmountIn[]\n        | SwapPathExactAmountOut[];\n    public readonly inputAmount: TokenAmount;\n    public readonly outputAmount: TokenAmount;\n\n    public get quote(): TokenAmount {\n        return this.swapKind === SwapKind.GivenIn\n            ? this.outputAmount\n            : this.inputAmount;\n    }\n\n    // rpcUrl is optional, but recommended to prevent rate limiting\n    public async query(\n        rpcUrl?: string,\n        block?: bigint,\n        sender?: Address,\n    ): Promise<ExactInQueryOutput | ExactOutQueryOutput> {\n        const client = createPublicClient({\n            chain: CHAINS[this.chainId],\n            transport: rpcUrl ? http(rpcUrl) : http(),\n        });\n\n        return this.isBatchSwap\n            ? this.queryBatchSwap(client, block, sender)\n            : this.querySingleSwap(client, block, sender);\n    }\n\n    private async querySingleSwap(\n        client: PublicClient,\n        block?: bigint,\n        sender?: Address,\n    ): Promise<ExactInQueryOutput | ExactOutQueryOutput> {\n        const routerContract = getContract({\n            address: BALANCER_ROUTER[this.chainId],\n            abi: [\n                ...balancerRouterAbi,\n                ...vaultV3Abi,\n                ...vaultExtensionAbi_V3,\n                ...permit2Abi,\n            ],\n            client,\n        });\n        if ('exactAmountIn' in this.swaps) {\n            const { result } =\n                await routerContract.simulate.querySwapSingleTokenExactIn(\n                    [\n                        this.swaps.pool,\n                        this.swaps.tokenIn,\n                        this.swaps.tokenOut,\n                        this.swaps.exactAmountIn,\n                        sender ?? zeroAddress,\n                        this.userData,\n                    ],\n                    { blockNumber: block },\n                );\n            return {\n                to: BALANCER_ROUTER[this.chainId],\n                swapKind: SwapKind.GivenIn,\n                expectedAmountOut: TokenAmount.fromRawAmount(\n                    this.outputAmount.token,\n                    result,\n                ),\n                amountIn: this.inputAmount,\n            };\n        }\n        if ('exactAmountOut' in this.swaps) {\n            const { result } =\n                await routerContract.simulate.querySwapSingleTokenExactOut(\n                    [\n                        this.swaps.pool,\n                        this.swaps.tokenIn,\n                        this.swaps.tokenOut,\n                        this.swaps.exactAmountOut,\n                        sender ?? zeroAddress,\n                        this.userData,\n                    ],\n                    { blockNumber: block },\n                );\n            return {\n                to: BALANCER_ROUTER[this.chainId],\n                swapKind: SwapKind.GivenOut,\n                expectedAmountIn: TokenAmount.fromRawAmount(\n                    this.inputAmount.token,\n                    result,\n                ),\n                amountOut: this.outputAmount,\n            };\n        }\n        throw Error('Unsupported V3 Query');\n    }\n\n    private getSwapsWithLimits(pathLimits?: bigint[]): {\n        swapsWithLimits:\n            | SwapPathExactAmountInWithLimit[]\n            | SwapPathExactAmountOutWithLimit[];\n        totalPathLimits: bigint;\n    } {\n        let totalPathLimits = 0n;\n        if (this.swapKind === SwapKind.GivenIn) {\n            const swapsWithLimits = (this.swaps as SwapPathExactAmountIn[]).map(\n                (s, i) => {\n                    const minAmountOut = pathLimits ? pathLimits[i] : 0n;\n                    totalPathLimits += minAmountOut;\n                    return {\n                        ...s,\n                        minAmountOut,\n                    };\n                },\n            );\n            return { swapsWithLimits, totalPathLimits };\n        }\n        const swapsWithLimits = (this.swaps as SwapPathExactAmountOut[]).map(\n            (s, i) => {\n                const maxAmountIn = pathLimits ? pathLimits[i] : 0n;\n                totalPathLimits += maxAmountIn;\n                return {\n                    ...s,\n                    maxAmountIn,\n                };\n            },\n        );\n        return { swapsWithLimits, totalPathLimits };\n    }\n\n    private async queryBatchSwap(\n        client: PublicClient,\n        block?: bigint,\n        sender?: Address,\n    ): Promise<ExactInQueryOutput | ExactOutQueryOutput> {\n        // Note - batchSwaps are made via the Batch Router\n        const batchRouterContract = getContract({\n            address: BALANCER_BATCH_ROUTER[this.chainId],\n            abi: [\n                ...balancerBatchRouterAbi,\n                ...vaultV3Abi,\n                ...vaultExtensionAbi_V3,\n                ...permit2Abi,\n            ],\n            client,\n        });\n        /*\n        In V3 all paths must have individual limits set using minAmountOut/maxAmountIn. \n        pathAmountsOut/In returned by query can be used along with slippage to set these correctly.\n        */\n        const swapsWithLimits = this.getSwapsWithLimits();\n\n        if (this.swapKind === SwapKind.GivenIn) {\n            const { result } =\n                await batchRouterContract.simulate.querySwapExactIn(\n                    [\n                        swapsWithLimits.swapsWithLimits as SwapPathExactAmountInWithLimit[],\n                        sender ?? zeroAddress,\n                        this.userData,\n                    ],\n                    { blockNumber: block },\n                );\n\n            if (result[1].length !== 1)\n                throw Error(\n                    'Swaps only support paths with matching tokenIn>tokenOut',\n                );\n\n            return {\n                to: BALANCER_BATCH_ROUTER[this.chainId],\n                swapKind: SwapKind.GivenIn,\n                expectedAmountOut: TokenAmount.fromRawAmount(\n                    this.outputAmount.token,\n                    result[2][0],\n                ),\n                amountIn: this.inputAmount,\n                pathAmounts: result[0] as bigint[],\n            };\n        }\n\n        const { result } = await batchRouterContract.simulate.querySwapExactOut(\n            [\n                swapsWithLimits.swapsWithLimits as SwapPathExactAmountOutWithLimit[],\n                sender ?? zeroAddress,\n                this.userData,\n            ],\n            { blockNumber: block },\n        );\n\n        if (result[1].length !== 1)\n            throw Error(\n                'Swaps only support paths with matching tokenIn>tokenOut',\n            );\n\n        return {\n            to: BALANCER_BATCH_ROUTER[this.chainId],\n            swapKind: SwapKind.GivenOut,\n            expectedAmountIn: TokenAmount.fromRawAmount(\n                this.inputAmount.token,\n                result[2][0],\n            ),\n            amountOut: this.outputAmount,\n            pathAmounts: result[0] as bigint[],\n        };\n    }\n\n    public queryCallData(): string {\n        let callData: string;\n        if (this.isBatchSwap) {\n            const swapsWithLimits = this.getSwapsWithLimits();\n\n            if (this.swapKind === SwapKind.GivenIn) {\n                callData = encodeFunctionData({\n                    abi: balancerBatchRouterAbi,\n                    functionName: 'querySwapExactIn',\n                    args: [\n                        swapsWithLimits.swapsWithLimits as SwapPathExactAmountInWithLimit[],\n                        zeroAddress,\n                        this.userData,\n                    ],\n                });\n            } else {\n                callData = encodeFunctionData({\n                    abi: balancerBatchRouterAbi,\n                    functionName: 'querySwapExactOut',\n                    args: [\n                        swapsWithLimits.swapsWithLimits as SwapPathExactAmountOutWithLimit[],\n                        zeroAddress,\n                        this.userData,\n                    ],\n                });\n            }\n        } else {\n            if ('exactAmountIn' in this.swaps) {\n                callData = encodeFunctionData({\n                    abi: balancerRouterAbi,\n                    functionName: 'querySwapSingleTokenExactIn',\n                    args: [\n                        this.swaps.pool,\n                        this.swaps.tokenIn,\n                        this.swaps.tokenOut,\n                        this.swaps.exactAmountIn,\n                        zeroAddress,\n                        this.userData,\n                    ],\n                });\n            } else if ('exactAmountOut' in this.swaps) {\n                callData = encodeFunctionData({\n                    abi: balancerRouterAbi,\n                    functionName: 'querySwapSingleTokenExactOut',\n                    args: [\n                        this.swaps.pool,\n                        this.swaps.tokenIn,\n                        this.swaps.tokenOut,\n                        this.swaps.exactAmountOut,\n                        zeroAddress,\n                        this.userData,\n                    ],\n                });\n            } else throw new Error('Incorrect V3 Swap');\n        }\n        return callData;\n    }\n\n    /**\n     * Returns the transaction data to be sent to the router contract\n     *\n     * @param input\n     * @returns\n     */\n    buildCall(\n        input: SwapBuildCallInput,\n    ): SwapBuildOutputExactIn | SwapBuildOutputExactOut {\n        let limitAmount: TokenAmount;\n        let call:\n            | Omit<SwapBuildOutputExactIn, 'minAmountOut'>\n            | Omit<SwapBuildOutputExactOut, 'maxAmountIn'>;\n        if (input.queryOutput.swapKind === SwapKind.GivenIn) {\n            limitAmount = getLimitAmount(\n                input.slippage,\n                SwapKind.GivenIn,\n                input.queryOutput.expectedAmountOut,\n            );\n        } else {\n            limitAmount = getLimitAmount(\n                input.slippage,\n                SwapKind.GivenOut,\n                input.queryOutput.expectedAmountIn,\n            );\n        }\n        if (!this.isBatchSwap) {\n            call = {\n                to: BALANCER_ROUTER[this.chainId],\n                callData: this.callDataSingleSwap(\n                    limitAmount,\n                    input.deadline ?? MAX_UINT256,\n                    !!input.wethIsEth,\n                ),\n                value: this.value(limitAmount, !!input.wethIsEth),\n            };\n        } else {\n            const pathLimits = getPathLimits(\n                input.slippage,\n                input.queryOutput,\n                limitAmount.amount,\n            );\n            if (!pathLimits)\n                throw Error(\n                    'V3 BatchSwaps need path limits for call construction',\n                );\n            call = {\n                to: BALANCER_BATCH_ROUTER[this.chainId],\n                callData: this.callDataBatchSwap(\n                    limitAmount.amount,\n                    pathLimits,\n                    input.deadline ?? MAX_UINT256,\n                    !!input.wethIsEth,\n                ),\n                value: this.value(limitAmount, !!input.wethIsEth),\n            };\n        }\n        if (this.swapKind === SwapKind.GivenIn) {\n            return {\n                ...call,\n                minAmountOut: limitAmount,\n            };\n        }\n        return {\n            ...call,\n            maxAmountIn: limitAmount,\n        };\n    }\n\n    buildCallWithPermit2(\n        input: SwapBuildCallInput,\n        permit2: Permit2,\n    ): SwapBuildOutputExactIn | SwapBuildOutputExactOut {\n        const buildCallOutput = this.buildCall(input);\n        const args = [\n            [],\n            [],\n            permit2.batch,\n            permit2.signature,\n            [buildCallOutput.callData],\n        ] as const;\n\n        const callData = encodeFunctionData({\n            abi: balancerBatchRouterAbi,\n            functionName: 'permitBatchAndCall',\n            args,\n        });\n\n        return {\n            ...buildCallOutput,\n            callData,\n        };\n    }\n\n    /**\n     * Returns the call data to be sent to the router contract for a single token swap execution.\n     * @param limit minAmountOut/maxAmountIn depending on SwapKind\n     * @param deadline\n     * @param wethIsEth\n     * @returns\n     */\n    private callDataSingleSwap(\n        limit: TokenAmount,\n        deadline: bigint,\n        wethIsEth: boolean,\n    ): Hex {\n        let callData: Hex;\n\n        if ('exactAmountIn' in this.swaps) {\n            callData = encodeFunctionData({\n                abi: balancerRouterAbi,\n                functionName: 'swapSingleTokenExactIn',\n                args: [\n                    this.swaps.pool,\n                    this.swaps.tokenIn,\n                    this.swaps.tokenOut,\n                    this.swaps.exactAmountIn,\n                    limit.amount, // minAmountOut\n                    deadline,\n                    wethIsEth,\n                    this.userData,\n                ],\n            });\n        } else if ('exactAmountOut' in this.swaps) {\n            callData = encodeFunctionData({\n                abi: balancerRouterAbi,\n                functionName: 'swapSingleTokenExactOut',\n                args: [\n                    this.swaps.pool,\n                    this.swaps.tokenIn,\n                    this.swaps.tokenOut,\n                    this.swaps.exactAmountOut,\n                    limit.amount, // maxAmountIn\n                    deadline,\n                    wethIsEth,\n                    this.userData,\n                ],\n            });\n        } else throw new Error('Incorrect V3 Swap');\n\n        return callData;\n    }\n\n    /**\n     * Returns the call data to be sent to the router contract for batchSwap execution.\n     * @param limitAmount total minAmountOut/maxAmountIn depending on SwapKind\n     * @param pathLimits individual path minAmountOut/maxAmountIn depending on SwapKind\n     * @param deadline\n     * @param wethIsEth\n     * @returns\n     */\n    private callDataBatchSwap(\n        limitAmount: bigint,\n        pathLimits: bigint[],\n        deadline: bigint,\n        wethIsEth: boolean,\n    ): Hex {\n        let callData: Hex;\n        const swapsWithLimits = this.getSwapsWithLimits(pathLimits);\n\n        if (this.swapKind === SwapKind.GivenIn) {\n            if (\n                (this.swaps as SwapPathExactAmountIn[]).length !==\n                pathLimits.length\n            )\n                throw Error('Must have a limit for each path.');\n\n            if (swapsWithLimits.totalPathLimits !== limitAmount)\n                throw new Error(\n                    `minAmountOut mismatch, ${limitAmount} ${swapsWithLimits.totalPathLimits}`,\n                );\n\n            callData = encodeFunctionData({\n                abi: balancerBatchRouterAbi,\n                functionName: 'swapExactIn',\n                args: [\n                    swapsWithLimits.swapsWithLimits as SwapPathExactAmountInWithLimit[],\n                    deadline,\n                    wethIsEth,\n                    this.userData,\n                ],\n            });\n        } else {\n            if (\n                (this.swaps as SwapPathExactAmountOut[]).length !==\n                pathLimits.length\n            )\n                throw Error('Must have a limit for each path.');\n\n            if (swapsWithLimits.totalPathLimits !== limitAmount)\n                throw new Error(\n                    `maxAmountIn mismatch, ${limitAmount} ${swapsWithLimits.totalPathLimits}`,\n                );\n            callData = encodeFunctionData({\n                abi: balancerBatchRouterAbi,\n                functionName: 'swapExactOut',\n                args: [\n                    swapsWithLimits.swapsWithLimits as SwapPathExactAmountOutWithLimit[],\n                    deadline,\n                    wethIsEth,\n                    this.userData,\n                ],\n            });\n        }\n        return callData;\n    }\n\n    /**\n     * Returns the native assset value to be sent to the router contract based on the swap kind and the limit amounts\n     *\n     * @param limit\n     * @returns\n     */\n    private value(limit: TokenAmount, wethIsEth: boolean): bigint {\n        let value = 0n;\n        if (\n            wethIsEth &&\n            this.inputAmount.token.address ===\n                NATIVE_ASSETS[this.chainId].wrapped\n        ) {\n            if (this.isBatchSwap) {\n                if (this.swapKind === SwapKind.GivenIn) {\n                    for (const swap of this.swaps as SwapPathExactAmountIn[]) {\n                        value += swap.exactAmountIn;\n                    }\n                } else {\n                    value = limit.amount;\n                }\n            } else {\n                if ('exactAmountIn' in this.swaps)\n                    value = this.swaps.exactAmountIn;\n                else if ('exactAmountOut' in this.swaps) value = limit.amount;\n                else throw new Error('Incorrect V3 Swap');\n            }\n        }\n        return value;\n    }\n\n    // helper methods\n\n    private getSwaps(paths: PathWithAmount[]) {\n        let swaps:\n            | SingleTokenExactIn\n            | SingleTokenExactOut\n            | SwapPathExactAmountIn[]\n            | SwapPathExactAmountOut[];\n        if (this.isBatchSwap) {\n            if (this.swapKind === SwapKind.GivenIn) {\n                swaps = [] as SwapPathExactAmountIn[];\n                swaps = paths.map((p) => {\n                    return {\n                        tokenIn: p.inputAmount.token.address,\n                        exactAmountIn: p.inputAmount.amount,\n                        steps: p.pools.map((pool, i) => {\n                            return {\n                                pool: pool,\n                                tokenOut: p.tokens[i + 1].address,\n                                isBuffer: p.isBuffer[i],\n                            };\n                        }),\n                    };\n                });\n            } else {\n                // always use the 'natural' order; (Unlike V2 where order was reversed)\n                swaps = [] as SwapPathExactAmountOut[];\n                swaps = paths.map((p) => {\n                    return {\n                        tokenIn: p.inputAmount.token.address,\n                        exactAmountOut: p.outputAmount.amount,\n                        steps: p.pools.map((pool, i) => {\n                            return {\n                                pool: pool,\n                                tokenOut: p.tokens[i + 1].address,\n                                isBuffer: p.isBuffer[i],\n                            };\n                        }),\n                    };\n                });\n            }\n        } else {\n            const path = paths[0];\n            const pool = path.pools[0];\n            const tokenIn = path.tokens[0].address;\n            const tokenOut = path.tokens[1].address;\n            if (this.swapKind === SwapKind.GivenIn) {\n                swaps = {\n                    pool,\n                    tokenIn,\n                    tokenOut,\n                    exactAmountIn: path.inputAmount.amount,\n                };\n            } else {\n                swaps = {\n                    pool,\n                    tokenIn,\n                    tokenOut,\n                    exactAmountOut: path.outputAmount.amount,\n                };\n            }\n        }\n        return swaps;\n    }\n}\n","import { SwapKind } from '../../types';\nimport { TokenAmount } from '../tokenAmount';\nimport { Permit2 } from '../permit2Helper';\nimport { validatePaths } from './paths';\nimport { SwapV2 } from './swaps/v2';\nimport { SwapV3 } from './swaps/v3';\nimport { SwapBase } from './swaps/types';\nimport {\n    ExactInQueryOutput,\n    ExactOutQueryOutput,\n    SwapBuildCallInput,\n    SwapBuildOutputExactIn,\n    SwapBuildOutputExactOut,\n    SwapInput,\n} from './types';\nimport { InputValidator } from '../inputValidator/inputValidator';\nimport { Address } from 'viem';\n\nexport * from './types';\nexport * from './paths';\n\n// A Swap can be a single or multiple paths\nexport class Swap {\n    private readonly swap: SwapBase;\n    public protocolVersion: 2 | 3;\n\n    public constructor(swapInput: SwapInput) {\n        validatePaths(swapInput.paths);\n        const _protocolVersion = swapInput.paths[0].protocolVersion;\n\n        switch (_protocolVersion) {\n            case 2:\n                this.swap = new SwapV2(swapInput);\n                break;\n            case 3:\n                this.swap = new SwapV3(swapInput);\n                break;\n            default:\n                throw Error(\n                    `SDK does not support swap for vault version: ${_protocolVersion}`,\n                );\n        }\n        this.protocolVersion = _protocolVersion;\n    }\n\n    public get quote(): TokenAmount {\n        return this.swap.swapKind === SwapKind.GivenIn\n            ? this.outputAmount\n            : this.inputAmount;\n    }\n\n    public get inputAmount(): TokenAmount {\n        return this.swap.inputAmount;\n    }\n\n    public get outputAmount(): TokenAmount {\n        return this.swap.outputAmount;\n    }\n\n    public get isBatchSwap(): boolean {\n        return this.swap.isBatchSwap;\n    }\n\n    // rpcUrl is optional, but recommended to prevent rate limiting\n    public async query(\n        rpcUrl?: string,\n        block?: bigint,\n        sender?: Address,\n    ): Promise<ExactInQueryOutput | ExactOutQueryOutput> {\n        return this.swap.query(rpcUrl, block, sender);\n    }\n\n    public queryCallData(): string {\n        return this.swap.queryCallData();\n    }\n\n    /**\n     * Returns the transaction data to be sent to the vault contract\n     *\n     * @param input\n     * @returns\n     */\n    buildCall(\n        input: SwapBuildCallInput,\n    ): SwapBuildOutputExactIn | SwapBuildOutputExactOut {\n        const isV2Input = 'sender' in input;\n        if (this.protocolVersion === 3 && isV2Input)\n            throw Error('Cannot define sender/recipient in V3');\n\n        if (this.protocolVersion === 2 && !isV2Input)\n            throw Error('Sender/recipient must be defined in V2');\n\n        return this.swap.buildCall(input);\n    }\n\n    buildCallWithPermit2(\n        input: SwapBuildCallInput,\n        permit2: Permit2,\n    ): SwapBuildOutputExactIn | SwapBuildOutputExactOut {\n        InputValidator.validateBuildCallWithPermit2({\n            protocolVersion: this.protocolVersion,\n        });\n\n        return this.swap.buildCallWithPermit2(input, permit2);\n    }\n}\n","import { formatEther, parseEther } from 'viem';\nimport { BigintIsh } from './tokenAmount';\n\nexport class PriceImpactAmount {\n    public amount: bigint; // raw amount in wei (i.e. 18 decimals)\n    public decimal: number; // decimal = wei * 1e-18\n    public percentage: number; // percentage = decimal * 1e-2\n    public bps: number; // bps = basis points = decimal * 1e-4\n\n    public static fromRawAmount(rawAmount: BigintIsh) {\n        return new PriceImpactAmount(rawAmount);\n    }\n\n    public static fromDecimal(decimalAmount: `${number}`) {\n        const rawAmount = parseEther(decimalAmount);\n        return PriceImpactAmount.fromRawAmount(rawAmount);\n    }\n\n    public static fromPercentage(percentageAmount: `${number}`) {\n        const decimalAmount = Number(percentageAmount) / 100;\n        return PriceImpactAmount.fromDecimal(`${decimalAmount}`);\n    }\n\n    public static fromBasisPoints(bpsAmount: `${number}`) {\n        const decimalAmount = Number(bpsAmount) / 10000;\n        return PriceImpactAmount.fromDecimal(`${decimalAmount}`);\n    }\n\n    protected constructor(amount: BigintIsh) {\n        this.amount = BigInt(amount);\n        this.decimal = parseFloat(formatEther(this.amount));\n        this.percentage = this.decimal * 100;\n        this.bps = this.decimal * 10000;\n    }\n}\n","import { MathSol } from '@/utils';\nimport { PriceImpactAmount } from '../priceImpactAmount';\nimport { TokenAmount } from '../tokenAmount';\n\n/**\n * Applies the ABA method to calculate the price impact of an operation.\n * @param initialA amount of token A at the begginig of the ABA process, i.e. A -> B amountIn\n * @param finalA amount of token A at the end of the ABA process, i.e. B -> A amountOut\n * @returns\n */\n\nexport const priceImpactABA = (initialA: TokenAmount, finalA: TokenAmount) => {\n    const priceImpact = MathSol.divDownFixed(\n        initialA.scale18 - finalA.scale18,\n        initialA.scale18 * 2n,\n    );\n    return PriceImpactAmount.fromRawAmount(priceImpact);\n};\n","import { encodeFunctionData, zeroAddress } from 'viem';\n\nimport {\n    RemoveLiquidityBase,\n    RemoveLiquidityKind,\n    RemoveLiquidityBuildCallOutput,\n} from '../removeLiquidity/types';\n\nimport { Permit } from '@/entities/permitHelper';\n\nimport { balancerCompositeLiquidityRouterAbi } from '@/abi';\n\nimport { PoolStateWithUnderlyings } from '@/entities/types';\n\nimport { TokenAmount } from '@/entities/tokenAmount';\nimport { Token } from '@/entities/token';\n\nimport { getAmountsCall } from '../removeLiquidity/helper';\n\nimport { doRemoveLiquidityProportionalQuery } from './doRemoveLiquidityProportionalQuery';\nimport { BALANCER_COMPOSITE_LIQUIDITY_ROUTER } from '@/utils';\nimport {\n    RemoveLiquidityBoostedBuildCallInput,\n    RemoveLiquidityBoostedProportionalInput,\n    RemoveLiquidityBoostedQueryOutput,\n} from './types';\nimport { InputValidator } from '../inputValidator/inputValidator';\nimport { getSortedTokens } from '../utils';\n\nexport class RemoveLiquidityBoostedV3 implements RemoveLiquidityBase {\n    private readonly inputValidator: InputValidator = new InputValidator();\n\n    public async query(\n        input: RemoveLiquidityBoostedProportionalInput,\n        poolState: PoolStateWithUnderlyings,\n    ): Promise<RemoveLiquidityBoostedQueryOutput> {\n        this.inputValidator.validateRemoveLiquidity(input, {\n            ...poolState,\n            type: 'Boosted',\n        });\n        const underlyingAmountsOut = await doRemoveLiquidityProportionalQuery(\n            input.rpcUrl,\n            input.chainId,\n            input.bptIn.rawAmount,\n            input.sender ?? zeroAddress,\n            input.userData ?? '0x',\n            poolState.address,\n        );\n\n        // Child tokens are the lowest most tokens. This will be underlying if it exists.\n        const childTokens = poolState.tokens.map((t) => {\n            if (t.underlyingToken) {\n                return t.underlyingToken;\n            }\n            return {\n                address: t.address,\n                decimals: t.decimals,\n                index: t.index,\n            };\n        });\n\n        const sortedChildTokens = getSortedTokens(childTokens, input.chainId);\n\n        // amountsOut are in child tokens sorted in token registration order of wrapped tokens in the pool\n        const amountsOut = underlyingAmountsOut.map((amount, i) => {\n            const token = new Token(\n                input.chainId,\n                sortedChildTokens[i].address,\n                sortedChildTokens[i].decimals,\n            );\n            return TokenAmount.fromRawAmount(token, amount);\n        });\n\n        const bptToken = new Token(input.chainId, poolState.address, 18);\n\n        const output: RemoveLiquidityBoostedQueryOutput = {\n            to: BALANCER_COMPOSITE_LIQUIDITY_ROUTER[input.chainId],\n            poolType: poolState.type,\n            poolId: poolState.address,\n            removeLiquidityKind: RemoveLiquidityKind.Proportional,\n            bptIn: TokenAmount.fromRawAmount(bptToken, input.bptIn.rawAmount),\n            amountsOut,\n            protocolVersion: 3,\n            chainId: input.chainId,\n            userData: input.userData ?? '0x',\n        };\n        return output;\n    }\n\n    public buildCall(\n        input: RemoveLiquidityBoostedBuildCallInput,\n    ): RemoveLiquidityBuildCallOutput {\n        // Apply slippage to amounts shared in put depending on the kind\n        // In this case, the user is willing to accept a slightly lower\n        // amount of tokens out, depending on slippage\n        const amounts = getAmountsCall(input);\n\n        const callData = encodeFunctionData({\n            abi: balancerCompositeLiquidityRouterAbi,\n            functionName: 'removeLiquidityProportionalFromERC4626Pool',\n            args: [\n                input.poolId,\n                input.bptIn.amount,\n                amounts.minAmountsOut,\n                input.wethIsEth ?? false,\n                input.userData,\n            ],\n        });\n\n        return {\n            callData: callData,\n            to: BALANCER_COMPOSITE_LIQUIDITY_ROUTER[input.chainId],\n            value: 0n, // always has 0 value\n            maxBptIn: input.bptIn,\n            minAmountsOut: amounts.minAmountsOut.map((amount, i) => {\n                return TokenAmount.fromRawAmount(\n                    input.amountsOut[i].token,\n                    amount,\n                );\n            }),\n        };\n    }\n\n    public buildCallWithPermit(\n        input: RemoveLiquidityBoostedBuildCallInput,\n        permit: Permit,\n    ): RemoveLiquidityBuildCallOutput {\n        const buildCallOutput = this.buildCall(input);\n\n        const args = [\n            permit.batch,\n            permit.signatures,\n            { details: [], spender: zeroAddress, sigDeadline: 0n },\n            '0x',\n            [buildCallOutput.callData],\n        ] as const;\n\n        const callData = encodeFunctionData({\n            abi: balancerCompositeLiquidityRouterAbi,\n            functionName: 'permitBatchAndCall',\n            args,\n        });\n\n        return {\n            ...buildCallOutput,\n            callData,\n        };\n    }\n}\n","import { createPublicClient, Hex, http } from 'viem';\nimport { BALANCER_COMPOSITE_LIQUIDITY_ROUTER, ChainId, CHAINS } from '@/utils';\nimport { Address } from '@/types';\nimport { balancerCompositeLiquidityRouterAbi } from '@/abi';\n\nexport const doRemoveLiquidityProportionalQuery = async (\n    rpcUrl: string,\n    chainId: ChainId,\n    exactBptAmountIn: bigint,\n    sender: Address,\n    userData: Hex,\n    poolAddress: Address,\n): Promise<bigint[]> => {\n    const client = createPublicClient({\n        transport: http(rpcUrl),\n        chain: CHAINS[chainId],\n    });\n\n    const { result: underlyingAmountsOut } = await client.simulateContract({\n        address: BALANCER_COMPOSITE_LIQUIDITY_ROUTER[chainId],\n        abi: balancerCompositeLiquidityRouterAbi,\n        functionName: 'queryRemoveLiquidityProportionalFromERC4626Pool',\n        args: [poolAddress, exactBptAmountIn, sender, userData],\n    });\n    // underlying amounts (not pool token amounts)\n    return [...underlyingAmountsOut];\n};\n","import { abs, ChainId, isSameAddress, max, min } from '../../utils';\nimport { InputToken, SwapKind } from '../../types';\nimport { PriceImpactAmount } from '../priceImpactAmount';\nimport { RemoveLiquidityKind } from '../removeLiquidity/types';\nimport { Swap, SwapInput, TokenApi } from '../swap';\nimport { TokenAmount } from '../tokenAmount';\nimport { PoolStateWithUnderlyings, PoolTokenWithUnderlying } from '../types';\nimport { priceImpactABA } from './helper';\nimport { AddLiquidityBoostedUnbalancedInput } from '../addLiquidityBoosted/types';\nimport { AddLiquidityBoostedV3 } from '../addLiquidityBoosted';\nimport { RemoveLiquidityBoostedV3 } from '../removeLiquidityBoosted';\nimport { RemoveLiquidityBoostedProportionalInput } from '../removeLiquidityBoosted/types';\nimport { Address, BaseError, ContractFunctionRevertedError } from 'viem';\nimport { Token } from '../token';\n\n/**\n * Calculate price impact on add liquidity unbalanced operations\n *\n * This is the only price impact calculation that adapts the ABA method instead\n * of applying it directly. This happens because tha ABA method requires a\n * corresponding reverse operation to be applied, so we \"get back\" to the original\n * state for comparison, hence A -> B -> A.\n * This is not possible for AddLiquidityUnbalanced on v3 because there is no\n * RemoveLiquidityUnbalanced.\n * The alternative found was to simulate the RemoveLiquidityUnbalanced by applying\n * RemoveLiquidityProportional and then swapping between tokens.\n *\n * Here are the steps to calculate the price impact for add liquidity unbalanced:\n * 1. query add liquidity unbalanced with `exactAmountsIn` to get `bptOut`\n * 2. query remove liquidity proportional with `bptOut` as `bptIn` to get `proportionalAmountsOut`\n * 3. get `diffs` =  `proportionalAmountsOut` - `exactAmountsIn`\n * 4. swap between tokens zeroing out the `diffs` between `proportionalAmountsOut`\n *    and `exactAmountsIn`, leaving the remaining diff within a single\n *    token → `diffFinal` (see code below for detailed steps)\n * 5. `amountInitial` will be the the `exactAmountsIn` respective to `diffFinal` token\n * 6. price impact ABA = `diffFinal` / `amountInitial` / 2\n *\n * @param input same input used in the corresponding add liquidity operation\n * @param poolState same pool state used in the corresponding add liquidity operation\n * @returns price impact amount\n */\nexport async function addLiquidityUnbalancedBoosted(\n    input: AddLiquidityBoostedUnbalancedInput,\n    poolState: PoolStateWithUnderlyings,\n): Promise<PriceImpactAmount> {\n    // inputs are being validated within AddLiquidity\n\n    // simulate adding liquidity to get amounts in\n    const addLiquidity = new AddLiquidityBoostedV3();\n    let amountsIn: TokenAmount[];\n    let bptOut: TokenAmount;\n    try {\n        const queryResult = await addLiquidity.query(input, poolState);\n        amountsIn = queryResult.amountsIn;\n        bptOut = queryResult.bptOut;\n    } catch (err) {\n        throw new Error(\n            `addLiquidity operation will fail at SC level with user defined input.\\n${err}`,\n        );\n    }\n    const poolTokens = amountsIn.map((a) => a.token);\n\n    // simulate removing liquidity to get amounts out\n    const removeLiquidity = new RemoveLiquidityBoostedV3();\n    const removeLiquidityInput: RemoveLiquidityBoostedProportionalInput = {\n        chainId: input.chainId,\n        rpcUrl: input.rpcUrl,\n        bptIn: bptOut.toInputAmount(),\n        kind: RemoveLiquidityKind.Proportional,\n    };\n    const { amountsOut } = await removeLiquidity.query(\n        removeLiquidityInput,\n        poolState,\n    );\n\n    // deltas between unbalanced and proportional amounts\n    const deltas = amountsOut.map((a, i) => a.amount - amountsIn[i].amount);\n\n    // get how much BPT each delta would mint\n    const deltaBPTs: bigint[] = [];\n    for (let i = 0; i < deltas.length; i++) {\n        if (deltas[i] === 0n) {\n            deltaBPTs.push(0n);\n        } else {\n            deltaBPTs.push(\n                await queryAddLiquidityForTokenDelta(\n                    addLiquidity,\n                    input,\n                    poolState,\n                    poolTokens,\n                    i,\n                    deltas[i],\n                ),\n            );\n        }\n    }\n\n    // zero out deltas by swapping between tokens from proportionalAmounts\n    // to exactAmountsIn, leaving the remaining delta within a single token\n    let remainingDeltaIndex = 0;\n    if (deltaBPTs.some((deltaBPT) => deltaBPT !== 0n)) {\n        remainingDeltaIndex = await zeroOutDeltas(\n            addLiquidity,\n            input,\n            poolState,\n            poolTokens,\n            deltas,\n            deltaBPTs,\n        );\n    }\n\n    // get relevant amount for price impact calculation\n    const deltaAmount = TokenAmount.fromRawAmount(\n        amountsIn[remainingDeltaIndex].token,\n        abs(deltas[remainingDeltaIndex]),\n    );\n\n    // calculate price impact using ABA method\n    return priceImpactABA(\n        amountsIn[remainingDeltaIndex],\n        amountsIn[remainingDeltaIndex].sub(deltaAmount),\n    );\n}\n\nasync function queryAddLiquidityForTokenDelta(\n    addLiquidity: AddLiquidityBoostedV3,\n    input: AddLiquidityBoostedUnbalancedInput,\n    poolState: PoolStateWithUnderlyings,\n    poolTokens: Token[],\n    tokenIndex: number,\n    delta: bigint,\n): Promise<bigint> {\n    const absDelta = TokenAmount.fromRawAmount(\n        poolTokens[tokenIndex],\n        abs(delta),\n    );\n\n    const amountsIn = [absDelta.toInputAmount()];\n    if (absDelta.amount <= 1000n)\n        // Work-around Vault _MINIMUM_WRAP_AMOUNT limit\n        amountsIn[0].rawAmount = 1001n;\n    try {\n        const { bptOut: deltaBPT } = await addLiquidity.query(\n            {\n                ...input,\n                amountsIn,\n            },\n            poolState,\n        );\n        return delta < 0n ? -deltaBPT.amount : deltaBPT.amount;\n    } catch (err) {\n        // see https://viem.sh/docs/contract/simulateContract#handling-custom-errors\n        if (err instanceof BaseError) {\n            const revertError = err.walk(\n                (err) => err instanceof ContractFunctionRevertedError,\n            );\n            if (revertError instanceof ContractFunctionRevertedError) {\n                const errorName = revertError.data?.errorName ?? '';\n                if (errorName === 'WrapAmountTooSmall') {\n                    return 0n;\n                }\n            }\n        }\n        throw new Error(\n            `Unexpected error while calculating addLiquidityUnbalancedBoosted PI at Delta add step:\\n${err}`,\n        );\n    }\n}\n\nasync function zeroOutDeltas(\n    addLiquidity: AddLiquidityBoostedV3,\n    input: AddLiquidityBoostedUnbalancedInput,\n    poolState: PoolStateWithUnderlyings,\n    poolTokens: Token[],\n    deltas: bigint[],\n    deltaBPTs: bigint[],\n) {\n    let minNegativeDeltaIndex = deltaBPTs.findIndex(\n        (deltaBPT) => deltaBPT === max(deltaBPTs.filter((a) => a < 0n)),\n    );\n    const nonZeroDeltasBPTs = deltaBPTs.filter((d) => d !== 0n);\n    for (let i = 0; i < nonZeroDeltasBPTs.length - 1; i++) {\n        const minPositiveDeltaIndex = deltaBPTs.findIndex(\n            (deltaBPT) => deltaBPT === min(deltaBPTs.filter((a) => a > 0n)),\n        );\n        minNegativeDeltaIndex = deltaBPTs.findIndex(\n            (deltaBPT) => deltaBPT === max(deltaBPTs.filter((a) => a < 0n)),\n        );\n\n        let swapKind: SwapKind;\n        let givenTokenIndex: number;\n        let resultTokenIndex: number;\n        let inputAmountRaw = 0n;\n        let outputAmountRaw = 0n;\n        if (\n            deltaBPTs[minPositiveDeltaIndex] <\n            abs(deltaBPTs[minNegativeDeltaIndex])\n        ) {\n            swapKind = SwapKind.GivenIn;\n            givenTokenIndex = minPositiveDeltaIndex;\n            resultTokenIndex = minNegativeDeltaIndex;\n            inputAmountRaw = abs(deltas[givenTokenIndex]);\n        } else {\n            swapKind = SwapKind.GivenOut;\n            givenTokenIndex = minNegativeDeltaIndex;\n            resultTokenIndex = minPositiveDeltaIndex;\n            outputAmountRaw = abs(deltas[givenTokenIndex]);\n        }\n\n        // address & decimals\n        const tokenIn = poolTokens[minPositiveDeltaIndex].toInputToken();\n        const tokenInWrapInfo = getTokenWrapInfo(poolState.tokens, tokenIn);\n\n        const tokenOut = poolTokens[minNegativeDeltaIndex].toInputToken();\n        const tokenOutWrapInfo = getTokenWrapInfo(poolState.tokens, tokenOut);\n\n        // Construct a buffer swap\n        const swapInput = buildSwapInput(\n            input.chainId,\n            swapKind,\n            poolState.address,\n            tokenInWrapInfo,\n            tokenOutWrapInfo,\n            inputAmountRaw,\n            outputAmountRaw,\n        );\n        try {\n            const swap = new Swap(swapInput);\n            const result = await swap.query(input.rpcUrl);\n            const resultAmount =\n                result.swapKind === SwapKind.GivenIn\n                    ? result.expectedAmountOut\n                    : result.expectedAmountIn;\n\n            deltas[givenTokenIndex] = 0n;\n            deltaBPTs[givenTokenIndex] = 0n;\n            deltas[resultTokenIndex] =\n                deltas[resultTokenIndex] + resultAmount.amount;\n            deltaBPTs[resultTokenIndex] = await queryAddLiquidityForTokenDelta(\n                addLiquidity,\n                input,\n                poolState,\n                poolTokens,\n                resultTokenIndex,\n                deltas[resultTokenIndex],\n            );\n        } catch (err) {\n            throw new Error(\n                `Unexpected error while calculating addLiquidityUnbalancedBoosted PI at Swap step:\\n${err}`,\n            );\n        }\n    }\n    return minNegativeDeltaIndex;\n}\n\ntype TokenWrapInfo = {\n    token: InputToken;\n    shouldWrap: boolean;\n    wrapped: InputToken | undefined;\n};\n\nfunction getTokenWrapInfo(\n    tokens: PoolTokenWithUnderlying[],\n    token: InputToken,\n): TokenWrapInfo {\n    const poolToken = tokens.find((t) =>\n        isSameAddress(t.address, token.address),\n    );\n    if (poolToken)\n        return {\n            token: poolToken,\n            shouldWrap: false,\n            wrapped: undefined,\n        };\n\n    const wrapped = tokens\n        .filter((t) => t.underlyingToken !== null)\n        .find((t) => isSameAddress(t.underlyingToken!.address, token.address));\n\n    if (!wrapped) throw Error(`Cannot map token to wrapped: ${token.address}`);\n    return {\n        token: token,\n        shouldWrap: true,\n        wrapped,\n    };\n}\n\nfunction buildSwapInput(\n    chainId: ChainId,\n    swapKind: SwapKind,\n    pool: Address,\n    tokenInWrapInfo: TokenWrapInfo,\n    tokenOutWrapInfo: TokenWrapInfo,\n    inputAmountRaw: bigint,\n    outputAmountRaw: bigint,\n): SwapInput {\n    const inTokens: TokenApi[] = [\n        {\n            address: tokenInWrapInfo.token.address,\n            decimals: tokenInWrapInfo.token.decimals,\n        },\n    ];\n\n    const outTokens = [\n        {\n            address: tokenOutWrapInfo.token.address,\n            decimals: tokenOutWrapInfo.token.decimals,\n        },\n    ];\n\n    const pools = [pool];\n    const isBuffer = [false];\n\n    if (tokenInWrapInfo.shouldWrap) {\n        inTokens.push({\n            address: tokenInWrapInfo.wrapped!.address,\n            decimals: tokenInWrapInfo.wrapped!.decimals,\n        });\n        pools.unshift(tokenInWrapInfo.wrapped!.address);\n        isBuffer.unshift(true);\n    }\n\n    if (tokenOutWrapInfo.shouldWrap) {\n        outTokens.unshift({\n            address: tokenOutWrapInfo.wrapped!.address,\n            decimals: tokenOutWrapInfo.wrapped!.decimals,\n        });\n        pools.push(tokenOutWrapInfo.wrapped!.address);\n        isBuffer.push(true);\n    }\n\n    // Construct a buffer swap\n    const swapInput: SwapInput = {\n        chainId,\n        paths: [\n            {\n                tokens: [...inTokens, ...outTokens],\n                pools,\n                isBuffer,\n                inputAmountRaw,\n                outputAmountRaw,\n                protocolVersion: 3,\n            },\n        ],\n        swapKind,\n    };\n    return swapInput;\n}\n","import { abs, max, min } from '@/utils';\nimport { AddLiquidity } from '../addLiquidity';\nimport { AddLiquidityUnbalancedInput } from '../addLiquidity/types';\nimport { PriceImpactAmount } from '../priceImpactAmount';\nimport { RemoveLiquidity } from '../removeLiquidity';\nimport {\n    RemoveLiquidityInput,\n    RemoveLiquidityKind,\n} from '../removeLiquidity/types';\nimport { Token } from '../token';\nimport { TokenAmount } from '../tokenAmount';\nimport { PoolState } from '../types';\nimport { priceImpactABA } from './helper';\nimport { SwapKind } from '@/types';\nimport { Swap, SwapInput } from '../swap';\n\nexport const addLiquidityUnbalanced = async (\n    input: AddLiquidityUnbalancedInput,\n    poolState: PoolState,\n): Promise<PriceImpactAmount> => {\n    // inputs are being validated within AddLiquidity\n\n    // simulate adding liquidity to get amounts in\n    const addLiquidity = new AddLiquidity();\n    let amountsIn: TokenAmount[];\n    let bptOut: TokenAmount;\n    let poolTokens: Token[];\n    try {\n        const queryResult = await addLiquidity.query(input, poolState);\n        amountsIn = queryResult.amountsIn;\n        bptOut = queryResult.bptOut;\n        poolTokens = amountsIn.map((a) => a.token);\n    } catch (err) {\n        throw new Error(\n            `addLiquidityUnbalanced operation will fail at SC level with user defined input.\\n${err}`,\n        );\n    }\n\n    // simulate removing liquidity to get amounts out\n    const removeLiquidity = new RemoveLiquidity();\n    const removeLiquidityInput: RemoveLiquidityInput = {\n        chainId: input.chainId,\n        rpcUrl: input.rpcUrl,\n        bptIn: bptOut.toInputAmount(),\n        kind: RemoveLiquidityKind.Proportional,\n    };\n    const { amountsOut } = await removeLiquidity.query(\n        removeLiquidityInput,\n        poolState,\n    );\n\n    // deltas between unbalanced and proportional amounts\n    const deltas = amountsOut.map((a, i) => a.amount - amountsIn[i].amount);\n\n    // get how much BPT each delta would mint\n    const deltaBPTs: bigint[] = [];\n    for (let i = 0; i < deltas.length; i++) {\n        if (deltas[i] === 0n) {\n            deltaBPTs.push(0n);\n        } else {\n            try {\n                deltaBPTs.push(await queryAddLiquidityForTokenDelta(i));\n            } catch (err) {\n                throw new Error(\n                    `Unexpected error while calculating addLiquidityUnbalanced PI at Delta add step:\\n${err}`,\n                );\n            }\n        }\n    }\n\n    // zero out deltas by swapping between tokens from proportionalAmounts\n    // to exactAmountsIn, leaving the remaining delta within a single token\n    let remainingDeltaIndex = 0;\n    if (deltaBPTs.some((deltaBPT) => deltaBPT !== 0n)) {\n        remainingDeltaIndex = await zeroOutDeltas(deltas, deltaBPTs);\n    }\n\n    // get relevant amount for price impact calculation\n    const deltaAmount = TokenAmount.fromRawAmount(\n        amountsIn[remainingDeltaIndex].token,\n        abs(deltas[remainingDeltaIndex]),\n    );\n\n    // calculate price impact using ABA method\n    return priceImpactABA(\n        amountsIn[remainingDeltaIndex],\n        amountsIn[remainingDeltaIndex].sub(deltaAmount),\n    );\n\n    // helper functions\n\n    async function zeroOutDeltas(deltas: bigint[], deltaBPTs: bigint[]) {\n        let minNegativeDeltaIndex = deltaBPTs.findIndex(\n            (deltaBPT) => deltaBPT === max(deltaBPTs.filter((a) => a < 0n)),\n        );\n        const nonZeroDeltasBPTs = deltaBPTs.filter((d) => d !== 0n);\n        for (let i = 0; i < nonZeroDeltasBPTs.length - 1; i++) {\n            const minPositiveDeltaIndex = deltaBPTs.findIndex(\n                (deltaBPT) => deltaBPT === min(deltaBPTs.filter((a) => a > 0n)),\n            );\n            minNegativeDeltaIndex = deltaBPTs.findIndex(\n                (deltaBPT) => deltaBPT === max(deltaBPTs.filter((a) => a < 0n)),\n            );\n\n            let swapKind: SwapKind;\n            let givenTokenIndex: number;\n            let resultTokenIndex: number;\n            let inputAmountRaw = 0n;\n            let outputAmountRaw = 0n;\n            if (\n                deltaBPTs[minPositiveDeltaIndex] <\n                abs(deltaBPTs[minNegativeDeltaIndex])\n            ) {\n                swapKind = SwapKind.GivenIn;\n                givenTokenIndex = minPositiveDeltaIndex;\n                resultTokenIndex = minNegativeDeltaIndex;\n                inputAmountRaw = abs(deltas[givenTokenIndex]);\n            } else {\n                swapKind = SwapKind.GivenOut;\n                givenTokenIndex = minNegativeDeltaIndex;\n                resultTokenIndex = minPositiveDeltaIndex;\n                outputAmountRaw = abs(deltas[givenTokenIndex]);\n            }\n            try {\n                const swapInput: SwapInput = {\n                    chainId: input.chainId,\n                    paths: [\n                        {\n                            tokens: [\n                                poolTokens[\n                                    minPositiveDeltaIndex\n                                ].toInputToken(),\n                                poolTokens[\n                                    minNegativeDeltaIndex\n                                ].toInputToken(),\n                            ],\n                            pools: [poolState.id],\n                            inputAmountRaw,\n                            outputAmountRaw,\n                            protocolVersion: poolState.protocolVersion,\n                        },\n                    ],\n                    swapKind,\n                };\n                const swap = new Swap(swapInput);\n                const result = await swap.query(input.rpcUrl);\n                const resultAmount =\n                    result.swapKind === SwapKind.GivenIn\n                        ? result.expectedAmountOut\n                        : result.expectedAmountIn;\n\n                deltas[givenTokenIndex] = 0n;\n                deltaBPTs[givenTokenIndex] = 0n;\n                deltas[resultTokenIndex] =\n                    deltas[resultTokenIndex] + resultAmount.amount;\n                deltaBPTs[resultTokenIndex] =\n                    await queryAddLiquidityForTokenDelta(resultTokenIndex);\n            } catch (err) {\n                throw new Error(\n                    `Unexpected error while calculating addLiquidityUnbalanced PI at Swap step:\\n${err}`,\n                );\n            }\n        }\n        return minNegativeDeltaIndex;\n    }\n\n    async function queryAddLiquidityForTokenDelta(\n        tokenIndex: number,\n    ): Promise<bigint> {\n        const absDelta = TokenAmount.fromRawAmount(\n            poolTokens[tokenIndex],\n            abs(deltas[tokenIndex]),\n        );\n        const { bptOut: deltaBPT } = await addLiquidity.query(\n            {\n                ...input,\n                amountsIn: [absDelta.toInputAmount()],\n            },\n            poolState,\n        );\n        const signal = deltas[tokenIndex] >= 0n ? 1n : -1n;\n        return deltaBPT.amount * signal;\n    }\n};\n","import { InputAmount } from '@/types';\nimport { AddLiquidity } from '../addLiquidity';\nimport { AddLiquidityNestedInput } from '../addLiquidityNested/types';\nimport { PriceImpactAmount } from '../priceImpactAmount';\nimport {\n    NestedPoolState,\n    NestedPoolV2,\n    NestedPoolV3,\n    PoolState,\n} from '../types';\nimport { isPoolToken } from '../utils/isPoolToken';\nimport {\n    AddLiquidityKind,\n    AddLiquidityUnbalancedInput,\n} from '../addLiquidity/types';\nimport { ChainId } from '@/utils';\nimport { TokenAmount } from '../tokenAmount';\nimport { AddLiquidityBoostedUnbalancedInput } from '../addLiquidityBoosted/types';\nimport { AddLiquidityBoostedV3 } from '../addLiquidityBoosted';\nimport { addLiquidityUnbalanced } from './addLiquidityUnbalanced';\nimport { addLiquidityUnbalancedBoosted } from './addLiquidityUnbalancedBoosted';\n\ntype AddResult = {\n    priceImpactAmount: PriceImpactAmount;\n    bptOut: TokenAmount;\n};\n\nexport async function addLiquidityNested(\n    input: AddLiquidityNestedInput,\n    nestedPoolState: NestedPoolState,\n): Promise<PriceImpactAmount> {\n    const addLiquidity = new AddLiquidity();\n    const addLiquidityBoosted = new AddLiquidityBoostedV3();\n    // sort pools from child to parent\n    const sortedPools = nestedPoolState.pools.sort((a, b) => a.level - b.level);\n    // Price impact amounts from all add actions\n    const priceImpactAmounts: PriceImpactAmount[] = [];\n    // BPT out from each child pool add action\n    const childrenBptOuts: InputAmount[] = [];\n\n    // For each pool (including parent), find PI from the corresponding add operation\n    for (const pool of sortedPools) {\n        let amountsIn: InputAmount[] = [];\n        let isBoostedPool = false;\n        if (pool.level === 0) {\n            // A lower level pool\n            // Find any user input amount related to the current pool & check if pool is boosted\n            amountsIn = input.amountsIn.filter((a) => {\n                const poolToken = isPoolToken(pool.tokens, a.address);\n                if (poolToken.isPoolToken && poolToken.isUnderlyingToken)\n                    isBoostedPool = true;\n                return poolToken.isPoolToken;\n            });\n            // skip pool if no relevant amountsIn\n            if (amountsIn.length === 0) continue;\n        } else {\n            // The parent pool\n            // Find any user input amount or bpt from child adds related to the current pool & check if pool is boosted\n            amountsIn = [...childrenBptOuts, ...input.amountsIn].filter((a) => {\n                const poolToken = isPoolToken(pool.tokens, a.address);\n                if (poolToken.isPoolToken && poolToken.isUnderlyingToken)\n                    isBoostedPool = true;\n                return poolToken.isPoolToken;\n            });\n        }\n        let addResult: AddResult;\n        if (isBoostedPool)\n            addResult = await getAddBoostedUnbalancedResult(\n                addLiquidityBoosted,\n                input.chainId,\n                input.rpcUrl,\n                pool as NestedPoolV3,\n                amountsIn,\n            );\n        else\n            addResult = await getAddUnbalancedResult(\n                addLiquidity,\n                input.chainId,\n                input.rpcUrl,\n                pool as NestedPoolV2,\n                amountsIn,\n                nestedPoolState.protocolVersion,\n            );\n\n        priceImpactAmounts.push(addResult.priceImpactAmount);\n        childrenBptOuts.push(addResult.bptOut.toInputAmount());\n    }\n\n    const priceImpactSum = priceImpactAmounts.reduce(\n        (acc, cur) => acc + cur.amount,\n        0n,\n    );\n\n    return PriceImpactAmount.fromRawAmount(priceImpactSum);\n}\n\nasync function getAddUnbalancedResult(\n    addLiquidity: AddLiquidity,\n    chainId: ChainId,\n    rpcUrl: string,\n    pool: NestedPoolV2,\n    amountsIn: InputAmount[],\n    protocolVersion: 1 | 2 | 3,\n): Promise<AddResult> {\n    const addLiquidityInput: AddLiquidityUnbalancedInput = {\n        chainId,\n        rpcUrl,\n        amountsIn,\n        kind: AddLiquidityKind.Unbalanced,\n    };\n    const poolState: PoolState = {\n        ...pool,\n        protocolVersion,\n    };\n    const priceImpactAmount = await addLiquidityUnbalanced(\n        addLiquidityInput,\n        poolState,\n    );\n\n    const { bptOut } = await addLiquidity.query(addLiquidityInput, poolState);\n\n    return { priceImpactAmount, bptOut };\n}\n\nasync function getAddBoostedUnbalancedResult(\n    addLiquidityBoosted: AddLiquidityBoostedV3,\n    chainId: ChainId,\n    rpcUrl: string,\n    pool: NestedPoolV3,\n    amountsIn: InputAmount[],\n): Promise<AddResult> {\n    const addLiquidityInput: AddLiquidityBoostedUnbalancedInput = {\n        chainId,\n        rpcUrl,\n        amountsIn,\n        kind: AddLiquidityKind.Unbalanced,\n    };\n\n    const priceImpactAmount = await addLiquidityUnbalancedBoosted(\n        addLiquidityInput,\n        { ...pool, protocolVersion: 3 },\n    );\n\n    const { bptOut } = await addLiquidityBoosted.query(addLiquidityInput, {\n        ...pool,\n        protocolVersion: 3,\n    });\n\n    return { priceImpactAmount, bptOut };\n}\n","import { AddLiquidity } from '../addLiquidity';\nimport {\n    AddLiquidityKind,\n    AddLiquiditySingleTokenInput,\n    AddLiquidityUnbalancedInput,\n} from '../addLiquidity/types';\nimport { PriceImpactAmount } from '../priceImpactAmount';\nimport { RemoveLiquidity } from '../removeLiquidity';\nimport {\n    RemoveLiquidityInput,\n    RemoveLiquidityKind,\n    RemoveLiquiditySingleTokenExactInInput,\n    RemoveLiquidityUnbalancedInput,\n} from '../removeLiquidity/types';\nimport { RemoveLiquidityNested } from '../removeLiquidityNested';\nimport { RemoveLiquidityNestedSingleTokenInputV2 } from '../removeLiquidityNested/removeLiquidityNestedV2/types';\nimport { TokenAmount } from '../tokenAmount';\nimport { NestedPoolState, PoolState, PoolStateWithUnderlyings } from '../types';\nimport { getSortedTokens } from '../utils';\nimport { AddLiquidityNestedInput } from '../addLiquidityNested/types';\nimport { AddLiquidityNested } from '../addLiquidityNested';\nimport { AddLiquidityBoostedUnbalancedInput } from '../addLiquidityBoosted/types';\nimport { addLiquidityUnbalancedBoosted } from './addLiquidityUnbalancedBoosted';\nimport { addLiquidityNested } from './addLiquidityNested';\nimport { priceImpactABA } from './helper';\nimport { addLiquidityUnbalanced } from './addLiquidityUnbalanced';\n\nexport * from './helper';\n\nexport class PriceImpact {\n    /**\n     * Calculate price impact on add liquidity single token operations\n     * @param input same input used in the corresponding add liquidity operation\n     * @param poolState same pool state used in the corresponding add liquidity operation\n     * @returns price impact amount\n     */\n    static addLiquiditySingleToken = async (\n        input: AddLiquiditySingleTokenInput,\n        poolState: PoolState,\n    ): Promise<PriceImpactAmount> => {\n        // inputs are being validated within AddLiquidity\n\n        // simulate adding liquidity to get amounts in\n        const addLiquidity = new AddLiquidity();\n        let amountsIn: TokenAmount[];\n        try {\n            const queryResult = await addLiquidity.query(input, poolState);\n            amountsIn = queryResult.amountsIn;\n        } catch (err) {\n            throw new Error(\n                `addLiquiditySingleToken operation will fail at SC level with user defined input.\\n${err}`,\n            );\n        }\n\n        // simulate removing liquidity to get amounts out\n        const removeLiquidity = new RemoveLiquidity();\n        const removeLiquidityInput: RemoveLiquidityInput = {\n            chainId: input.chainId,\n            rpcUrl: input.rpcUrl,\n            bptIn: input.bptOut,\n            tokenOut: input.tokenIn,\n            kind: RemoveLiquidityKind.SingleTokenExactIn,\n        };\n        const { amountsOut } = await removeLiquidity.query(\n            removeLiquidityInput,\n            poolState,\n        );\n\n        // get relevant amounts for price impact calculation\n        const sortedTokens = getSortedTokens(poolState.tokens, input.chainId);\n        const tokenIndex = sortedTokens.findIndex((t) =>\n            t.isSameAddress(input.tokenIn),\n        );\n\n        return priceImpactABA(amountsIn[tokenIndex], amountsOut[tokenIndex]);\n    };\n\n    /**\n     * Calculate price impact on add liquidity unbalanced operations\n     *\n     * This is the only price impact calculation that adapts the ABA method instead\n     * of applying it directly. This happens because tha ABA method requires a\n     * corresponding reverse operation to be applied, so we \"get back\" to the original\n     * state for comparison, hence A -> B -> A.\n     * This is not possible for AddLiquidityUnbalanced on v3 because there is no\n     * RemoveLiquidityUnbalanced.\n     * The alternative found was to simulate the RemoveLiquidityUnbalanced by applying\n     * RemoveLiquidityProportional and then swapping between tokens.\n     *\n     * Here are the steps to calculate the price impact for add liquidity unbalanced:\n     * 1. query add liquidity unbalanced with `exactAmountsIn` to get `bptOut`\n     * 2. query remove liquidity proportional with `bptOut` as `bptIn` to get `proportionalAmountsOut`\n     * 3. get `diffs` =  `proportionalAmountsOut` - `exactAmountsIn`\n     * 4. swap between tokens zeroing out the `diffs` between `proportionalAmountsOut`\n     *    and `exactAmountsIn`, leaving the remaining diff within a single\n     *    token → `diffFinal` (see code below for detailed steps)\n     * 5. `amountInitial` will be the the `exactAmountsIn` respective to `diffFinal` token\n     * 6. price impact ABA = `diffFinal` / `amountInitial` / 2\n     *\n     * @param input same input used in the corresponding add liquidity operation\n     * @param poolState same pool state used in the corresponding add liquidity operation\n     * @returns price impact amount\n     */\n    static addLiquidityUnbalanced = async (\n        input: AddLiquidityUnbalancedInput,\n        poolState: PoolState,\n    ): Promise<PriceImpactAmount> => {\n        return addLiquidityUnbalanced(input, poolState);\n    };\n\n    static async addLiquidityUnbalancedBoosted(\n        input: AddLiquidityBoostedUnbalancedInput,\n        poolState: PoolStateWithUnderlyings,\n    ): Promise<PriceImpactAmount> {\n        return addLiquidityUnbalancedBoosted(input, poolState);\n    }\n\n    /**\n     * Calculate price impact on adding liquidity for nested pools.\n     *\n     * Note: is based on the premise that the price impact on adding liquidity\n     * for nested pools is the sum of the price impacts of each add liquidity\n     * operation in the nested pools.\n     * @param input same input used in the corresponding add liquidity nested operation\n     * @param nestedPoolState same nested pool state used in the corresponding add liquidity nested operation\n     * @returns price impact amount\n     */\n    static addLiquidityNested = async (\n        input: AddLiquidityNestedInput,\n        nestedPoolState: NestedPoolState,\n    ): Promise<PriceImpactAmount> => {\n        // inputs are being validated within AddLiquidityNested\n        return await addLiquidityNested(input, nestedPoolState);\n    };\n\n    /**\n     * Calculate price impact on remove liquidity operations\n     * @param input same input used in the corresponding remove liquidity operation\n     * @param poolState same pool state used in the corresponding remove liquidity operation\n     * @returns price impact amount\n     */\n    static removeLiquidity = async (\n        input:\n            | RemoveLiquiditySingleTokenExactInInput\n            | RemoveLiquidityUnbalancedInput,\n        poolState: PoolState,\n    ): Promise<PriceImpactAmount> => {\n        // inputs are being validated within RemoveLiquidity\n\n        // simulate removing liquidity to get amounts out\n        const removeLiquidity = new RemoveLiquidity();\n        let amountsOut: TokenAmount[];\n        let bptIn: TokenAmount;\n        try {\n            const queryResult = await removeLiquidity.query(input, poolState);\n            amountsOut = queryResult.amountsOut;\n            bptIn = queryResult.bptIn;\n        } catch (err) {\n            throw new Error(\n                `removeLiquidity operation will fail at SC level with user defined input.\\n${err}`,\n            );\n        }\n\n        // simulate adding liquidity to get amounts in\n        const addLiquidity = new AddLiquidity();\n        const addLiquidityInput: AddLiquidityUnbalancedInput = {\n            chainId: input.chainId,\n            rpcUrl: input.rpcUrl,\n            amountsIn: amountsOut.map((a) => a.toInputAmount()),\n            kind: AddLiquidityKind.Unbalanced,\n        };\n        const { bptOut } = await addLiquidity.query(\n            addLiquidityInput,\n            poolState,\n        );\n\n        // calculate price impact using ABA method\n        return priceImpactABA(bptIn, bptOut);\n    };\n\n    /**\n     * Calculate price impact on removing liquidity for nested pools.\n     *\n     * Note: is based on the premise that the price impact on removing liquidity\n     * for nested pools is the sum of the price impacts of each remove liquidity\n     * operation in the nested pools.\n     * @param input same input used in the corresponding remove liquidity nested operation\n     * @param nestedPoolState same nested pool state used in the corresponding remove liquidity nested operation\n     * @returns price impact amount\n     */\n    static removeLiquidityNested = async (\n        input: RemoveLiquidityNestedSingleTokenInputV2,\n        nestedPoolState: NestedPoolState,\n    ): Promise<PriceImpactAmount> => {\n        // inputs are being validated within RemoveLiquidity\n\n        // simulate removing liquidity to get amounts out\n        const removeLiquidityNested = new RemoveLiquidityNested();\n        let amountsOut: TokenAmount[];\n        let bptAmountIn: TokenAmount;\n        try {\n            const queryResult = await removeLiquidityNested.query(\n                input,\n                nestedPoolState,\n            );\n            amountsOut = queryResult.amountsOut;\n            bptAmountIn = queryResult.bptAmountIn;\n        } catch (err) {\n            throw new Error(\n                `removeLiquidity operation will fail at SC level with user defined input.\\n${err}`,\n            );\n        }\n\n        // simulate adding liquidity to get amounts in\n        const addLiquidityNested = new AddLiquidityNested();\n        const addLiquidityNestedInput: AddLiquidityNestedInput = {\n            chainId: input.chainId,\n            rpcUrl: input.rpcUrl,\n            fromInternalBalance: input.toInternalBalance,\n            amountsIn: amountsOut.map((a) => a.toInputAmount()),\n        };\n        const { bptOut } = await addLiquidityNested.query(\n            addLiquidityNestedInput,\n            nestedPoolState,\n        );\n\n        // calculate price impact using ABA method\n        return priceImpactABA(bptAmountIn, bptOut);\n    };\n}\n","import { formatEther, parseEther } from 'viem';\nimport { BigintIsh } from './tokenAmount';\nimport { MathSol, WAD } from '../utils';\n\nexport class Slippage {\n    public amount: bigint;\n    public decimal: number;\n    public percentage: number;\n    public bps: number;\n\n    public static fromRawAmount(rawAmount: BigintIsh) {\n        return new Slippage(rawAmount);\n    }\n\n    public static fromDecimal(decimalAmount: `${number}`) {\n        const rawAmount = parseEther(decimalAmount);\n        return Slippage.fromRawAmount(rawAmount);\n    }\n\n    public static fromPercentage(percentageAmount: `${number}`) {\n        const decimalAmount = Number(percentageAmount) / 100;\n        return Slippage.fromDecimal(`${decimalAmount}`);\n    }\n\n    public static fromBasisPoints(bpsAmount: `${number}`) {\n        const decimalAmount = Number(bpsAmount) / 10000;\n        return Slippage.fromDecimal(`${decimalAmount}`);\n    }\n\n    /**\n     * Creates a new slippage object\n     *\n     * @param amount amount of slippage, always positive\n     */\n    protected constructor(amount: BigintIsh) {\n        this.amount =\n            BigInt(amount) > 0n ? BigInt(amount) : -1n * BigInt(amount);\n        this.decimal = parseFloat(formatEther(this.amount));\n        this.percentage = this.decimal * 100;\n        this.bps = this.decimal * 10000;\n    }\n\n    /**\n     * Applies slippage to an amount in a given direction\n     *\n     * @param amount amout to apply slippage to\n     * @param direction +1 adds the slippage to the amount, and -1 will remove the slippage from the amount\n     * @returns\n     */\n    public applyTo(amount: bigint, direction: 1 | -1 = 1): bigint {\n        return MathSol.mulDownFixed(\n            amount,\n            BigInt(direction) * this.amount + WAD,\n        );\n    }\n}\n","import { TokenAmount } from '../../../../tokenAmount';\nimport { SwapKind, Hex } from '../../../../../types';\nimport { Address, PublicClient, createPublicClient, http } from 'viem';\nimport { getLimitAmount } from '../../../limits';\nimport { Slippage } from '@/entities/slippage';\nimport { BALANCER_RELAYER, CHAINS, ChainId } from '@/utils';\nimport { isAuraBalSwap, parseInputs } from './parseInputs';\nimport { queryJoinSwap, buildJoinSwapCall } from './joinSwap';\nimport { buildSwapExitCall, querySwapExit } from './swapExit';\nimport {\n    AuraBalSwapQueryOutput,\n    SwapQueryInput,\n    AuraBalSwapKind,\n} from './types';\n\ntype AuraBalSwapBuildCallInput = {\n    slippage: Slippage;\n    wethIsEth: boolean;\n    queryOutput: AuraBalSwapQueryOutput;\n    user: Address;\n    relayerApprovalSignature?: Hex;\n};\n\ntype AuraBalSwapBuildOutput = {\n    to: Address;\n    callData: Hex;\n    value: bigint;\n    minAmountOut: TokenAmount;\n};\n\nexport class AuraBalSwap {\n    public client: PublicClient;\n\n    constructor(rpcUrl: string) {\n        this.client = createPublicClient({\n            transport: http(rpcUrl),\n            chain: CHAINS[ChainId.MAINNET],\n        });\n    }\n\n    public isAuraBalSwap(input: SwapQueryInput) {\n        return isAuraBalSwap(input);\n    }\n\n    public async query(input: SwapQueryInput): Promise<AuraBalSwapQueryOutput> {\n        const inputs = parseInputs(input);\n\n        if (inputs.kind === AuraBalSwapKind.ToAuraBal)\n            return queryJoinSwap({ ...inputs, client: this.client });\n\n        return querySwapExit({ ...inputs, client: this.client });\n    }\n\n    /**\n     * Returns the transaction data to be sent to the relayer contract\n     *\n     * @param input\n     * @returns\n     */\n    buildCall(input: AuraBalSwapBuildCallInput): AuraBalSwapBuildOutput {\n        const limitAmount = getLimitAmount(\n            input.slippage,\n            SwapKind.GivenIn,\n            input.queryOutput.expectedAmountOut,\n        );\n\n        let callData: Hex;\n        let value = 0n;\n        if (input.queryOutput.kind === AuraBalSwapKind.ToAuraBal) {\n            const buildOutput = buildJoinSwapCall(\n                input.user,\n                input.queryOutput.inputAmount.amount,\n                limitAmount.amount,\n                input.queryOutput.inputAmount.token,\n                input.wethIsEth,\n                input.relayerApprovalSignature,\n            );\n            callData = buildOutput.callData;\n            value = buildOutput.value;\n        } else {\n            callData = buildSwapExitCall(\n                input.user,\n                input.queryOutput.inputAmount.amount,\n                limitAmount.amount,\n                input.queryOutput.expectedAmountOut.token,\n                input.wethIsEth,\n                input.relayerApprovalSignature,\n            );\n        }\n\n        return {\n            to: BALANCER_RELAYER[ChainId.MAINNET],\n            callData,\n            value,\n            minAmountOut: limitAmount,\n        };\n    }\n}\n","import { Token } from '@/entities/token';\nimport { TokenAmount } from '@/entities/tokenAmount';\nimport { SwapKind } from '@/types';\n\nexport type SwapQueryInput = {\n    tokenIn: Token;\n    tokenOut: Token;\n    kind: SwapKind;\n    swapAmount: TokenAmount;\n};\n\nexport interface AuraBalSwapQueryInput {\n    kind: AuraBalSwapKind;\n    swapToken: Token;\n    inputAmount: TokenAmount;\n}\n\nexport type AuraBalSwapQueryOutput = {\n    inputAmount: TokenAmount;\n    expectedAmountOut: TokenAmount;\n    kind: AuraBalSwapKind;\n};\n\nexport enum AuraBalSwapKind {\n    FromAuraBal = 0,\n    ToAuraBal = 1,\n}\n","import { Address } from 'viem';\nimport { Token } from '@/entities/token';\nimport { ChainId, NATIVE_ASSETS } from '@/utils';\n\nexport const BAL = '0xba100000625a3754423978a60c9317c58a424e3d';\nexport const auraBAL = '0x616e8BfA43F920657B3497DBf40D6b1A02D4608d';\nexport const supportedTokens = [BAL, NATIVE_ASSETS[ChainId.MAINNET].wrapped];\nexport const auraBalToken = new Token(ChainId.MAINNET, auraBAL, 18);\nexport const balWethId =\n    '0x5c6ee304399dbdb9c8ef030ab642b10820db8f56000200000000000000000014';\nexport const balWethAddress =\n    '0x5c6ee304399dbdb9c8ef030ab642b10820db8f56' as Address;\nexport const auraBalStableId =\n    '0x3dd0843a028c86e0b760b1a76929d1c5ef93a2dd000200000000000000000249';\nexport const balWethAssets = [\n    BAL,\n    NATIVE_ASSETS[ChainId.MAINNET].wrapped,\n] as Address[];\n","import { Address } from 'viem';\nimport { Token } from '@/entities/token';\nimport {\n    AuraBalSwapKind,\n    SwapQueryInput,\n    AuraBalSwapQueryInput,\n} from './types';\nimport { supportedTokens, auraBalToken } from './constants';\nimport { SwapKind } from '@/types';\nimport { ChainId } from '@/utils';\nimport { TokenAmount } from '@/entities/tokenAmount';\n\nexport function isAuraBalSwap(input: SwapQueryInput): boolean {\n    const { tokenIn, tokenOut, kind, swapAmount } = input;\n    return (\n        isGivenIn(kind) &&\n        isAddressEqual(tokenIn, swapAmount) &&\n        isMainnet(tokenIn, tokenOut, swapAmount) &&\n        hasSupportedTokens(tokenIn, tokenOut)\n    );\n}\n\nfunction isMainnet(\n    tokenIn: Token,\n    tokenOut: Token,\n    swapAmount: TokenAmount,\n): boolean {\n    if (\n        !(\n            tokenIn.chainId === ChainId.MAINNET &&\n            tokenOut.chainId === ChainId.MAINNET &&\n            swapAmount.token.chainId\n        )\n    )\n        throw Error('auraBal Swap: Must be mainnet.');\n    return true;\n}\n\nfunction isAddressEqual(token: Token, amount: TokenAmount): boolean {\n    if (!token.isSameAddress(amount.token.address))\n        throw Error('auraBal Swap: tokenIn and swapAmount address must match.');\n    return true;\n}\n\nfunction isGivenIn(kind): boolean {\n    if (kind !== SwapKind.GivenIn)\n        throw Error('auraBal Swap: Must be SwapKind GivenIn.');\n    return true;\n}\n\nfunction hasSupportedTokens(tokenIn: Token, tokenOut: Token): boolean {\n    const tokenInIsAuraBal = auraBalToken.isSameAddress(tokenIn.address);\n    const tokenOutIsAuraBal = auraBalToken.isSameAddress(tokenOut.address);\n    if (tokenInIsAuraBal && tokenOutIsAuraBal)\n        throw Error('auraBal Swap: Both tokens are auraBal');\n    if (!tokenInIsAuraBal && !tokenOutIsAuraBal)\n        throw Error('auraBal Swap: Must have tokenIn or tokenOut as auraBal.');\n\n    if (tokenInIsAuraBal) {\n        if (!isSupportedToken(tokenOut))\n            throw Error('auraBal Swap: Unsupported tokenOut');\n    } else if (tokenOutIsAuraBal) {\n        if (!isSupportedToken(tokenIn))\n            throw Error('auraBal Swap: Unsupported tokenIn');\n    }\n    return true;\n}\n\nexport function parseInputs(input: SwapQueryInput): AuraBalSwapQueryInput {\n    const { tokenIn, tokenOut, swapAmount } = input;\n    if (!isAuraBalSwap(input)) throw Error('Not A Valid AuraBal Swap');\n\n    const auraBalIn = auraBalToken.isSameAddress(tokenIn.address);\n    return {\n        kind: auraBalIn\n            ? AuraBalSwapKind.FromAuraBal\n            : AuraBalSwapKind.ToAuraBal,\n        swapToken: auraBalIn ? tokenOut : tokenIn,\n        inputAmount: swapAmount,\n    };\n}\n\nfunction isSupportedToken(token: Token): boolean {\n    return supportedTokens.some((t) => token.isSameAddress(t as Address));\n}\n","import {\n    decodeAbiParameters,\n    decodeFunctionResult,\n    encodeFunctionData,\n    zeroAddress,\n    Address,\n    Hex,\n} from 'viem';\nimport { TokenAmount } from '../../../../tokenAmount';\nimport { BALANCER_RELAYER, ChainId, EMPTY_SENDER } from '@/utils';\nimport { balancerRelayerAbi } from '@/abi';\nimport { Relayer } from '@/entities/relayer';\nimport { auraBalToken, balWethAddress, auraBAL } from './constants';\nimport { encodeJoinData } from './joinPool';\nimport { encodeSwapData } from './swap';\nimport { AuraBalSwapQueryOutput, AuraBalSwapQueryInput } from './types';\nimport { Token } from '@/entities/token';\n\n// token[join]8020BPT[swap]auraBAL\nexport async function queryJoinSwap(\n    input: AuraBalSwapQueryInput & { client },\n): Promise<AuraBalSwapQueryOutput> {\n    const { swapToken: joinToken, inputAmount, kind, client } = input;\n    const value = 0n;\n\n    // join BAL-WETH 80/20 Pool with joinToken and get 8020BPT in return\n    const { joinPoolData, joinPoolOpRef } = encodeJoinData(\n        joinToken,\n        zeroAddress, // Note zeroAddress used for query but not for build\n        inputAmount.amount,\n        false, // for query we always use WETH\n    );\n\n    // swap 8020BPT>aurABL through auraBal/8020BPT stable pool\n    // For query we set limit to 0\n    const { swapData, swapOpRef } = encodeSwapData(\n        joinPoolOpRef,\n        balWethAddress,\n        auraBAL as Address,\n        zeroAddress,\n        zeroAddress,\n        0n,\n        value,\n        true,\n    );\n\n    // peek call is used to read final result\n    const peekData = Relayer.encodePeekChainedReferenceValue(swapOpRef);\n\n    // vaultActionsQueryMulticall allows us to query even if user has no balance/allowance\n    const encodedMulticall = encodeFunctionData({\n        abi: balancerRelayerAbi,\n        functionName: 'vaultActionsQueryMulticall',\n        args: [[joinPoolData, swapData, peekData]],\n    });\n\n    const { data } = await client.call({\n        ...EMPTY_SENDER,\n        to: BALANCER_RELAYER[ChainId.MAINNET],\n        data: encodedMulticall,\n    });\n\n    const result = decodeFunctionResult({\n        abi: balancerRelayerAbi,\n        functionName: 'vaultActionsQueryMulticall',\n        data: data as Hex,\n    });\n\n    const peekedValue = decodeAbiParameters(\n        [{ type: 'uint256' }],\n        result[result.length - 1],\n    )[0];\n    return {\n        inputAmount: TokenAmount.fromRawAmount(joinToken, inputAmount.amount),\n        expectedAmountOut: TokenAmount.fromRawAmount(auraBalToken, peekedValue),\n        kind,\n    };\n}\n\nexport function buildJoinSwapCall(\n    userAddress: Address,\n    inputAmount: bigint,\n    swapLimit: bigint,\n    joinToken: Token,\n    wethIsEth: boolean,\n    relayerApprovalSignature?: Hex,\n): { callData: Hex; value: bigint } {\n    // join BAL-WETH 80/20 Pool with joinToken and get 8020BPT in return (to the RELAYER)\n    const { joinPoolData, joinPoolOpRef, value } = encodeJoinData(\n        joinToken,\n        userAddress,\n        inputAmount,\n        wethIsEth,\n    );\n\n    // Older pools don't have pre-approval so need to add this as a step, approves Vault to spend on RELAYERS behalf\n    const approval = Relayer.encodeApproveVault(balWethAddress, joinPoolOpRef);\n\n    // swap 8020BPT>auraBAL through auraBal/8020BPT stable pool\n    // swap sends from the RELAYER to the user\n    // swap is last action so uses limit defined with user slippage\n    const { swapData } = encodeSwapData(\n        joinPoolOpRef,\n        balWethAddress,\n        auraBAL as Address,\n        BALANCER_RELAYER[ChainId.MAINNET],\n        userAddress,\n        swapLimit,\n        0n, // always 0 value\n        true,\n    );\n\n    const encodedCalls = [joinPoolData, approval, swapData];\n\n    // prepend relayer approval if provided\n    if (relayerApprovalSignature !== undefined) {\n        encodedCalls.unshift(\n            Relayer.encodeSetRelayerApproval(\n                BALANCER_RELAYER[ChainId.MAINNET],\n                true,\n                relayerApprovalSignature,\n            ),\n        );\n    }\n\n    const encodedMulticall = encodeFunctionData({\n        abi: balancerRelayerAbi,\n        functionName: 'multicall',\n        args: [encodedCalls],\n    });\n\n    return { callData: encodedMulticall, value };\n}\n","import {\n    Address,\n    encodeAbiParameters,\n    encodeFunctionData,\n    parseAbiParameters,\n    Hex,\n} from 'viem';\nimport { Token } from '@/entities/token';\nimport { BALANCER_RELAYER, ChainId, NATIVE_ASSETS } from '@/utils';\nimport { batchRelayerLibraryAbi } from '@/abi';\nimport { Relayer } from '@/entities/relayer';\nimport { balWethAssets, balWethId } from './constants';\nimport { replaceWrapped } from './replaceWrapped';\n\nexport function encodeJoinData(\n    token: Token,\n    sender: Address,\n    inputAmount: bigint,\n    wethIsEth: boolean,\n): { joinPoolData: Hex; joinPoolOpRef: bigint; value: bigint } {\n    const tokenInIndex = balWethAssets.findIndex((t) => token.isSameAddress(t));\n    if (tokenInIndex === -1)\n        throw new Error(`Join token not in BAL-WETH pool ${token.address}`);\n\n    const useNativeAsset =\n        wethIsEth && token.isUnderlyingEqual(NATIVE_ASSETS[ChainId.MAINNET]);\n\n    const maxAmountsIn = Array(balWethAssets.length).fill(0n);\n    maxAmountsIn[tokenInIndex] = inputAmount;\n    // stable pool (no need to worry about phantomBpt)\n    const poolKind = 1;\n    // type 1 = EXACT_TOKENS_IN_FOR_BPT_OUT\n    // amountsIn\n    // minimumBPT - as join is first in multicall we use 0 as min (not safe otherwise)\n    const userData = encodeAbiParameters(\n        parseAbiParameters('uint256, uint256[], uint256'),\n        [1n, maxAmountsIn, 0n],\n    );\n    const joinPoolRequest = {\n        assets: useNativeAsset\n            ? replaceWrapped(balWethAssets, ChainId.MAINNET)\n            : balWethAssets,\n        maxAmountsIn,\n        userData,\n        fromInternalBalance: false,\n    };\n    // Note this opref must be non-temp as it is used in approval then swap\n    const joinPoolOpRef = Relayer.toChainedReference(1n, false);\n    const value = useNativeAsset ? inputAmount : 0n;\n    const joinPoolData = encodeFunctionData({\n        abi: batchRelayerLibraryAbi,\n        functionName: 'joinPool',\n        args: [\n            balWethId,\n            poolKind,\n            sender, // Join tokens come from the user\n            BALANCER_RELAYER[ChainId.MAINNET], // BPT goes to the Relayer (so we can approve for swap)\n            joinPoolRequest,\n            value,\n            joinPoolOpRef,\n        ] as const,\n    });\n\n    return {\n        joinPoolData,\n        joinPoolOpRef,\n        value,\n    };\n}\n","import { NATIVE_ASSETS, ZERO_ADDRESS } from '@/utils';\nimport { Address } from 'viem';\n\nexport function replaceWrapped(tokens: Address[], chainId: number): Address[] {\n    return tokens.map((token) => {\n        if (\n            NATIVE_ASSETS[chainId].wrapped.toLowerCase() === token.toLowerCase()\n        ) {\n            return ZERO_ADDRESS;\n        }\n        return token;\n    });\n}\n","import { Address, encodeFunctionData, Hex } from 'viem';\nimport { MAX_UINT256 } from '@/utils';\nimport { batchRelayerLibraryAbi } from '@/abi';\nimport { Relayer } from '@/entities/relayer';\nimport { auraBalStableId } from './constants';\n\nexport function encodeSwapData(\n    amount: bigint,\n    assetIn: Address,\n    assetOut: Address,\n    sender: Address,\n    recipient: Address,\n    limit: bigint,\n    value: bigint,\n    isTempRef: boolean,\n): { swapData: Hex; swapOpRef: bigint } {\n    const singleSwap = {\n        poolId: auraBalStableId as Hex,\n        kind: 0,\n        assetIn,\n        assetOut,\n        amount, // Note - this can be an opRef\n        userData: '0x' as Hex,\n    };\n    const funds = {\n        sender,\n        recipient,\n        fromInternalBalance: false,\n        toInternalBalance: false,\n    };\n\n    // When its not a temp ref it can be read more than once\n    const swapOpRef = Relayer.toChainedReference(2n, isTempRef);\n\n    const swapData = encodeFunctionData({\n        abi: batchRelayerLibraryAbi,\n        functionName: 'swap',\n        args: [\n            singleSwap,\n            funds,\n            limit,\n            MAX_UINT256,\n            value,\n            swapOpRef,\n        ] as const,\n    });\n\n    return {\n        swapData,\n        swapOpRef,\n    };\n}\n","import {\n    decodeAbiParameters,\n    decodeFunctionResult,\n    encodeFunctionData,\n    zeroAddress,\n    Address,\n    Hex,\n} from 'viem';\nimport { TokenAmount } from '../../../../tokenAmount';\nimport { BALANCER_RELAYER, ChainId, EMPTY_SENDER } from '@/utils';\nimport { balancerRelayerAbi } from '@/abi';\nimport { Relayer } from '@/entities/relayer';\nimport { auraBalToken, balWethAddress, auraBAL } from './constants';\nimport { encodeSwapData } from './swap';\nimport { AuraBalSwapQueryOutput, AuraBalSwapQueryInput } from './types';\nimport { Token } from '@/entities/token';\nimport { encodeExitData } from './exitPool';\n\n// auraBal[swap]8020Bpt[exit]token\nexport async function querySwapExit(\n    input: AuraBalSwapQueryInput & { client },\n): Promise<AuraBalSwapQueryOutput> {\n    const { swapToken: exitToken, inputAmount, kind, client } = input;\n    const value = 0n;\n\n    // swap aurABL>8020BPT through auraBal/8020BPT stable pool\n    const { swapData, swapOpRef } = encodeSwapData(\n        inputAmount.amount,\n        auraBAL as Address,\n        balWethAddress,\n        zeroAddress, // Note zeroAddress used for query but not for build\n        zeroAddress,\n        0n,\n        value,\n        true,\n    );\n\n    // exit BAL-WETH 80/20 Pool to exitToken\n    // For query we set limit to 0\n    const { exitPoolData, exitPoolOpRef } = encodeExitData(\n        exitToken,\n        zeroAddress, // Note zeroAddress used for query but not for build\n        swapOpRef,\n        0n,\n        false, // always use weth for query\n    );\n\n    // peek call is used to read final result\n    const peekData = Relayer.encodePeekChainedReferenceValue(exitPoolOpRef);\n\n    // vaultActionsQueryMulticall allows us to query even if user has no balance/allowance\n    const encodedMulticall = encodeFunctionData({\n        abi: balancerRelayerAbi,\n        functionName: 'vaultActionsQueryMulticall',\n        args: [[swapData, exitPoolData, peekData]],\n    });\n\n    const { data } = await client.call({\n        ...EMPTY_SENDER,\n        to: BALANCER_RELAYER[ChainId.MAINNET],\n        data: encodedMulticall,\n    });\n\n    const result = decodeFunctionResult({\n        abi: balancerRelayerAbi,\n        functionName: 'vaultActionsQueryMulticall',\n        data: data as Hex,\n    });\n\n    const peekedValue = decodeAbiParameters(\n        [{ type: 'uint256' }],\n        result[result.length - 1],\n    )[0];\n\n    return {\n        inputAmount: TokenAmount.fromRawAmount(\n            auraBalToken,\n            inputAmount.amount,\n        ),\n        expectedAmountOut: TokenAmount.fromRawAmount(exitToken, peekedValue),\n        kind,\n    };\n}\n\nexport function buildSwapExitCall(\n    user: Address,\n    inputAmount: bigint,\n    exitLimit: bigint,\n    exitToken: Token,\n    wethIsEth: boolean,\n    relayerApprovalSignature?: Hex,\n): Hex {\n    const value = 0n;\n\n    // swap aurABL>8020BPT through auraBal/8020BPT stable pool\n    // swap sends from the user to the RELAYER.\n    // swap limit as 0 because swap is first step (unsafe otherwise)\n    // opRef must be non-temp so approval and exit can use it\n    const { swapData, swapOpRef } = encodeSwapData(\n        inputAmount,\n        auraBAL as Address,\n        balWethAddress,\n        user,\n        BALANCER_RELAYER[ChainId.MAINNET],\n        0n,\n        value,\n        false,\n    );\n\n    // Older pools don't have pre-approval so need to add this as a step\n    const approval = Relayer.encodeApproveVault(balWethAddress, swapOpRef);\n\n    // exit BAL-WETH 80/20 Pool to exitToken\n    // exit is last action so uses limit defined with user slippage\n    const { exitPoolData } = encodeExitData(\n        exitToken,\n        user,\n        swapOpRef,\n        exitLimit,\n        wethIsEth,\n    );\n\n    const encodedCalls = [swapData, approval, exitPoolData];\n\n    // prepend relayer approval if provided\n    if (relayerApprovalSignature !== undefined) {\n        encodedCalls.unshift(\n            Relayer.encodeSetRelayerApproval(\n                BALANCER_RELAYER[ChainId.MAINNET],\n                true,\n                relayerApprovalSignature,\n            ),\n        );\n    }\n\n    const encodedMulticall = encodeFunctionData({\n        abi: balancerRelayerAbi,\n        functionName: 'multicall',\n        args: [encodedCalls],\n    });\n\n    return encodedMulticall;\n}\n","import {\n    Address,\n    encodeAbiParameters,\n    encodeFunctionData,\n    parseAbiParameters,\n    Hex,\n} from 'viem';\nimport { Token } from '@/entities/token';\nimport { BALANCER_RELAYER, ChainId } from '@/utils';\nimport { batchRelayerLibraryAbi } from '@/abi';\nimport { Relayer } from '@/entities/relayer';\nimport { balWethAssets, balWethId } from './constants';\nimport { replaceWrapped } from './replaceWrapped';\n\nexport function encodeExitData(\n    token: Token,\n    userAddress: Address,\n    swapOpRef: bigint,\n    limit: bigint,\n    wethIsEth: boolean,\n): { exitPoolData: Hex; exitPoolOpRef: bigint } {\n    const tokenOutIndex = balWethAssets.findIndex((t) =>\n        token.isSameAddress(t),\n    );\n    if (tokenOutIndex === -1)\n        throw new Error(`exit token not in BAL-WETH pool ${token.address}`);\n    const minAmountsOut = Array(balWethAssets.length).fill(0n);\n    minAmountsOut[tokenOutIndex] = limit;\n    // stable pool (no need to worry about phantomBpt)\n    const poolKind = 1;\n    // type 0 = EXACT_BPT_IN_FOR_ONE_TOKEN_OUT\n    // bptAmountIn\n    // exitTokenIndex\n    const userData = encodeAbiParameters(\n        parseAbiParameters('uint256, uint256, uint256'),\n        [0n, swapOpRef, BigInt(tokenOutIndex)],\n    );\n\n    const exitPoolRequest = {\n        assets: wethIsEth\n            ? replaceWrapped(balWethAssets, ChainId.MAINNET)\n            : balWethAssets,\n        minAmountsOut,\n        userData,\n        toInternalBalance: false,\n    };\n    const exitPoolOpRefKey = Relayer.toChainedReference(1n);\n    const exitPoolData = encodeFunctionData({\n        abi: batchRelayerLibraryAbi,\n        functionName: 'exitPool',\n        args: [\n            balWethId,\n            poolKind,\n            BALANCER_RELAYER[1], // BPT comes from the Relayer (so we can approve before exit)\n            userAddress, // exit token goes to the user\n            exitPoolRequest,\n            [{ key: exitPoolOpRefKey, index: BigInt(tokenOutIndex) }],\n        ] as const,\n    });\n\n    return {\n        exitPoolData,\n        exitPoolOpRef: exitPoolOpRefKey,\n    };\n}\n"],"mappings":"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","names":["PoolType","SwapKind","TokenType","ChainId","getContract","getContract","createPublicClient","http","Pools","createPublicClient","http","encodeAbiParameters","AddLiquidityKind","RemoveLiquidityKind","ComposableStablePoolJoinKind","ComposableStablePoolExitKind","encodeAbiParameters","createPublicClient","http","parseUnits","createPublicClient","http","parseUnits","createPublicClient","http","createPublicClient","http","createPublicClient","formatEther","formatUnits","http","createPublicClient","http","formatUnits","formatEther","createPublicClient","formatEther","formatUnits","http","createPublicClient","http","formatUnits","formatEther","parseUnits","parseUnits","isPoolToken","encodeAbiParameters","encodeAbiParameters","encodeFunctionData","encodeFunctionData","encodeFunctionData","encodeAbiParameters","WeightedPoolJoinKind","WeightedPoolExitKind","encodeAbiParameters","encodeFunctionData","encodeFunctionData","createPublicClient","http","createPublicClient","http","createPublicClient","http","createPublicClient","http","createPublicClient","http","createPublicClient","http","encodeFunctionData","zeroAddress","zeroAddress","encodeFunctionData","encodeFunctionData","encodeFunctionData","zeroAddress","createPublicClient","http","doAddLiquidityUnbalancedQuery","createPublicClient","http","createPublicClient","http","doAddLiquidityProportionalQuery","createPublicClient","http","doAddLiquidityUnbalancedQuery","zeroAddress","doAddLiquidityProportionalQuery","encodeFunctionData","encodeFunctionData","createPublicClient","http","doAddLiquidityQuery","createPublicClient","http","doAddLiquidityQuery","encodeFunctionData","encodeFunctionData","concat","encodeFunctionData","pad","toHex","pad","toHex","concat","encodeFunctionData","encodeFunctionData","encodeFunctionData","createPublicClient","http","createPublicClient","http","PoolKind","encodeFunctionData","createPublicClient","encodeFunctionData","http","zeroAddress","createPublicClient","http","max","zeroAddress","encodeFunctionData","encodeFunctionData","encodeFunctionData","encodeFunctionData","parseEther","encodeFunctionData","parseEther","encodeFunctionData","zeroAddress","zeroAddress","encodeFunctionData","encodeFunctionData","zeroAddress","zeroAddress","encodeFunctionData","encodeFunctionData","createPublicClient","http","createPublicClient","http","encodeFunctionData","encodeFunctionData","encodeFunctionData","encodeFunctionData","encodeFunctionData","encodeFunctionData","encodeFunctionData","getAmountsQuery","getAmountsCall","getAmountsCall","getNonce","encodeFunctionData","createPublicClient","http","createPublicClient","http","getAmountsQuery","getAmountsCall","encodeFunctionData","encodeFunctionData","getAmountsQuery","getAmountsCall","encodeFunctionData","encodeFunctionData","getAmountsQuery","getAmountsCall","encodeFunctionData","createPublicClient","http","createPublicClient","http","createPublicClient","http","createPublicClient","http","encodeFunctionData","encodeFunctionData","encodeFunctionData","encodeFunctionData","encodeFunctionData","encodeFunctionData","encodeFunctionData","encodeRemoveLiquidityRecovery","encodeFunctionData","encodeFunctionData","zeroAddress","getAmountsQuery","zeroAddress","getAmountsCall","encodeRemoveLiquidityRecovery","encodeFunctionData","encodeFunctionData","getAmountsCall","encodeFunctionData","encodeFunctionData","encodeFunctionData","encodeCalls","encodeFunctionData","createPublicClient","decodeAbiParameters","decodeFunctionResult","http","createPublicClient","http","decodeFunctionResult","decodeAbiParameters","getQueryCallsAttributes","validateQueryInput","validateBuildCallInput","validateQueryInput","getQueryCallsAttributes","encodeCalls","encodeFunctionData","validateBuildCallInput","createPublicClient","encodeFunctionData","http","zeroAddress","createPublicClient","http","max","zeroAddress","encodeFunctionData","encodeFunctionData","zeroAddress","validateBuildCallInput","zeroAddress","encodeFunctionData","createPublicClient","encodeFunctionData","getContract","http","createPublicClient","http","getContract","encodeFunctionData","createPublicClient","encodeFunctionData","getContract","http","zeroAddress","createPublicClient","http","getContract","zeroAddress","swapsWithLimits","result","encodeFunctionData","formatEther","parseEther","formatEther","parseEther","encodeFunctionData","zeroAddress","createPublicClient","http","doRemoveLiquidityProportionalQuery","createPublicClient","http","doRemoveLiquidityProportionalQuery","zeroAddress","getAmountsCall","encodeFunctionData","err","queryAddLiquidityForTokenDelta","zeroOutDeltas","deltas","deltaBPTs","addLiquidityNested","formatEther","parseEther","formatEther","parseEther","createPublicClient","http","AuraBalSwapKind","decodeAbiParameters","decodeFunctionResult","encodeFunctionData","zeroAddress","encodeAbiParameters","encodeFunctionData","replaceWrapped","encodeAbiParameters","replaceWrapped","encodeFunctionData","encodeFunctionData","encodeFunctionData","zeroAddress","encodeFunctionData","decodeFunctionResult","decodeAbiParameters","decodeAbiParameters","decodeFunctionResult","encodeFunctionData","zeroAddress","encodeAbiParameters","encodeFunctionData","parseAbiParameters","encodeAbiParameters","parseAbiParameters","replaceWrapped","encodeFunctionData","zeroAddress","encodeFunctionData","decodeFunctionResult","decodeAbiParameters","createPublicClient","http"]}